{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/hexo-theme-matery/source/favicon.png","path":"favicon.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/bb.css","path":"css/bb.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/gitment.css","path":"css/gitment.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/matery.css","path":"css/matery.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/my-gitalk.css","path":"css/my-gitalk.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/my.css","path":"css/my.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/matery.js","path":"js/matery.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/avatar.jpg","path":"medias/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/comment_bg.png","path":"medias/comment_bg.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/icp.png","path":"medias/icp.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/logo.png","path":"medias/logo.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/animate/animate.min.css","path":"libs/animate/animate.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.css","path":"libs/aos/aos.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.js","path":"libs/aos/aos.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.css","path":"libs/aplayer/APlayer.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/canvas-nest.js","path":"libs/background/canvas-nest.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-dynamic.js","path":"libs/background/ribbon-dynamic.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-refresh.min.js","path":"libs/background/ribbon-refresh.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon.min.js","path":"libs/background/ribbon.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeBlockFuction.js","path":"libs/codeBlock/codeBlockFuction.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeCopy.js","path":"libs/codeBlock/codeCopy.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeLang.js","path":"libs/codeBlock/codeLang.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeShrink.js","path":"libs/codeBlock/codeShrink.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/cryptojs/crypto-js.min.js","path":"libs/cryptojs/crypto-js.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.css","path":"libs/dplayer/DPlayer.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.css","path":"libs/gitalk/gitalk.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment-default.css","path":"libs/gitment/gitment-default.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/instantpage/instantpage.js","path":"libs/instantpage/instantpage.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","path":"libs/jqcloud/jqcloud-1.0.4.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud.css","path":"libs/jqcloud/jqcloud.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/masonry/masonry.pkgd.min.js","path":"libs/masonry/masonry.pkgd.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/minivaline/MiniValine.js","path":"libs/minivaline/MiniValine.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/busuanzi.pure.mini.js","path":"libs/others/busuanzi.pure.mini.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/clicklove.js","path":"libs/others/clicklove.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/prism/prism.css","path":"libs/prism/prism.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/scrollprogress/scrollProgress.min.js","path":"libs/scrollprogress/scrollProgress.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.css","path":"libs/tocbot/tocbot.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.min.js","path":"libs/tocbot/tocbot.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/twikoo/twikoo.all.min.js.LICENSE.txt","path":"libs/twikoo/twikoo.all.min.js.LICENSE.txt","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/cover.jpg","path":"medias/cover.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/16.jpg","path":"medias/featureimages/16.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/2.jpg","path":"medias/featureimages/2.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/21.jpg","path":"medias/featureimages/21.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/22.jpg","path":"medias/featureimages/22.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/23.jpg","path":"medias/featureimages/23.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/3.jpg","path":"medias/featureimages/3.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/5.jpg","path":"medias/featureimages/5.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/7.jpg","path":"medias/featureimages/7.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/reward/alipay.jpg","path":"medias/reward/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/reward/wechat.png","path":"medias/reward/wechat.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.js","path":"libs/aplayer/APlayer.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.js","path":"libs/dplayer/DPlayer.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment.js","path":"libs/gitment/gitment.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jquery/jquery.min.js","path":"libs/jquery/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/valine/Valine.min.js","path":"libs/valine/Valine.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/0.jpg","path":"medias/banner/0.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/2.jpg","path":"medias/banner/2.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/3.jpg","path":"medias/banner/3.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/0.jpg","path":"medias/featureimages/0.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/1.jpg","path":"medias/featureimages/1.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/10.jpg","path":"medias/featureimages/10.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/11.jpg","path":"medias/featureimages/11.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/12.jpg","path":"medias/featureimages/12.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/13.jpg","path":"medias/featureimages/13.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/15.jpg","path":"medias/featureimages/15.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/17.jpg","path":"medias/featureimages/17.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/19.jpg","path":"medias/featureimages/19.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/18.jpg","path":"medias/featureimages/18.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/20.jpg","path":"medias/featureimages/20.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/4.jpg","path":"medias/featureimages/4.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/6.jpg","path":"medias/featureimages/6.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/8.jpg","path":"medias/featureimages/8.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/9.jpg","path":"medias/featureimages/9.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.eot","path":"libs/awesome/webfonts/fa-regular-400.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.ttf","path":"libs/awesome/webfonts/fa-regular-400.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff","path":"libs/awesome/webfonts/fa-regular-400.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff2","path":"libs/awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.min.js","path":"libs/gitalk/gitalk.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/css/lightgallery.min.css","path":"libs/lightGallery/css/lightgallery.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.eot","path":"libs/lightGallery/fonts/lg.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.svg","path":"libs/lightGallery/fonts/lg.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.ttf","path":"libs/lightGallery/fonts/lg.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.woff","path":"libs/lightGallery/fonts/lg.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/loading.gif","path":"libs/lightGallery/img/loading.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/video-play.png","path":"libs/lightGallery/img/video-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/vimeo-play.png","path":"libs/lightGallery/img/vimeo-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/youtube-play.png","path":"libs/lightGallery/img/youtube-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/js/lightgallery-all.min.js","path":"libs/lightGallery/js/lightgallery-all.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.css","path":"libs/materialize/materialize.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.js","path":"libs/materialize/materialize.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/css/share.min.css","path":"libs/share/css/share.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.eot","path":"libs/share/fonts/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.svg","path":"libs/share/fonts/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.ttf","path":"libs/share/fonts/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.woff","path":"libs/share/fonts/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/js/jquery.share.min.js","path":"libs/share/js/jquery.share.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/js/social-share.min.js","path":"libs/share/js/social-share.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/valine/av-min.js","path":"libs/valine/av-min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/1.jpg","path":"medias/banner/1.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/5.jpg","path":"medias/banner/5.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/6.jpg","path":"medias/banner/6.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/14.jpg","path":"medias/featureimages/14.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff2","path":"libs/awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff","path":"libs/awesome/webfonts/fa-solid-900.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff2","path":"libs/awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.css","path":"libs/awesome/css/all.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff","path":"libs/awesome/webfonts/fa-brands-400.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.eot","path":"libs/awesome/webfonts/fa-brands-400.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/4.jpg","path":"medias/banner/4.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.svg","path":"libs/awesome/webfonts/fa-regular-400.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.eot","path":"libs/awesome/webfonts/fa-solid-900.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.ttf","path":"libs/awesome/webfonts/fa-brands-400.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.ttf","path":"libs/awesome/webfonts/fa-solid-900.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/twikoo/twikoo.all.min.js","path":"libs/twikoo/twikoo.all.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.svg","path":"libs/awesome/webfonts/fa-brands-400.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/echarts/echarts.min.js","path":"libs/echarts/echarts.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.svg","path":"libs/awesome/webfonts/fa-solid-900.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/test.html","hash":"816343929ea0294ca95e3581a818db756a5d4e8a","modified":1611655436639},{"_id":"themes/hexo-theme-matery/.gitignore","hash":"727607929a51db7ea10968f547c26041eee9cfff","modified":1611651485465},{"_id":"themes/hexo-theme-matery/CHANGELOG.md","hash":"084ec8b110a20170d08a0aa5fd8accf601051835","modified":1611651485465},{"_id":"themes/hexo-theme-matery/LICENSE","hash":"7df059597099bb7dcf25d2a9aedfaf4465f72d8d","modified":1611651485465},{"_id":"themes/hexo-theme-matery/README.md","hash":"0366f3d50b18d095b0581e7b5974e3283d693884","modified":1611651485466},{"_id":"themes/hexo-theme-matery/README_CN.md","hash":"a1e060bb4cf2ccca5cad12d02cc3c37f8028fdfb","modified":1611651485466},{"_id":"themes/hexo-theme-matery/_config.yml","hash":"fde5e2e2e874af6a180afe9e2e0b38044da91d58","modified":1611651485467},{"_id":"source/_posts/he","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1611655436636},{"_id":"source/_posts/blog_create.md","hash":"5f3cf7f6bb829e44fb109438bfab585b002170bc","modified":1611655436636},{"_id":"source/_posts/druid_single_machine.md","hash":"aae5fbb882f0ad11c04ddbce48b55f4a5c5dafa3","modified":1611655436636},{"_id":"source/_posts/hello-world.md","hash":"46ec255b6fd8f5e3b22e6e6d0d86789cc34e27a3","modified":1611655436636},{"_id":"source/_posts/hexo_yufa.md","hash":"022c7c2a88e1a52a5c5ce523baf61f952fc59245","modified":1611655436636},{"_id":"source/_posts/plan.md","hash":"98908f4ae3d90e69e52b8516556c19cbdb2d0215","modified":1611655436637},{"_id":"source/_posts/pom.md","hash":"cc60bced8dd16da9a096426f6690a497159c3a6d","modified":1611655436639},{"_id":"source/_posts/xshell5.md","hash":"97b2295fd8cf8a9d7beb7ec69063741fc2f78c84","modified":1611655436639},{"_id":"source/about/index.md","hash":"2e9a5a4f6d693797000318696c470f77a268f3e6","modified":1611655436639},{"_id":"source/tags/index.md","hash":"6d2945c914d751a11d4740e879d415a00e94bde0","modified":1611655436639},{"_id":"themes/hexo-theme-matery/.git/HEAD","hash":"dd8e8826088c2a83b5ebe1e83fa0aa5f0ed56f98","modified":1611651485460},{"_id":"themes/hexo-theme-matery/.git/config","hash":"1bdf661e9979805f9f935f20a1293814881800be","modified":1611651485460},{"_id":"themes/hexo-theme-matery/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1611651447730},{"_id":"themes/hexo-theme-matery/.git/index","hash":"f27bb831f19ca00a679a8cb46d3bd5a948ca8a48","modified":1611651485548},{"_id":"themes/hexo-theme-matery/.git/packed-refs","hash":"5d93f2f4b86275105addd6f651a08f5ecfdd7be1","modified":1611651485459},{"_id":"themes/hexo-theme-matery/languages/default.yml","hash":"54ccc01b097c5bf6820f0edfcece1a87b78ab32d","modified":1611651485467},{"_id":"themes/hexo-theme-matery/languages/zh-CN.yml","hash":"a957b05f70265a86a87d922e18488571809d2472","modified":1611651485467},{"_id":"themes/hexo-theme-matery/languages/zh-HK.yml","hash":"ae34ac0e175c3037675722e436637efbceea32f0","modified":1611651485467},{"_id":"themes/hexo-theme-matery/layout/404.ejs","hash":"9c8ca67377211e5d60fdde272a975faa9a91a22a","modified":1611651485467},{"_id":"themes/hexo-theme-matery/layout/about.ejs","hash":"99a74316aed478efb0db823c4460ee2e660f101c","modified":1611651485471},{"_id":"themes/hexo-theme-matery/layout/archive.ejs","hash":"cdac701de8370f9f3794a0eed4165983993a1ca7","modified":1611651485471},{"_id":"themes/hexo-theme-matery/layout/bb.ejs","hash":"21959d702f17a3d98b716daf44c8b5eecd59c7c5","modified":1611651485472},{"_id":"themes/hexo-theme-matery/layout/categories.ejs","hash":"8e54665cc25d7c333da7d9f312987190be6215da","modified":1611651485472},{"_id":"themes/hexo-theme-matery/layout/category.ejs","hash":"00019bca11fb46477f22017cb1f5ad8444da0580","modified":1611651485472},{"_id":"themes/hexo-theme-matery/layout/contact.ejs","hash":"cff60f87f69155707f3a33731c7fac945cf7cd93","modified":1611651485472},{"_id":"themes/hexo-theme-matery/layout/friends.ejs","hash":"51e5369ec6b017cc702a8d957fc052c59dd4c3d7","modified":1611651485472},{"_id":"themes/hexo-theme-matery/layout/index.ejs","hash":"4dc6f08e7709cc04e886be72dbf0d06469f0effc","modified":1611651485472},{"_id":"themes/hexo-theme-matery/layout/layout.ejs","hash":"4bfb9e946a90724fc8a902efe404c7b20549a38c","modified":1611651485472},{"_id":"themes/hexo-theme-matery/layout/post.ejs","hash":"90b5a4c1f70e4756db569c15a7c6cad0c77c4500","modified":1611651485472},{"_id":"themes/hexo-theme-matery/layout/tag.ejs","hash":"85a4b05bd8a6ad0f17ff2e97dae56949b379c204","modified":1611651485472},{"_id":"themes/hexo-theme-matery/layout/tags.ejs","hash":"cf9517aa6a0111355121f44615d6923e312283c7","modified":1611651485472},{"_id":"themes/hexo-theme-matery/source/favicon.png","hash":"774fee8c6d0be9dbb010b20f36c06848d06e3da0","modified":1611651485473},{"_id":"source/_posts/dashboard/dashboard.md","hash":"b2cbc23d661764cd593ca970965e8a6e82e06cd7","modified":1611655436636},{"_id":"source/_posts/druid/druid_book_read.md","hash":"7642a7d46e2841629918791ca92cb27b4b1017cc","modified":1611655436636},{"_id":"source/_posts/file/file.md","hash":"aa9850bd2304194098e6020a455823ed3f336013","modified":1611655436636},{"_id":"source/_posts/kafka/delete_topic.md","hash":"11d895d35b0b354b5dfde260df3be129672c07aa","modified":1611655436637},{"_id":"source/_posts/kafka/operate.md","hash":"e8dfcd333b432b7f7ffa117d9ff19eae2123170d","modified":1611655436637},{"_id":"source/_posts/linux/file.md","hash":"a88cea785556d7b7321117fe1c4da487efa58632","modified":1611655436637},{"_id":"source/_posts/linux/python_install.md","hash":"585e0f6f567fe4cfa0e70a558a9a2cddcc44e3c4","modified":1611655436637},{"_id":"source/_posts/ps/ps.md","hash":"a3c70e7f14b9b11d71fe314fd6e19c6f1f89d7a0","modified":1611655436639},{"_id":"source/_posts/vue/mvc.md","hash":"6e4f3661488eca9500bd8ce6744a484d5c7ba81b","modified":1611655436639},{"_id":"source/_posts/vue/vue_install.md","hash":"6c8d2678ad1f413d8d01c08e5e076497d5e4854f","modified":1611655436639},{"_id":"source/_posts/vue/vue_webpack.md","hash":"41c72b9bb4e2e5e95e439949c83ef18697c01aad","modified":1611655436639},{"_id":"themes/hexo-theme-matery/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1611651447768},{"_id":"themes/hexo-theme-matery/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1611651447779},{"_id":"themes/hexo-theme-matery/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1611651447849},{"_id":"themes/hexo-theme-matery/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1611651447793},{"_id":"themes/hexo-theme-matery/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1611651447806},{"_id":"themes/hexo-theme-matery/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1611651447823},{"_id":"themes/hexo-theme-matery/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1611651447824},{"_id":"themes/hexo-theme-matery/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1611651447849},{"_id":"themes/hexo-theme-matery/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1611651447825},{"_id":"themes/hexo-theme-matery/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1611651447850},{"_id":"themes/hexo-theme-matery/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1611651447826},{"_id":"themes/hexo-theme-matery/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1611651447855},{"_id":"themes/hexo-theme-matery/.git/logs/HEAD","hash":"9021f11c2146b401fbd3af429154b050cfe26cc7","modified":1611651485460},{"_id":"themes/hexo-theme-matery/layout/_partial/back-top.ejs","hash":"47ee36a042bb6d52bbe1d0f329637e8ffcf1d0aa","modified":1611651485467},{"_id":"themes/hexo-theme-matery/layout/_partial/background.ejs","hash":"aef6edeeb11209831a11d8c7f5d59992e2573335","modified":1611651485467},{"_id":"themes/hexo-theme-matery/layout/_partial/baidu-analytics.ejs","hash":"3bbcdb474ca1dcad514bdc4b7763e17c55df04fd","modified":1611651485467},{"_id":"themes/hexo-theme-matery/layout/_partial/baidu-push.ejs","hash":"2cebcc5ea3614d7f76ec36670e68050cbe611202","modified":1611651485467},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-cover-content.ejs","hash":"c35e4254ff0738878f65251a657b4fdcafc4b270","modified":1611651485468},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-cover.ejs","hash":"02191109712f61c0e487b8f0b8466597181a9004","modified":1611651485468},{"_id":"themes/hexo-theme-matery/layout/_partial/changyan.ejs","hash":"cd919d31564e118c2ee8d5cbfb7d51ee6da15d82","modified":1611651485468},{"_id":"themes/hexo-theme-matery/layout/_partial/disqus.ejs","hash":"b2dc2c8b5ed56815e55cc2ea54a6dc4eeba2375d","modified":1611651485468},{"_id":"themes/hexo-theme-matery/layout/_partial/footer.ejs","hash":"3be24e4c370671eda53bdfd99fb748f4a22948ba","modified":1611651485468},{"_id":"themes/hexo-theme-matery/layout/_partial/gitalk.ejs","hash":"2aa8fbb04b046fa7679092a48372d7e036835dff","modified":1611651485468},{"_id":"themes/hexo-theme-matery/layout/_partial/github-link.ejs","hash":"3aeb581bd78ab8e15b858e4c44c03bcf92f20b9e","modified":1611651485468},{"_id":"themes/hexo-theme-matery/layout/_partial/gitment.ejs","hash":"90f6218512ef2eab63ada7ad2fc766ae635a2297","modified":1611651485468},{"_id":"themes/hexo-theme-matery/layout/_partial/google-analytics.ejs","hash":"5f4992205617da5f8cc5863c62b5ec46e414e2fb","modified":1611651485468},{"_id":"themes/hexo-theme-matery/layout/_partial/head.ejs","hash":"f8438ac80df005934a330b029de292d26f0b6ecb","modified":1611651485468},{"_id":"themes/hexo-theme-matery/layout/_partial/header.ejs","hash":"59e38c70f3d8e7165e686e5e84a627835f4321b0","modified":1611651485468},{"_id":"themes/hexo-theme-matery/layout/_partial/index-cover.ejs","hash":"85f0ef1c390694a1661e77f44a3ed76555099385","modified":1611651485468},{"_id":"themes/hexo-theme-matery/layout/_partial/livere.ejs","hash":"9c3401b42ea7f26410a5593bae93ada7e57b43be","modified":1611651485469},{"_id":"themes/hexo-theme-matery/layout/_partial/minivaline.ejs","hash":"738b83cd90fe1b26971d803fc89c56193323da1e","modified":1611651485469},{"_id":"themes/hexo-theme-matery/layout/_partial/mobile-nav.ejs","hash":"cb0cb452be1cd1857ba600f04025b506f3b6fc79","modified":1611651485469},{"_id":"themes/hexo-theme-matery/layout/_partial/navigation.ejs","hash":"78b70ff24b3039c871331ebec114b936c1756cc8","modified":1611651485469},{"_id":"themes/hexo-theme-matery/layout/_partial/paging.ejs","hash":"e2df12cf92a82b1a7a7add2eac1db1d954bc5511","modified":1611651485469},{"_id":"themes/hexo-theme-matery/layout/_partial/post-cover.ejs","hash":"d1c873c5de54498c722e155aadb8c0ec39485dfa","modified":1611651485469},{"_id":"themes/hexo-theme-matery/layout/_partial/post-detail-toc.ejs","hash":"3ff94aff01936242a9f4e1f31adb9b43bfab8d53","modified":1611651485469},{"_id":"themes/hexo-theme-matery/layout/_partial/post-detail.ejs","hash":"7933979c2092654a9c1038ff30495505d7d88f2d","modified":1611651485469},{"_id":"themes/hexo-theme-matery/layout/_partial/post-statis.ejs","hash":"04889f9031743c6b081d02fa4027b0dbfcc45ecf","modified":1611651485469},{"_id":"themes/hexo-theme-matery/layout/_partial/prev-next.ejs","hash":"c76b78782ea82340104fccc089417572e0adece4","modified":1611651485469},{"_id":"themes/hexo-theme-matery/layout/_partial/reprint-statement.ejs","hash":"0ce3f9361f558b99cc2f059c5e50b0e2a152ae38","modified":1611651485470},{"_id":"themes/hexo-theme-matery/layout/_partial/reward.ejs","hash":"ffc55bc7e73bc698bfc58d8e3780c336b83282cf","modified":1611651485470},{"_id":"themes/hexo-theme-matery/layout/_partial/search.ejs","hash":"150529c9fb9aa8ddb42ec3e02645d301faa2503b","modified":1611651485470},{"_id":"themes/hexo-theme-matery/layout/_partial/share.ejs","hash":"c941730a2471d6aab367cbb6e09ed08b56c83143","modified":1611651485470},{"_id":"themes/hexo-theme-matery/layout/_partial/social-link.ejs","hash":"6f871bd3a70f720e4e451f1f4f625cbc6d8994a4","modified":1611651485470},{"_id":"themes/hexo-theme-matery/layout/_partial/twikoo.ejs","hash":"f9cb8c82b9d2a7cdb644e10718f1cdeb9400414c","modified":1611651485470},{"_id":"themes/hexo-theme-matery/layout/_partial/valine.ejs","hash":"0e4c0a6154aa34007849928ca88f05b6185b256e","modified":1611651485470},{"_id":"themes/hexo-theme-matery/layout/_widget/artitalk.ejs","hash":"b14e486f12b9ac42a273b80e4d785fcb94cf04b2","modified":1611651485470},{"_id":"themes/hexo-theme-matery/layout/_widget/category-cloud.ejs","hash":"1b3df1009234c0112424b497b18b4ad8240b3bc7","modified":1611651485470},{"_id":"themes/hexo-theme-matery/layout/_widget/category-radar.ejs","hash":"1d8747fda89a0b2ca3c7008867cbfeecad0578a6","modified":1611651485470},{"_id":"themes/hexo-theme-matery/layout/_widget/dream.ejs","hash":"9a472ad5591100cdb65d0df9d01034163bd6dd9d","modified":1611651485470},{"_id":"themes/hexo-theme-matery/layout/_widget/music.ejs","hash":"e9e3e327d5de9d7aeadbde32e1d558652d9e9195","modified":1611651485470},{"_id":"themes/hexo-theme-matery/layout/_widget/my-gallery.ejs","hash":"65a2d2f9722f84c7fd98f6bdf79087a14848ebd8","modified":1611651485471},{"_id":"themes/hexo-theme-matery/layout/_widget/my-projects.ejs","hash":"ef60b64021fa349b0048425d858dfcf6c906fede","modified":1611651485471},{"_id":"themes/hexo-theme-matery/layout/_widget/my-skills.ejs","hash":"89a0092df72d23093128f2fbbdc8ca7f83ebcfd9","modified":1611651485471},{"_id":"themes/hexo-theme-matery/layout/_widget/post-calendar.ejs","hash":"48821e644bc73553d7c5c56d2e8ee111a70cd776","modified":1611651485471},{"_id":"themes/hexo-theme-matery/layout/_widget/post-charts.ejs","hash":"ab5f986f428215941aeaa0c88aefd440c47d3bcf","modified":1611651485471},{"_id":"themes/hexo-theme-matery/layout/_widget/recommend.ejs","hash":"8551137e94ca4e2e3b8b63d5626255884cb60cb5","modified":1611651485471},{"_id":"themes/hexo-theme-matery/layout/_widget/tag-cloud.ejs","hash":"fc42b72cddc231f7485cdc1fd6852b66be6add26","modified":1611651485471},{"_id":"themes/hexo-theme-matery/layout/_widget/tag-wordcloud.ejs","hash":"487aacb2454d6bf0d21cdb07ddd1fd5ddbca9038","modified":1611651485471},{"_id":"themes/hexo-theme-matery/layout/_widget/video.ejs","hash":"a0e002377af2a7f7e4da6d9a644de97adb035925","modified":1611651485471},{"_id":"themes/hexo-theme-matery/source/css/bb.css","hash":"aa15633888c7cf9baea8bb48d796c68b57cf14bf","modified":1611651485472},{"_id":"themes/hexo-theme-matery/source/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1611651485473},{"_id":"themes/hexo-theme-matery/source/css/matery.css","hash":"a630f6e8643904073dce9eada57b5c16c4dba5e2","modified":1611651485473},{"_id":"themes/hexo-theme-matery/source/css/my-gitalk.css","hash":"af18dd29e58642c18bab9b89541767b494c468dd","modified":1611651485473},{"_id":"themes/hexo-theme-matery/source/css/my.css","hash":"497e50351f7838f8546cac76850a42e7e380a110","modified":1611651485473},{"_id":"themes/hexo-theme-matery/source/js/matery.js","hash":"b86de5fe3e9766b7ff80df12ea41c3a9e30825f7","modified":1611651485473},{"_id":"themes/hexo-theme-matery/source/js/search.js","hash":"e1482406c58ea2a0eb178d7e4efb2c879cdddc80","modified":1611651485473},{"_id":"themes/hexo-theme-matery/source/medias/avatar.jpg","hash":"2a6287308628881ce27b9a7de53ba15c2be00d02","modified":1611651485526},{"_id":"themes/hexo-theme-matery/source/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1611651485534},{"_id":"themes/hexo-theme-matery/source/medias/icp.png","hash":"27a96f31f7d0413c6ade6f40e06f021f501151c7","modified":1611651485547},{"_id":"themes/hexo-theme-matery/source/medias/logo.png","hash":"d9095f5ea8719374d9d1ff020279426f5b2a1396","modified":1611651485547},{"_id":"themes/hexo-theme-matery/.git/refs/heads/develop","hash":"2a3a12f7e4bfc92b0c9bb567314729d36e1139fc","modified":1611651485460},{"_id":"themes/hexo-theme-matery/source/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1611651485474},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1611651485474},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1611651485474},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1611651485474},{"_id":"themes/hexo-theme-matery/source/libs/background/canvas-nest.js","hash":"65333d0dbb9c1173a1b13031b230161fc42c8b2f","modified":1611651485500},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-dynamic.js","hash":"052b80c29e6bc585aa28d4504b743bdbac220a88","modified":1611651485500},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1611651485500},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1611651485500},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeBlockFuction.js","hash":"c7ab06d27a525b15b1eb69027135269e9b9132fb","modified":1611651485500},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeCopy.js","hash":"6d39a766af62e625f177c4d5cf3adc35eed71e61","modified":1611651485501},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeLang.js","hash":"bac88b4d4e3679732d29bd037c34f089cf27cf05","modified":1611651485501},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeShrink.js","hash":"201e8cd761b4be557247bdaf1ebc7c11c83194f6","modified":1611651485501},{"_id":"themes/hexo-theme-matery/source/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1611651485501},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1611651485501},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.css","hash":"940ded3ea12c2fe1ab0820d2831ec405f3f1fe9f","modified":1611651485509},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1611651485512},{"_id":"themes/hexo-theme-matery/source/libs/instantpage/instantpage.js","hash":"83ce8919b1a69b2f1809ffaf99b52a8627e650e9","modified":1611651485513},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1611651485513},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1611651485513},{"_id":"themes/hexo-theme-matery/source/libs/masonry/masonry.pkgd.min.js","hash":"ff940b4ea68368ca0e4d5560cbb79fb147dfc3c5","modified":1611651485515},{"_id":"themes/hexo-theme-matery/source/libs/minivaline/MiniValine.js","hash":"f7f6cdc1b22297e02334e304444e9a8351acb455","modified":1611651485517},{"_id":"themes/hexo-theme-matery/source/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1611651485518},{"_id":"themes/hexo-theme-matery/source/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1611651485518},{"_id":"themes/hexo-theme-matery/source/libs/prism/prism.css","hash":"62e5474893dece076534352f564ceabd6e088a5a","modified":1611651485518},{"_id":"themes/hexo-theme-matery/source/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1611651485518},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.css","hash":"9ab8ef576c9a57115194152e79cca79b0a41dd70","modified":1611651485520},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1611651485520},{"_id":"themes/hexo-theme-matery/source/libs/twikoo/twikoo.all.min.js.LICENSE.txt","hash":"1e286a31ef472fb864fe2b9502e87df9242df56b","modified":1611651485524},{"_id":"themes/hexo-theme-matery/source/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1611651485535},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/16.jpg","hash":"97a829c4bc94f9d2929b20a1a9b798c57b9f7205","modified":1611651485539},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/2.jpg","hash":"4bba691cf71a517ecaeaf42afd3e8f8b31e346c1","modified":1611651485542},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/21.jpg","hash":"b26edb128bb0bf58b23fd2f014e9555e89a2ca3b","modified":1611651485543},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/22.jpg","hash":"754579747a3e99747d890fca3162f370b96a7941","modified":1611651485543},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/23.jpg","hash":"7d7f37da3fa7128343adac23866449eb2c6a549a","modified":1611651485543},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/3.jpg","hash":"6ec646c2a70f5f11edacf225c1477f2200a37a96","modified":1611651485544},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/5.jpg","hash":"41ca20129a37fedc573eec28dd7d7b9e5b09228a","modified":1611651485545},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/7.jpg","hash":"7975141cd64e875122c0ea33daaca1a06bf00b8e","modified":1611651485546},{"_id":"themes/hexo-theme-matery/source/medias/reward/alipay.jpg","hash":"1abc719b95d1b26f1f898e6b0a9b7609146e332f","modified":1611651485547},{"_id":"themes/hexo-theme-matery/source/medias/reward/wechat.png","hash":"fe93385aa92fe328e01c8221a80b039be9e4e140","modified":1611651485548},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1611651485475},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.js","hash":"c3bad7b265574fab0ae4d45867422ea1cb9d6599","modified":1611651485502},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1611651485513},{"_id":"themes/hexo-theme-matery/source/libs/jquery/jquery.min.js","hash":"2115753ca5fb7032aec498db7bb5dca624dbe6be","modified":1611651485513},{"_id":"themes/hexo-theme-matery/source/libs/valine/Valine.min.js","hash":"6cbdbf91e1f046dd41267a5ff0691a1fccba99df","modified":1611651485525},{"_id":"themes/hexo-theme-matery/source/medias/banner/0.jpg","hash":"69ec96cd9b4bc3aa631adc9da61353f50c39f031","modified":1611651485527},{"_id":"themes/hexo-theme-matery/source/medias/banner/2.jpg","hash":"39fb2535460ce66cc0b34e07ffb9411db1405f09","modified":1611651485529},{"_id":"themes/hexo-theme-matery/source/medias/banner/3.jpg","hash":"4ac047e92d0363b1a61ab756aca6dac13fb77494","modified":1611651485530},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/0.jpg","hash":"1c3300f029fc85d6dda6fa4f1d699551034cdaf7","modified":1611651485535},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/1.jpg","hash":"684ae89de8cb7acefae19f5aee6c612037c46393","modified":1611651485536},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/10.jpg","hash":"98e7f6fd9c97d4de9044b6871ca08ebf14db11b9","modified":1611651485536},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/11.jpg","hash":"f55972ce7175684f2b11c3c9fc2b5b14bccbfae8","modified":1611651485537},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/12.jpg","hash":"8a4b2e7d92ae95c3b0c921db23c35aa9a41a7d58","modified":1611651485538},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/13.jpg","hash":"35a320174f8e316e3eadaec658024276b651c6e9","modified":1611651485538},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/15.jpg","hash":"da0fbee3b7bde1607eace377ddf834c0be99edfe","modified":1611651485539},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/17.jpg","hash":"42d47903551ee81885c1386022982cae165841c5","modified":1611651485540},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/19.jpg","hash":"eb250906fdbc0c408f42ae9933725bc1a05d79fb","modified":1611651485542},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/18.jpg","hash":"64829272ec85bb819d55ff89e5b5fd6f64aa436b","modified":1611651485540},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/20.jpg","hash":"3b11f9b461168d907073f793190865fe621a8573","modified":1611651485542},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/4.jpg","hash":"e06c47de27619984be9d5d02947f8370a432dfea","modified":1611651485544},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/6.jpg","hash":"c8f2aa4bbb041158b4e73733a341e6a77c8583f7","modified":1611651485545},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/8.jpg","hash":"8e4b7186352085483ca1174c7c0800114c48df8b","modified":1611651485546},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/9.jpg","hash":"b956a2291a04b2132366b53666cf34858b8bdb1f","modified":1611651485547},{"_id":"themes/hexo-theme-matery/.git/objects/pack/pack-879a491a70c5f71de9deeb32190624e3134cab74.idx","hash":"1bc4c29a3417cfdd7b3e5046227105137f19be89","modified":1611651484924},{"_id":"themes/hexo-theme-matery/.git/logs/refs/heads/develop","hash":"9021f11c2146b401fbd3af429154b050cfe26cc7","modified":1611651485460},{"_id":"themes/hexo-theme-matery/.git/refs/remotes/origin/HEAD","hash":"cb587ac979c5a12ea2fad8ca5af781961c1b0668","modified":1611651485459},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.eot","hash":"439c8afd3373acb4a73135a34e220464a89cd5e2","modified":1611651485486},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.ttf","hash":"0f4bd02942a54a6b3200d9078adff88c2812e751","modified":1611651485488},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff","hash":"59439d3ad31d856d78ec3e2bd9f1eafa2c7a581c","modified":1611651485488},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff2","hash":"f6f653b4ea8fc487bdb590d39d5a726258a55f40","modified":1611651485488},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.min.js","hash":"8fefe38f28804f90116bdcb74a0875c9de9f3b7d","modified":1611651485512},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1611651485513},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1611651485513},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.svg","hash":"9c6632aeec67d3e84a1434884aa801514ff8103b","modified":1611651485513},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1611651485513},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1611651485515},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1611651485515},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/video-play.png","hash":"2962e03ddbe04d7e201a5acccac531a2bbccddfc","modified":1611651485515},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/vimeo-play.png","hash":"9b72fc0f86a01467ed0b68c9cc4d604ec316d517","modified":1611651485515},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/youtube-play.png","hash":"f8d11384d33b7a79ee2ba8d522844f14d5067a80","modified":1611651485515},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/js/lightgallery-all.min.js","hash":"9f5ef4bc8a0a3c746ca4f3c3e6d64493b1a977d8","modified":1611651485515},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.css","hash":"a69d456e3345e7f59cd0d47d1b3e70fd4a496a05","modified":1611651485516},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.js","hash":"c8b4c65651921d888cf5f27430dfe2ad190d35bf","modified":1611651485517},{"_id":"themes/hexo-theme-matery/source/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1611651485518},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1611651485518},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.svg","hash":"1d56c9d5db0273f07c43cc1397e440f98ba7827a","modified":1611651485518},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1611651485519},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1611651485519},{"_id":"themes/hexo-theme-matery/source/libs/share/js/jquery.share.min.js","hash":"41367dcb857e02e3c417ebe68a554ce1d4430806","modified":1611651485519},{"_id":"themes/hexo-theme-matery/source/libs/share/js/social-share.min.js","hash":"a3090a02786dcd4efc6355c1c1dc978add8d6827","modified":1611651485519},{"_id":"themes/hexo-theme-matery/source/libs/valine/av-min.js","hash":"541efb9edc1ce425cbe3897cfc25803211fe6a05","modified":1611651485526},{"_id":"themes/hexo-theme-matery/source/medias/banner/1.jpg","hash":"ab122a36998a4f62a61e61a4fc5e00248113413b","modified":1611651485528},{"_id":"themes/hexo-theme-matery/source/medias/banner/5.jpg","hash":"852418f4f09e796e12bc3bab7a1488d3f37d6486","modified":1611651485533},{"_id":"themes/hexo-theme-matery/source/medias/banner/6.jpg","hash":"ed7282cc129c4ff9f322d2f2897fb4aac5c48589","modified":1611651485534},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/14.jpg","hash":"38e11221406785bcd93aa9cd23e568e164630ef1","modified":1611651485539},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff2","hash":"a46bd47ff0a90b812aafafda587d095cdb844271","modified":1611651485486},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff","hash":"92803b8753ceda573c6906774677c5a7081d2fbb","modified":1611651485500},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff2","hash":"9c081b88b106c6c04ecb895ba7ba7d3dcb3b55ac","modified":1611651485500},{"_id":"themes/hexo-theme-matery/.git/logs/refs/remotes/origin/HEAD","hash":"9021f11c2146b401fbd3af429154b050cfe26cc7","modified":1611651485459},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.css","hash":"ecc41e32ad2696877a1656749841f3b5543bbe3d","modified":1611651485475},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff","hash":"18838f5260317da3c5ed29bf844ac8a4f7ad0529","modified":1611651485486},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.eot","hash":"22f9e7d5226408eb2d0a11e118257a3ca22b8670","modified":1611651485477},{"_id":"themes/hexo-theme-matery/source/medias/banner/4.jpg","hash":"e5ac5033678afa9d69edffe9a61004f836cb5734","modified":1611651485532},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.svg","hash":"3d3a49445343d80f3b553e3e3425b9a7bd49acaf","modified":1611651485487},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.eot","hash":"cab8e84ae5682d1d556e234df9c790985888def8","modified":1611651485490},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.ttf","hash":"91cbeeaceb644a971241c08362898599d6d968ce","modified":1611651485485},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.ttf","hash":"9521ed12274c2cbc910cea77657116fcf6545da3","modified":1611651485499},{"_id":"themes/hexo-theme-matery/source/libs/twikoo/twikoo.all.min.js","hash":"c3f5f0a69b7864e7ef5bbf99fc774bec37947d7c","modified":1611651485524},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.svg","hash":"5e2d2a159294576bea69cc3360efb5ffe110ab2d","modified":1611651485484},{"_id":"themes/hexo-theme-matery/source/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1611651485509},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.svg","hash":"7da88b19e1486f8c968d3cf5ab3f194f01ea17fd","modified":1611651485497},{"_id":"themes/hexo-theme-matery/.git/objects/pack/pack-879a491a70c5f71de9deeb32190624e3134cab74.pack","hash":"72fffa1a8ba3d6c2ef2ddaea913d47e3c1db9f51","modified":1611651484921}],"Category":[{"name":"hexo","_id":"ckkdu2m6l000ay74t4py7r9b1"},{"name":"Dashboard","_id":"ckkdu2ma0000oy74trt4zsnj6"},{"name":"File","_id":"ckkdu2ma5000ty74t9olsgdss"},{"name":"druid","_id":"ckkdu2mab000zy74tevj07ujk"},{"name":"Linux","_id":"ckkdu2maf0016y74t0ajzbjxz"},{"name":"python,linux","_id":"ckkdu2maj001by74t03ydhmm4"},{"name":"Photoshop","_id":"ckkdu2mal001ey74t4dzn2bfy"}],"Data":[],"Page":[{"_content":"<!DOCTYPE html>\n<html lang=\"zh-CN\">\n<head>\n\n    <!--[if lt IE 9]>\n        <style>body {display: none; background: none !important} </style>\n        <meta http-equiv=\"Refresh\" Content=\"0; url=//outdatedbrowser.com/\" />\n    <![endif]-->\n\n<meta charset=\"utf-8\">\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge, chrome=1\" />\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no\">\n<meta name=\"format-detection\" content=\"telephone=no\" />\n\n<title>MiaoMiao</title>\n\n\n\n</head>\n<body>\n\n  <h1>ni shuo sha</h1>\n  \n  \n</body>\n</html>","source":"test.html","raw":"<!DOCTYPE html>\n<html lang=\"zh-CN\">\n<head>\n\n    <!--[if lt IE 9]>\n        <style>body {display: none; background: none !important} </style>\n        <meta http-equiv=\"Refresh\" Content=\"0; url=//outdatedbrowser.com/\" />\n    <![endif]-->\n\n<meta charset=\"utf-8\">\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge, chrome=1\" />\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no\">\n<meta name=\"format-detection\" content=\"telephone=no\" />\n\n<title>MiaoMiao</title>\n\n\n\n</head>\n<body>\n\n  <h1>ni shuo sha</h1>\n  \n  \n</body>\n</html>","date":"2021-01-26T10:03:56.639Z","updated":"2021-01-26T10:03:56.639Z","path":"test.html","title":"","comments":1,"layout":"page","_id":"ckkdu2m2c0000y74t3hoqdb36","content":"<!DOCTYPE html>\n<html lang=\"zh-CN\">\n<head>\n\n    <!--[if lt IE 9]>\n        <style>body {display: none; background: none !important} </style>\n        <meta http-equiv=\"Refresh\" Content=\"0; url=//outdatedbrowser.com/\" />\n    <![endif]-->\n\n<meta charset=\"utf-8\">\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge, chrome=1\">\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no\">\n<meta name=\"format-detection\" content=\"telephone=no\">\n\n<title>MiaoMiao</title>\n\n\n\n</head>\n<body>\n\n  <h1>ni shuo sha</h1>\n  \n  \n</body>\n</html>","site":{"data":{}},"excerpt":"","more":"<!DOCTYPE html>\n<html lang=\"zh-CN\">\n<head>\n\n    <!--[if lt IE 9]>\n        <style>body {display: none; background: none !important} </style>\n        <meta http-equiv=\"Refresh\" Content=\"0; url=//outdatedbrowser.com/\" />\n    <![endif]-->\n\n<meta charset=\"utf-8\">\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge, chrome=1\" />\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no\">\n<meta name=\"format-detection\" content=\"telephone=no\" />\n\n<title>MiaoMiao</title>\n\n\n\n</head>\n<body>\n\n  <h1>ni shuo sha</h1>\n  \n  \n</body>\n</html>"},{"title":"about","date":"2017-04-26T04:13:29.000Z","_content":"\n天书，你看的懂吗？？\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2017-04-26 12:13:29\n---\n\n天书，你看的懂吗？？\n","updated":"2021-01-26T10:03:56.639Z","path":"about/index.html","comments":1,"layout":"page","_id":"ckkdu2m650002y74t3ne68cxs","content":"<p>天书，你看的懂吗？？</p>\n","site":{"data":{}},"excerpt":"","more":"<p>天书，你看的懂吗？？</p>\n"},{"title":"tags","date":"2017-04-26T04:13:46.000Z","type":"tags","comment":false,"_content":"\n","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2017-04-26 12:13:46\ntype: \"tags\"\ncomment: false\n---\n\n","updated":"2021-01-26T10:03:56.639Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ckkdu2m6a0004y74t5emxoer5","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"hexo+github搭建博客步骤","_content":"\n一时兴起，想搭建一个自己的博客，就动手搭建了一个，这里做一个记录，记录下自己踩得坑，以免自己以后忘记\n\n## 整个搭建流程总览\n\n``` \n创建自己的github账号\n创建username.github.io的项目\n创建本地hexo项目\n将本地hexo项目发布到github\n```\n+ <!-- more -->\n## 具体操作流程\n\n\n### 创建github账号\n\n``` bash\n到https://github.com/注册自己的github账号\n```\n### 在github中，创建一个仓库，命名为username.github.io (例：miaomiao.github.io)\n\n``` bash\n特别说明：如果出现本地hexo服务正常，但是github上的博客项目不能访问，我这里遇到的情况是username没有使用自己github的账号，对项目重命名，就可以了。\n```\n\n### 本地hexo项目创建\n\n``` bash\nnpm install -g hexo-cli (安装hexo)\nnpm install \nhexo init (初始化hexo 项目)\nhexo generate (or hexo g) （生成静态文件）\nhexo deploy (or hexo d) (发布本地项目到github)\n```\n\n参考: http://crazymilk.github.io/2015/12/28/GitHub-Pages-Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/#more\n\n\n## hexo 的yelee主题添加‘置顶文章置顶’方法\n修改node_modules\\hexo-generator-index\\lib\\generator.js 中代码，如下：\n![GitHub Logo](/img/hello/01.jpg)\n\n```\n//文章置顶方法添加\n'use strict';\nvar pagination = require('hexo-pagination');\nmodule.exports = function(locals){\nvar config = this.config;\nvar posts = locals.posts;\nposts.data = posts.data.sort(function(a, b) {\n    if(a.top && b.top) { // 两篇文章top都有定义\n        if(a.top == b.top) return b.date - a.date; // 若top值一样则按照文章日期降序排\n        else return b.top - a.top; // 否则按照top值降序排\n    }\n    else if(a.top && !b.top) { // 以下是只有一篇文章top有定义，那么将有top的排在前面（这里用异或操作居然不行233）\n        return -1;\n    }\n    else if(!a.top && b.top) {\n        return 1;\n    }\n    else return b.date - a.date; // 都没定义按照文章日期降序排\n});\n  var paginationDir = config.pagination_dir || 'page';\n  return pagination('', posts, {\n    perPage: config.index_generator.per_page,\n    layout: ['index', 'archive'],\n    format: paginationDir + '/%d/',\n    data: {\n      __index: true\n    }\n  });\n};\n```\n\n如果想要置顶某篇文章，就在文章的Front-matter位置，添加一个 top:1000 ,值越大，越靠前，如下图：\n![GitHub Logo](/img/hello/02.jpg)\n\n\n\n","source":"_posts/blog_create.md","raw":"---\ntitle: hexo+github搭建博客步骤\ntags:\n- hexo\n- github pages\n---\n\n一时兴起，想搭建一个自己的博客，就动手搭建了一个，这里做一个记录，记录下自己踩得坑，以免自己以后忘记\n\n## 整个搭建流程总览\n\n``` \n创建自己的github账号\n创建username.github.io的项目\n创建本地hexo项目\n将本地hexo项目发布到github\n```\n+ <!-- more -->\n## 具体操作流程\n\n\n### 创建github账号\n\n``` bash\n到https://github.com/注册自己的github账号\n```\n### 在github中，创建一个仓库，命名为username.github.io (例：miaomiao.github.io)\n\n``` bash\n特别说明：如果出现本地hexo服务正常，但是github上的博客项目不能访问，我这里遇到的情况是username没有使用自己github的账号，对项目重命名，就可以了。\n```\n\n### 本地hexo项目创建\n\n``` bash\nnpm install -g hexo-cli (安装hexo)\nnpm install \nhexo init (初始化hexo 项目)\nhexo generate (or hexo g) （生成静态文件）\nhexo deploy (or hexo d) (发布本地项目到github)\n```\n\n参考: http://crazymilk.github.io/2015/12/28/GitHub-Pages-Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/#more\n\n\n## hexo 的yelee主题添加‘置顶文章置顶’方法\n修改node_modules\\hexo-generator-index\\lib\\generator.js 中代码，如下：\n![GitHub Logo](/img/hello/01.jpg)\n\n```\n//文章置顶方法添加\n'use strict';\nvar pagination = require('hexo-pagination');\nmodule.exports = function(locals){\nvar config = this.config;\nvar posts = locals.posts;\nposts.data = posts.data.sort(function(a, b) {\n    if(a.top && b.top) { // 两篇文章top都有定义\n        if(a.top == b.top) return b.date - a.date; // 若top值一样则按照文章日期降序排\n        else return b.top - a.top; // 否则按照top值降序排\n    }\n    else if(a.top && !b.top) { // 以下是只有一篇文章top有定义，那么将有top的排在前面（这里用异或操作居然不行233）\n        return -1;\n    }\n    else if(!a.top && b.top) {\n        return 1;\n    }\n    else return b.date - a.date; // 都没定义按照文章日期降序排\n});\n  var paginationDir = config.pagination_dir || 'page';\n  return pagination('', posts, {\n    perPage: config.index_generator.per_page,\n    layout: ['index', 'archive'],\n    format: paginationDir + '/%d/',\n    data: {\n      __index: true\n    }\n  });\n};\n```\n\n如果想要置顶某篇文章，就在文章的Front-matter位置，添加一个 top:1000 ,值越大，越靠前，如下图：\n![GitHub Logo](/img/hello/02.jpg)\n\n\n\n","slug":"blog_create","published":1,"date":"2021-01-26T10:03:56.636Z","updated":"2021-01-26T10:03:56.636Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkdu2m5x0001y74tblb6imq9","content":"<p>一时兴起，想搭建一个自己的博客，就动手搭建了一个，这里做一个记录，记录下自己踩得坑，以免自己以后忘记</p>\n<h2 id=\"整个搭建流程总览\"><a href=\"#整个搭建流程总览\" class=\"headerlink\" title=\"整个搭建流程总览\"></a>整个搭建流程总览</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">创建自己的github账号</div><div class=\"line\">创建username.github.io的项目</div><div class=\"line\">创建本地hexo项目</div><div class=\"line\">将本地hexo项目发布到github</div></pre></td></tr></table></figure>\n<ul>\n<li><a id=\"more\"></a>\n<h2 id=\"具体操作流程\"><a href=\"#具体操作流程\" class=\"headerlink\" title=\"具体操作流程\"></a>具体操作流程</h2></li>\n</ul>\n<h3 id=\"创建github账号\"><a href=\"#创建github账号\" class=\"headerlink\" title=\"创建github账号\"></a>创建github账号</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">到https://github.com/注册自己的github账号</div></pre></td></tr></table></figure>\n<h3 id=\"在github中，创建一个仓库，命名为username-github-io-例：miaomiao-github-io\"><a href=\"#在github中，创建一个仓库，命名为username-github-io-例：miaomiao-github-io\" class=\"headerlink\" title=\"在github中，创建一个仓库，命名为username.github.io (例：miaomiao.github.io)\"></a>在github中，创建一个仓库，命名为username.github.io (例：miaomiao.github.io)</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">特别说明：如果出现本地hexo服务正常，但是github上的博客项目不能访问，我这里遇到的情况是username没有使用自己github的账号，对项目重命名，就可以了。</div></pre></td></tr></table></figure>\n<h3 id=\"本地hexo项目创建\"><a href=\"#本地hexo项目创建\" class=\"headerlink\" title=\"本地hexo项目创建\"></a>本地hexo项目创建</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install -g hexo-cli (安装hexo)</div><div class=\"line\">npm install </div><div class=\"line\">hexo init (初始化hexo 项目)</div><div class=\"line\">hexo generate (or hexo g) （生成静态文件）</div><div class=\"line\">hexo deploy (or hexo d) (发布本地项目到github)</div></pre></td></tr></table></figure>\n<p>参考: <a href=\"http://crazymilk.github.io/2015/12/28/GitHub-Pages-Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/#more\" target=\"_blank\" rel=\"external\">http://crazymilk.github.io/2015/12/28/GitHub-Pages-Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/#more</a></p>\n<h2 id=\"hexo-的yelee主题添加‘置顶文章置顶’方法\"><a href=\"#hexo-的yelee主题添加‘置顶文章置顶’方法\" class=\"headerlink\" title=\"hexo 的yelee主题添加‘置顶文章置顶’方法\"></a>hexo 的yelee主题添加‘置顶文章置顶’方法</h2><p>修改node_modules\\hexo-generator-index\\lib\\generator.js 中代码，如下：<br><img src=\"/img/hello/01.jpg\" alt=\"GitHub Logo\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">//文章置顶方法添加</div><div class=\"line\">&apos;use strict&apos;;</div><div class=\"line\">var pagination = require(&apos;hexo-pagination&apos;);</div><div class=\"line\">module.exports = function(locals)&#123;</div><div class=\"line\">var config = this.config;</div><div class=\"line\">var posts = locals.posts;</div><div class=\"line\">posts.data = posts.data.sort(function(a, b) &#123;</div><div class=\"line\">    if(a.top &amp;&amp; b.top) &#123; // 两篇文章top都有定义</div><div class=\"line\">        if(a.top == b.top) return b.date - a.date; // 若top值一样则按照文章日期降序排</div><div class=\"line\">        else return b.top - a.top; // 否则按照top值降序排</div><div class=\"line\">    &#125;</div><div class=\"line\">    else if(a.top &amp;&amp; !b.top) &#123; // 以下是只有一篇文章top有定义，那么将有top的排在前面（这里用异或操作居然不行233）</div><div class=\"line\">        return -1;</div><div class=\"line\">    &#125;</div><div class=\"line\">    else if(!a.top &amp;&amp; b.top) &#123;</div><div class=\"line\">        return 1;</div><div class=\"line\">    &#125;</div><div class=\"line\">    else return b.date - a.date; // 都没定义按照文章日期降序排</div><div class=\"line\">&#125;);</div><div class=\"line\">  var paginationDir = config.pagination_dir || &apos;page&apos;;</div><div class=\"line\">  return pagination(&apos;&apos;, posts, &#123;</div><div class=\"line\">    perPage: config.index_generator.per_page,</div><div class=\"line\">    layout: [&apos;index&apos;, &apos;archive&apos;],</div><div class=\"line\">    format: paginationDir + &apos;/%d/&apos;,</div><div class=\"line\">    data: &#123;</div><div class=\"line\">      __index: true</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>如果想要置顶某篇文章，就在文章的Front-matter位置，添加一个 top:1000 ,值越大，越靠前，如下图：<br><img src=\"/img/hello/02.jpg\" alt=\"GitHub Logo\"></p>\n","site":{"data":{}},"excerpt":"<p>一时兴起，想搭建一个自己的博客，就动手搭建了一个，这里做一个记录，记录下自己踩得坑，以免自己以后忘记</p>\n<h2 id=\"整个搭建流程总览\"><a href=\"#整个搭建流程总览\" class=\"headerlink\" title=\"整个搭建流程总览\"></a>整个搭建流程总览</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">创建自己的github账号</div><div class=\"line\">创建username.github.io的项目</div><div class=\"line\">创建本地hexo项目</div><div class=\"line\">将本地hexo项目发布到github</div></pre></td></tr></table></figure>\n<ul>\n<li>","more":"<h2 id=\"具体操作流程\"><a href=\"#具体操作流程\" class=\"headerlink\" title=\"具体操作流程\"></a>具体操作流程</h2></li>\n</ul>\n<h3 id=\"创建github账号\"><a href=\"#创建github账号\" class=\"headerlink\" title=\"创建github账号\"></a>创建github账号</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">到https://github.com/注册自己的github账号</div></pre></td></tr></table></figure>\n<h3 id=\"在github中，创建一个仓库，命名为username-github-io-例：miaomiao-github-io\"><a href=\"#在github中，创建一个仓库，命名为username-github-io-例：miaomiao-github-io\" class=\"headerlink\" title=\"在github中，创建一个仓库，命名为username.github.io (例：miaomiao.github.io)\"></a>在github中，创建一个仓库，命名为username.github.io (例：miaomiao.github.io)</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">特别说明：如果出现本地hexo服务正常，但是github上的博客项目不能访问，我这里遇到的情况是username没有使用自己github的账号，对项目重命名，就可以了。</div></pre></td></tr></table></figure>\n<h3 id=\"本地hexo项目创建\"><a href=\"#本地hexo项目创建\" class=\"headerlink\" title=\"本地hexo项目创建\"></a>本地hexo项目创建</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install -g hexo-cli (安装hexo)</div><div class=\"line\">npm install </div><div class=\"line\">hexo init (初始化hexo 项目)</div><div class=\"line\">hexo generate (or hexo g) （生成静态文件）</div><div class=\"line\">hexo deploy (or hexo d) (发布本地项目到github)</div></pre></td></tr></table></figure>\n<p>参考: <a href=\"http://crazymilk.github.io/2015/12/28/GitHub-Pages-Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/#more\">http://crazymilk.github.io/2015/12/28/GitHub-Pages-Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/#more</a></p>\n<h2 id=\"hexo-的yelee主题添加‘置顶文章置顶’方法\"><a href=\"#hexo-的yelee主题添加‘置顶文章置顶’方法\" class=\"headerlink\" title=\"hexo 的yelee主题添加‘置顶文章置顶’方法\"></a>hexo 的yelee主题添加‘置顶文章置顶’方法</h2><p>修改node_modules\\hexo-generator-index\\lib\\generator.js 中代码，如下：<br><img src=\"/img/hello/01.jpg\" alt=\"GitHub Logo\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">//文章置顶方法添加</div><div class=\"line\">&apos;use strict&apos;;</div><div class=\"line\">var pagination = require(&apos;hexo-pagination&apos;);</div><div class=\"line\">module.exports = function(locals)&#123;</div><div class=\"line\">var config = this.config;</div><div class=\"line\">var posts = locals.posts;</div><div class=\"line\">posts.data = posts.data.sort(function(a, b) &#123;</div><div class=\"line\">    if(a.top &amp;&amp; b.top) &#123; // 两篇文章top都有定义</div><div class=\"line\">        if(a.top == b.top) return b.date - a.date; // 若top值一样则按照文章日期降序排</div><div class=\"line\">        else return b.top - a.top; // 否则按照top值降序排</div><div class=\"line\">    &#125;</div><div class=\"line\">    else if(a.top &amp;&amp; !b.top) &#123; // 以下是只有一篇文章top有定义，那么将有top的排在前面（这里用异或操作居然不行233）</div><div class=\"line\">        return -1;</div><div class=\"line\">    &#125;</div><div class=\"line\">    else if(!a.top &amp;&amp; b.top) &#123;</div><div class=\"line\">        return 1;</div><div class=\"line\">    &#125;</div><div class=\"line\">    else return b.date - a.date; // 都没定义按照文章日期降序排</div><div class=\"line\">&#125;);</div><div class=\"line\">  var paginationDir = config.pagination_dir || &apos;page&apos;;</div><div class=\"line\">  return pagination(&apos;&apos;, posts, &#123;</div><div class=\"line\">    perPage: config.index_generator.per_page,</div><div class=\"line\">    layout: [&apos;index&apos;, &apos;archive&apos;],</div><div class=\"line\">    format: paginationDir + &apos;/%d/&apos;,</div><div class=\"line\">    data: &#123;</div><div class=\"line\">      __index: true</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>如果想要置顶某篇文章，就在文章的Front-matter位置，添加一个 top:1000 ,值越大，越靠前，如下图：<br><img src=\"/img/hello/02.jpg\" alt=\"GitHub Logo\"></p>"},{"title":"druid.io历史最详细单机搭建流程","_content":"\n  druid使用也有一年了，踩过的坑无数，现在虽然线上服务已经稳定，但是还是使用的小白，觉得还是有必要把搭建的流程记录下。\n  单机版的搭建流程十分简单，适合机器资源不是很充足，或者对druid使用方法测试阶段。其实步骤跟官网上介绍的流程一样的，实时加载使用druid+tranquility，离线数据加载使用druid的batch加载方式。用的很简单，有不足的地方，望指教。\n\n+ <!-- more -->\n  \n## 准备工作 \n\n``` bash\ndruid\ntranquility\nzookeeper\n```\n\n\n## druid集群启动\n\n### 准备机器（一台）\n\n```bash\nJava 8 或者更高版本\nLinux, Mac OS X, 或者其他 Unix-like OS (Windows不支持，可以使用虚拟机)\n8G内存\n2核cpu\n```\n\n### 下载druid\n```bash\ncurl -O http://static.druid.io/artifacts/releases/druid-0.10.0-bin.tar.gz\ntar -xzf druid-0.10.0-bin.tar.gz\ncd druid-0.10.0\n```\n\n### 启动zk（根据自己的习惯，将zk放在合适的地方）\n```\ncurl http://www.gtlib.gatech.edu/pub/apache/zookeeper/zookeeper-3.4.6/zookeeper-3.4.6.tar.gz -o zookeeper-3.4.6.tar.gz\ntar -xzf zookeeper-3.4.6.tar.gz\ncd zookeeper-3.4.6\ncp conf/zoo_sample.cfg conf/zoo.cfg\n./bin/zkServer.sh start\n```\n\n### 初始化一些文件夹（druid运行过程中，需要生成的文件存放的地方）\n```\n在druid文件的根目录下执行：bin/init\n```\n\n### druid单机版集群启动命令\n```\njava `cat conf-quickstart/druid/historical/jvm.config | xargs` -cp \"conf-quickstart/druid/_common:conf-quickstart/druid/historical:lib/*\" io.druid.cli.Main server historical\njava `cat conf-quickstart/druid/broker/jvm.config | xargs` -cp \"conf-quickstart/druid/_common:conf-quickstart/druid/broker:lib/*\" io.druid.cli.Main server broker\njava `cat conf-quickstart/druid/coordinator/jvm.config | xargs` -cp \"conf-quickstart/druid/_common:conf-quickstart/druid/coordinator:lib/*\" io.druid.cli.Main server coordinator\njava `cat conf-quickstart/druid/overlord/jvm.config | xargs` -cp \"conf-quickstart/druid/_common:conf-quickstart/druid/overlord:lib/*\" io.druid.cli.Main server overlord\njava `cat conf-quickstart/druid/middleManager/jvm.config | xargs` -cp \"conf-quickstart/druid/_common:conf-quickstart/druid/middleManager:lib/*\" io.druid.cli.Main server middleManager\n```\n\n以上，就是druid单机版的测试版本配置和启动的过程，其中，注意启动用户的权限，如果用户没有创建文件夹的权限，记得提高用户的权限。有了上述的工作，我们就有了一个单机版的druid测试集群，接下来我们要启动tranquility服务，用来接收实时数据流。\n\n\n## tranquility启动\n\n### 下载tranquility\n```\ncurl -O http://static.druid.io/tranquility/releases/tranquility-distribution-0.8.0.tgz\ntar -xzf tranquility-distribution-0.8.0.tgz\ncd tranquility-distribution-0.8.0\n```\n\n### 启动tranquility服务\n/conf-quickstart/tranquility/server.json 是实时流加载配置文件\n```\nbin/tranquility server -configFile <path_to_druid_distro>/conf-quickstart/tranquility/server.json\n```\n\n### 一个测试的实时流数据\n```\nbin/generate-example-metrics | curl -XPOST -H'Content-Type: application/json' --data-binary @- http://localhost:8200/v1/post/metrics\n```\n如果收到{\"result\":{\"received\":25,\"sent\":25}}的结果，证明成功了\n\n\n### 查询\n8082端口是druid集群的broker节点的接口,wikiticker-top-pages.json为查询命令文件。这里是用户以二进制文件的方式提交一个post请求\n```\ncurl -L -H'Content-Type: application/json' -XPOST --data-binary @quickstart/wikiticker-top-pages.json http://localhost:8082/druid/v2/?pretty\n```\n\n结束语：\n  以上，用实时的方式加载数据到druid的单机测试已经完成，这只是一个简单的练手，通过这个测试，我们可以对druid的加载方式有个简单的了解，druid集群，有5个节点，coordinater+overlord属于集群的master，起到控制的作用，middlemanager为task管理，historical为历史节点，也可以进行数据的查询，但是只能查询到已经做了落地的数据，实时数据不能查询到，broker为client的访问接口，通过这个节点，可以访问到实时数据和历史数据。\n\n\n友情链接：http://druid.io\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/druid_single_machine.md","raw":"---\ntitle: druid.io历史最详细单机搭建流程\ntags: druid.io\n---\n\n  druid使用也有一年了，踩过的坑无数，现在虽然线上服务已经稳定，但是还是使用的小白，觉得还是有必要把搭建的流程记录下。\n  单机版的搭建流程十分简单，适合机器资源不是很充足，或者对druid使用方法测试阶段。其实步骤跟官网上介绍的流程一样的，实时加载使用druid+tranquility，离线数据加载使用druid的batch加载方式。用的很简单，有不足的地方，望指教。\n\n+ <!-- more -->\n  \n## 准备工作 \n\n``` bash\ndruid\ntranquility\nzookeeper\n```\n\n\n## druid集群启动\n\n### 准备机器（一台）\n\n```bash\nJava 8 或者更高版本\nLinux, Mac OS X, 或者其他 Unix-like OS (Windows不支持，可以使用虚拟机)\n8G内存\n2核cpu\n```\n\n### 下载druid\n```bash\ncurl -O http://static.druid.io/artifacts/releases/druid-0.10.0-bin.tar.gz\ntar -xzf druid-0.10.0-bin.tar.gz\ncd druid-0.10.0\n```\n\n### 启动zk（根据自己的习惯，将zk放在合适的地方）\n```\ncurl http://www.gtlib.gatech.edu/pub/apache/zookeeper/zookeeper-3.4.6/zookeeper-3.4.6.tar.gz -o zookeeper-3.4.6.tar.gz\ntar -xzf zookeeper-3.4.6.tar.gz\ncd zookeeper-3.4.6\ncp conf/zoo_sample.cfg conf/zoo.cfg\n./bin/zkServer.sh start\n```\n\n### 初始化一些文件夹（druid运行过程中，需要生成的文件存放的地方）\n```\n在druid文件的根目录下执行：bin/init\n```\n\n### druid单机版集群启动命令\n```\njava `cat conf-quickstart/druid/historical/jvm.config | xargs` -cp \"conf-quickstart/druid/_common:conf-quickstart/druid/historical:lib/*\" io.druid.cli.Main server historical\njava `cat conf-quickstart/druid/broker/jvm.config | xargs` -cp \"conf-quickstart/druid/_common:conf-quickstart/druid/broker:lib/*\" io.druid.cli.Main server broker\njava `cat conf-quickstart/druid/coordinator/jvm.config | xargs` -cp \"conf-quickstart/druid/_common:conf-quickstart/druid/coordinator:lib/*\" io.druid.cli.Main server coordinator\njava `cat conf-quickstart/druid/overlord/jvm.config | xargs` -cp \"conf-quickstart/druid/_common:conf-quickstart/druid/overlord:lib/*\" io.druid.cli.Main server overlord\njava `cat conf-quickstart/druid/middleManager/jvm.config | xargs` -cp \"conf-quickstart/druid/_common:conf-quickstart/druid/middleManager:lib/*\" io.druid.cli.Main server middleManager\n```\n\n以上，就是druid单机版的测试版本配置和启动的过程，其中，注意启动用户的权限，如果用户没有创建文件夹的权限，记得提高用户的权限。有了上述的工作，我们就有了一个单机版的druid测试集群，接下来我们要启动tranquility服务，用来接收实时数据流。\n\n\n## tranquility启动\n\n### 下载tranquility\n```\ncurl -O http://static.druid.io/tranquility/releases/tranquility-distribution-0.8.0.tgz\ntar -xzf tranquility-distribution-0.8.0.tgz\ncd tranquility-distribution-0.8.0\n```\n\n### 启动tranquility服务\n/conf-quickstart/tranquility/server.json 是实时流加载配置文件\n```\nbin/tranquility server -configFile <path_to_druid_distro>/conf-quickstart/tranquility/server.json\n```\n\n### 一个测试的实时流数据\n```\nbin/generate-example-metrics | curl -XPOST -H'Content-Type: application/json' --data-binary @- http://localhost:8200/v1/post/metrics\n```\n如果收到{\"result\":{\"received\":25,\"sent\":25}}的结果，证明成功了\n\n\n### 查询\n8082端口是druid集群的broker节点的接口,wikiticker-top-pages.json为查询命令文件。这里是用户以二进制文件的方式提交一个post请求\n```\ncurl -L -H'Content-Type: application/json' -XPOST --data-binary @quickstart/wikiticker-top-pages.json http://localhost:8082/druid/v2/?pretty\n```\n\n结束语：\n  以上，用实时的方式加载数据到druid的单机测试已经完成，这只是一个简单的练手，通过这个测试，我们可以对druid的加载方式有个简单的了解，druid集群，有5个节点，coordinater+overlord属于集群的master，起到控制的作用，middlemanager为task管理，historical为历史节点，也可以进行数据的查询，但是只能查询到已经做了落地的数据，实时数据不能查询到，broker为client的访问接口，通过这个节点，可以访问到实时数据和历史数据。\n\n\n友情链接：http://druid.io\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"druid_single_machine","published":1,"date":"2021-01-26T10:03:56.636Z","updated":"2021-01-26T10:03:56.636Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkdu2m670003y74tzgt5qt6e","content":"<p>  druid使用也有一年了，踩过的坑无数，现在虽然线上服务已经稳定，但是还是使用的小白，觉得还是有必要把搭建的流程记录下。<br>  单机版的搭建流程十分简单，适合机器资源不是很充足，或者对druid使用方法测试阶段。其实步骤跟官网上介绍的流程一样的，实时加载使用druid+tranquility，离线数据加载使用druid的batch加载方式。用的很简单，有不足的地方，望指教。</p>\n<ul>\n<li><a id=\"more\"></a>\n</li>\n</ul>\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">druid</div><div class=\"line\">tranquility</div><div class=\"line\">zookeeper</div></pre></td></tr></table></figure>\n<h2 id=\"druid集群启动\"><a href=\"#druid集群启动\" class=\"headerlink\" title=\"druid集群启动\"></a>druid集群启动</h2><h3 id=\"准备机器（一台）\"><a href=\"#准备机器（一台）\" class=\"headerlink\" title=\"准备机器（一台）\"></a>准备机器（一台）</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Java 8 或者更高版本</div><div class=\"line\">Linux, Mac OS X, 或者其他 Unix-like OS (Windows不支持，可以使用虚拟机)</div><div class=\"line\">8G内存</div><div class=\"line\">2核cpu</div></pre></td></tr></table></figure>\n<h3 id=\"下载druid\"><a href=\"#下载druid\" class=\"headerlink\" title=\"下载druid\"></a>下载druid</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">curl -O http://static.druid.io/artifacts/releases/druid-0.10.0-bin.tar.gz</div><div class=\"line\">tar -xzf druid-0.10.0-bin.tar.gz</div><div class=\"line\"><span class=\"built_in\">cd</span> druid-0.10.0</div></pre></td></tr></table></figure>\n<h3 id=\"启动zk（根据自己的习惯，将zk放在合适的地方）\"><a href=\"#启动zk（根据自己的习惯，将zk放在合适的地方）\" class=\"headerlink\" title=\"启动zk（根据自己的习惯，将zk放在合适的地方）\"></a>启动zk（根据自己的习惯，将zk放在合适的地方）</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">curl http://www.gtlib.gatech.edu/pub/apache/zookeeper/zookeeper-3.4.6/zookeeper-3.4.6.tar.gz -o zookeeper-3.4.6.tar.gz</div><div class=\"line\">tar -xzf zookeeper-3.4.6.tar.gz</div><div class=\"line\">cd zookeeper-3.4.6</div><div class=\"line\">cp conf/zoo_sample.cfg conf/zoo.cfg</div><div class=\"line\">./bin/zkServer.sh start</div></pre></td></tr></table></figure>\n<h3 id=\"初始化一些文件夹（druid运行过程中，需要生成的文件存放的地方）\"><a href=\"#初始化一些文件夹（druid运行过程中，需要生成的文件存放的地方）\" class=\"headerlink\" title=\"初始化一些文件夹（druid运行过程中，需要生成的文件存放的地方）\"></a>初始化一些文件夹（druid运行过程中，需要生成的文件存放的地方）</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">在druid文件的根目录下执行：bin/init</div></pre></td></tr></table></figure>\n<h3 id=\"druid单机版集群启动命令\"><a href=\"#druid单机版集群启动命令\" class=\"headerlink\" title=\"druid单机版集群启动命令\"></a>druid单机版集群启动命令</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">java `cat conf-quickstart/druid/historical/jvm.config | xargs` -cp &quot;conf-quickstart/druid/_common:conf-quickstart/druid/historical:lib/*&quot; io.druid.cli.Main server historical</div><div class=\"line\">java `cat conf-quickstart/druid/broker/jvm.config | xargs` -cp &quot;conf-quickstart/druid/_common:conf-quickstart/druid/broker:lib/*&quot; io.druid.cli.Main server broker</div><div class=\"line\">java `cat conf-quickstart/druid/coordinator/jvm.config | xargs` -cp &quot;conf-quickstart/druid/_common:conf-quickstart/druid/coordinator:lib/*&quot; io.druid.cli.Main server coordinator</div><div class=\"line\">java `cat conf-quickstart/druid/overlord/jvm.config | xargs` -cp &quot;conf-quickstart/druid/_common:conf-quickstart/druid/overlord:lib/*&quot; io.druid.cli.Main server overlord</div><div class=\"line\">java `cat conf-quickstart/druid/middleManager/jvm.config | xargs` -cp &quot;conf-quickstart/druid/_common:conf-quickstart/druid/middleManager:lib/*&quot; io.druid.cli.Main server middleManager</div></pre></td></tr></table></figure>\n<p>以上，就是druid单机版的测试版本配置和启动的过程，其中，注意启动用户的权限，如果用户没有创建文件夹的权限，记得提高用户的权限。有了上述的工作，我们就有了一个单机版的druid测试集群，接下来我们要启动tranquility服务，用来接收实时数据流。</p>\n<h2 id=\"tranquility启动\"><a href=\"#tranquility启动\" class=\"headerlink\" title=\"tranquility启动\"></a>tranquility启动</h2><h3 id=\"下载tranquility\"><a href=\"#下载tranquility\" class=\"headerlink\" title=\"下载tranquility\"></a>下载tranquility</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">curl -O http://static.druid.io/tranquility/releases/tranquility-distribution-0.8.0.tgz</div><div class=\"line\">tar -xzf tranquility-distribution-0.8.0.tgz</div><div class=\"line\">cd tranquility-distribution-0.8.0</div></pre></td></tr></table></figure>\n<h3 id=\"启动tranquility服务\"><a href=\"#启动tranquility服务\" class=\"headerlink\" title=\"启动tranquility服务\"></a>启动tranquility服务</h3><p>/conf-quickstart/tranquility/server.json 是实时流加载配置文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">bin/tranquility server -configFile &lt;path_to_druid_distro&gt;/conf-quickstart/tranquility/server.json</div></pre></td></tr></table></figure></p>\n<h3 id=\"一个测试的实时流数据\"><a href=\"#一个测试的实时流数据\" class=\"headerlink\" title=\"一个测试的实时流数据\"></a>一个测试的实时流数据</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">bin/generate-example-metrics | curl -XPOST -H&apos;Content-Type: application/json&apos; --data-binary @- http://localhost:8200/v1/post/metrics</div></pre></td></tr></table></figure>\n<p>如果收到{“result”:{“received”:25,”sent”:25}}的结果，证明成功了</p>\n<h3 id=\"查询\"><a href=\"#查询\" class=\"headerlink\" title=\"查询\"></a>查询</h3><p>8082端口是druid集群的broker节点的接口,wikiticker-top-pages.json为查询命令文件。这里是用户以二进制文件的方式提交一个post请求<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">curl -L -H&apos;Content-Type: application/json&apos; -XPOST --data-binary @quickstart/wikiticker-top-pages.json http://localhost:8082/druid/v2/?pretty</div></pre></td></tr></table></figure></p>\n<p>结束语：<br>  以上，用实时的方式加载数据到druid的单机测试已经完成，这只是一个简单的练手，通过这个测试，我们可以对druid的加载方式有个简单的了解，druid集群，有5个节点，coordinater+overlord属于集群的master，起到控制的作用，middlemanager为task管理，historical为历史节点，也可以进行数据的查询，但是只能查询到已经做了落地的数据，实时数据不能查询到，broker为client的访问接口，通过这个节点，可以访问到实时数据和历史数据。</p>\n<p>友情链接：<a href=\"http://druid.io\" target=\"_blank\" rel=\"external\">http://druid.io</a></p>\n","site":{"data":{}},"excerpt":"<p>  druid使用也有一年了，踩过的坑无数，现在虽然线上服务已经稳定，但是还是使用的小白，觉得还是有必要把搭建的流程记录下。<br>  单机版的搭建流程十分简单，适合机器资源不是很充足，或者对druid使用方法测试阶段。其实步骤跟官网上介绍的流程一样的，实时加载使用druid+tranquility，离线数据加载使用druid的batch加载方式。用的很简单，有不足的地方，望指教。</p>\n<ul>\n<li>","more":"</li>\n</ul>\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">druid</div><div class=\"line\">tranquility</div><div class=\"line\">zookeeper</div></pre></td></tr></table></figure>\n<h2 id=\"druid集群启动\"><a href=\"#druid集群启动\" class=\"headerlink\" title=\"druid集群启动\"></a>druid集群启动</h2><h3 id=\"准备机器（一台）\"><a href=\"#准备机器（一台）\" class=\"headerlink\" title=\"准备机器（一台）\"></a>准备机器（一台）</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Java 8 或者更高版本</div><div class=\"line\">Linux, Mac OS X, 或者其他 Unix-like OS (Windows不支持，可以使用虚拟机)</div><div class=\"line\">8G内存</div><div class=\"line\">2核cpu</div></pre></td></tr></table></figure>\n<h3 id=\"下载druid\"><a href=\"#下载druid\" class=\"headerlink\" title=\"下载druid\"></a>下载druid</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">curl -O http://static.druid.io/artifacts/releases/druid-0.10.0-bin.tar.gz</div><div class=\"line\">tar -xzf druid-0.10.0-bin.tar.gz</div><div class=\"line\"><span class=\"built_in\">cd</span> druid-0.10.0</div></pre></td></tr></table></figure>\n<h3 id=\"启动zk（根据自己的习惯，将zk放在合适的地方）\"><a href=\"#启动zk（根据自己的习惯，将zk放在合适的地方）\" class=\"headerlink\" title=\"启动zk（根据自己的习惯，将zk放在合适的地方）\"></a>启动zk（根据自己的习惯，将zk放在合适的地方）</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">curl http://www.gtlib.gatech.edu/pub/apache/zookeeper/zookeeper-3.4.6/zookeeper-3.4.6.tar.gz -o zookeeper-3.4.6.tar.gz</div><div class=\"line\">tar -xzf zookeeper-3.4.6.tar.gz</div><div class=\"line\">cd zookeeper-3.4.6</div><div class=\"line\">cp conf/zoo_sample.cfg conf/zoo.cfg</div><div class=\"line\">./bin/zkServer.sh start</div></pre></td></tr></table></figure>\n<h3 id=\"初始化一些文件夹（druid运行过程中，需要生成的文件存放的地方）\"><a href=\"#初始化一些文件夹（druid运行过程中，需要生成的文件存放的地方）\" class=\"headerlink\" title=\"初始化一些文件夹（druid运行过程中，需要生成的文件存放的地方）\"></a>初始化一些文件夹（druid运行过程中，需要生成的文件存放的地方）</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">在druid文件的根目录下执行：bin/init</div></pre></td></tr></table></figure>\n<h3 id=\"druid单机版集群启动命令\"><a href=\"#druid单机版集群启动命令\" class=\"headerlink\" title=\"druid单机版集群启动命令\"></a>druid单机版集群启动命令</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">java `cat conf-quickstart/druid/historical/jvm.config | xargs` -cp &quot;conf-quickstart/druid/_common:conf-quickstart/druid/historical:lib/*&quot; io.druid.cli.Main server historical</div><div class=\"line\">java `cat conf-quickstart/druid/broker/jvm.config | xargs` -cp &quot;conf-quickstart/druid/_common:conf-quickstart/druid/broker:lib/*&quot; io.druid.cli.Main server broker</div><div class=\"line\">java `cat conf-quickstart/druid/coordinator/jvm.config | xargs` -cp &quot;conf-quickstart/druid/_common:conf-quickstart/druid/coordinator:lib/*&quot; io.druid.cli.Main server coordinator</div><div class=\"line\">java `cat conf-quickstart/druid/overlord/jvm.config | xargs` -cp &quot;conf-quickstart/druid/_common:conf-quickstart/druid/overlord:lib/*&quot; io.druid.cli.Main server overlord</div><div class=\"line\">java `cat conf-quickstart/druid/middleManager/jvm.config | xargs` -cp &quot;conf-quickstart/druid/_common:conf-quickstart/druid/middleManager:lib/*&quot; io.druid.cli.Main server middleManager</div></pre></td></tr></table></figure>\n<p>以上，就是druid单机版的测试版本配置和启动的过程，其中，注意启动用户的权限，如果用户没有创建文件夹的权限，记得提高用户的权限。有了上述的工作，我们就有了一个单机版的druid测试集群，接下来我们要启动tranquility服务，用来接收实时数据流。</p>\n<h2 id=\"tranquility启动\"><a href=\"#tranquility启动\" class=\"headerlink\" title=\"tranquility启动\"></a>tranquility启动</h2><h3 id=\"下载tranquility\"><a href=\"#下载tranquility\" class=\"headerlink\" title=\"下载tranquility\"></a>下载tranquility</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">curl -O http://static.druid.io/tranquility/releases/tranquility-distribution-0.8.0.tgz</div><div class=\"line\">tar -xzf tranquility-distribution-0.8.0.tgz</div><div class=\"line\">cd tranquility-distribution-0.8.0</div></pre></td></tr></table></figure>\n<h3 id=\"启动tranquility服务\"><a href=\"#启动tranquility服务\" class=\"headerlink\" title=\"启动tranquility服务\"></a>启动tranquility服务</h3><p>/conf-quickstart/tranquility/server.json 是实时流加载配置文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">bin/tranquility server -configFile &lt;path_to_druid_distro&gt;/conf-quickstart/tranquility/server.json</div></pre></td></tr></table></figure></p>\n<h3 id=\"一个测试的实时流数据\"><a href=\"#一个测试的实时流数据\" class=\"headerlink\" title=\"一个测试的实时流数据\"></a>一个测试的实时流数据</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">bin/generate-example-metrics | curl -XPOST -H&apos;Content-Type: application/json&apos; --data-binary @- http://localhost:8200/v1/post/metrics</div></pre></td></tr></table></figure>\n<p>如果收到{“result”:{“received”:25,”sent”:25}}的结果，证明成功了</p>\n<h3 id=\"查询\"><a href=\"#查询\" class=\"headerlink\" title=\"查询\"></a>查询</h3><p>8082端口是druid集群的broker节点的接口,wikiticker-top-pages.json为查询命令文件。这里是用户以二进制文件的方式提交一个post请求<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">curl -L -H&apos;Content-Type: application/json&apos; -XPOST --data-binary @quickstart/wikiticker-top-pages.json http://localhost:8082/druid/v2/?pretty</div></pre></td></tr></table></figure></p>\n<p>结束语：<br>  以上，用实时的方式加载数据到druid的单机测试已经完成，这只是一个简单的练手，通过这个测试，我们可以对druid的加载方式有个简单的了解，druid集群，有5个节点，coordinater+overlord属于集群的master，起到控制的作用，middlemanager为task管理，historical为历史节点，也可以进行数据的查询，但是只能查询到已经做了落地的数据，实时数据不能查询到，broker为client的访问接口，通过这个节点，可以访问到实时数据和历史数据。</p>\n<p>友情链接：<a href=\"http://druid.io\">http://druid.io</a></p>"},{"title":"初识","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n+ <!-- more -->\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n\n","source":"_posts/hello-world.md","raw":"---\ntitle: 初识\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n+ <!-- more -->\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n\n","slug":"hello-world","published":1,"date":"2021-01-26T10:03:56.636Z","updated":"2021-01-26T10:03:56.636Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkdu2m6f0006y74tt0j4ufp8","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<ul>\n<li><a id=\"more\"></a>\n</li>\n</ul>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<ul>\n<li>","more":"</li>\n</ul>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a></p>"},{"title":"Hexo-Yelee 使用语法总结及注意","date":"2017-04-27T16:00:00.000Z","+description":"不开心","_content":"\n#### hexo支持的是Github Flavored Markdown语法\n\n先来个more，详情页你不会看到我的啦~~~~\n\n <!--more-->\n\n 1. 我是table\n\nhe | he\n---|---\n1 | 1\n\n\n 2. 我是引用\n > \nTranquility is a Scala library that coordinates streaming ingestion through the Druid indexing service. It exists because the Druid indexing service API is fairly low level. In the indexing service, callers create \"tasks\" that run on a single machine using a fixed bundle of resources. Indexing tasks start up with a particular configuration and generally this configuration cannot be changed once the task is running.\nTranquility manages creation of Druid indexing tasks, handling partitioning, replication, service discovery, and schema rollover for you, seamlessly and without downtime. You never have to write code to deal with individual tasks directly.\n\n 3. 我是另一个引用\n > \nTranquility 是一个通过druid indexing service协调实时注入的scala库。它之所以存在是因为druid indexing service的api水平相当地低。对于indexing service,调用者生成tasks，这个tasks运行在一个使用固定的资源包的机器上。Indexing tasks 用一个特定的配置启动，通常tasks一旦启动，这个配置就不能更改了。\n\n 4. 我是注意事项\n ```bash\n注意：\n行与行之间，不能有多个换行，至多一个\n每个命令后面需要跟一个空格，不然命令会不生效\n列中穿插别的符号，就会重新开始索引的\n```\n\n 5. 我是各种标题\n <pre>\n # 标题1\n ## 标题2\n ### 标题3\n #### 标题4\n ###### 标题5\n ###### 标题6\n \n 6. 我是代码段\n ```\n woshi daima\n woshi daima\n woshi daima\n ```\n \n 7. 我是加粗字体\n **加粗**\n\n `你猜我是啥`\n \n 8. `下面的是多行代码呀`\n <pre>\n fsdfgrg \n ewrgrgregregre\n frgr \n <code>\n \n 9. \n * 1\n * 2\n * 3\n \n 10. 下面的我疯啦，你猜他们都是啥\n__lalal__\n_alalal_\n_You **can** combine them_\n\n* Item 1\n* Item 2\n  * Item 2a\n  * Item 2b\n  \n  \n1. Item 1\n1. Item 2\n1. Item 3\n   1. Item 3a\n   1. Item 3b\n   \n\nI think you should use an\n`<addr>` element here instead.\n\n\n## hexo插入图片，并控制图片大小\n```\n<div align=left>\n    <img src=\"/img/vue/238555602663002408.jpg\" width=\"600\" height=\"400\" alt=\"\"/>\n</div>\n```\n\n## hexo 一般插入图片简单方法\n```\n![GitHub Logo](/img/avatar.png)\n```\n\n\n ","source":"_posts/hexo_yufa.md","raw":"---\ntitle: Hexo-Yelee 使用语法总结及注意\ndate: 2017-04-28 00:00:00\ncategories: hexo\ntags:\n - hexo\n - yelee\n+description: \"不开心\"\n---\n\n#### hexo支持的是Github Flavored Markdown语法\n\n先来个more，详情页你不会看到我的啦~~~~\n\n <!--more-->\n\n 1. 我是table\n\nhe | he\n---|---\n1 | 1\n\n\n 2. 我是引用\n > \nTranquility is a Scala library that coordinates streaming ingestion through the Druid indexing service. It exists because the Druid indexing service API is fairly low level. In the indexing service, callers create \"tasks\" that run on a single machine using a fixed bundle of resources. Indexing tasks start up with a particular configuration and generally this configuration cannot be changed once the task is running.\nTranquility manages creation of Druid indexing tasks, handling partitioning, replication, service discovery, and schema rollover for you, seamlessly and without downtime. You never have to write code to deal with individual tasks directly.\n\n 3. 我是另一个引用\n > \nTranquility 是一个通过druid indexing service协调实时注入的scala库。它之所以存在是因为druid indexing service的api水平相当地低。对于indexing service,调用者生成tasks，这个tasks运行在一个使用固定的资源包的机器上。Indexing tasks 用一个特定的配置启动，通常tasks一旦启动，这个配置就不能更改了。\n\n 4. 我是注意事项\n ```bash\n注意：\n行与行之间，不能有多个换行，至多一个\n每个命令后面需要跟一个空格，不然命令会不生效\n列中穿插别的符号，就会重新开始索引的\n```\n\n 5. 我是各种标题\n <pre>\n # 标题1\n ## 标题2\n ### 标题3\n #### 标题4\n ###### 标题5\n ###### 标题6\n \n 6. 我是代码段\n ```\n woshi daima\n woshi daima\n woshi daima\n ```\n \n 7. 我是加粗字体\n **加粗**\n\n `你猜我是啥`\n \n 8. `下面的是多行代码呀`\n <pre>\n fsdfgrg \n ewrgrgregregre\n frgr \n <code>\n \n 9. \n * 1\n * 2\n * 3\n \n 10. 下面的我疯啦，你猜他们都是啥\n__lalal__\n_alalal_\n_You **can** combine them_\n\n* Item 1\n* Item 2\n  * Item 2a\n  * Item 2b\n  \n  \n1. Item 1\n1. Item 2\n1. Item 3\n   1. Item 3a\n   1. Item 3b\n   \n\nI think you should use an\n`<addr>` element here instead.\n\n\n## hexo插入图片，并控制图片大小\n```\n<div align=left>\n    <img src=\"/img/vue/238555602663002408.jpg\" width=\"600\" height=\"400\" alt=\"\"/>\n</div>\n```\n\n## hexo 一般插入图片简单方法\n```\n![GitHub Logo](/img/avatar.png)\n```\n\n\n ","slug":"hexo_yufa","published":1,"updated":"2021-01-26T10:03:56.636Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkdu2m6h0007y74ty8ty6i8w","content":"<h4 id=\"hexo支持的是Github-Flavored-Markdown语法\"><a href=\"#hexo支持的是Github-Flavored-Markdown语法\" class=\"headerlink\" title=\"hexo支持的是Github Flavored Markdown语法\"></a>hexo支持的是Github Flavored Markdown语法</h4><p>先来个more，详情页你不会看到我的啦~~~~</p>\n <a id=\"more\"></a>\n<ol>\n<li>我是table</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>he</th>\n<th>he</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>1</td>\n</tr>\n</tbody>\n</table>\n<ol>\n<li><p>我是引用</p>\n<blockquote>\n<p>Tranquility is a Scala library that coordinates streaming ingestion through the Druid indexing service. It exists because the Druid indexing service API is fairly low level. In the indexing service, callers create “tasks” that run on a single machine using a fixed bundle of resources. Indexing tasks start up with a particular configuration and generally this configuration cannot be changed once the task is running.<br>Tranquility manages creation of Druid indexing tasks, handling partitioning, replication, service discovery, and schema rollover for you, seamlessly and without downtime. You never have to write code to deal with individual tasks directly.</p>\n</blockquote>\n</li>\n<li><p>我是另一个引用</p>\n<blockquote>\n<p>Tranquility 是一个通过druid indexing service协调实时注入的scala库。它之所以存在是因为druid indexing service的api水平相当地低。对于indexing service,调用者生成tasks，这个tasks运行在一个使用固定的资源包的机器上。Indexing tasks 用一个特定的配置启动，通常tasks一旦启动，这个配置就不能更改了。</p>\n</blockquote>\n</li>\n<li><p>我是注意事项</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">注意：</div><div class=\"line\">行与行之间，不能有多个换行，至多一个</div><div class=\"line\">每个命令后面需要跟一个空格，不然命令会不生效</div><div class=\"line\">列中穿插别的符号，就会重新开始索引的</div></pre></td></tr></table></figure>\n</li>\n<li><p>我是各种标题<br><pre></pre></p>\n<h1 id=\"标题1\"><a href=\"#标题1\" class=\"headerlink\" title=\"标题1\"></a>标题1</h1><h2 id=\"标题2\"><a href=\"#标题2\" class=\"headerlink\" title=\"标题2\"></a>标题2</h2><h3 id=\"标题3\"><a href=\"#标题3\" class=\"headerlink\" title=\"标题3\"></a>标题3</h3><h4 id=\"标题4\"><a href=\"#标题4\" class=\"headerlink\" title=\"标题4\"></a>标题4</h4><h6 id=\"标题5\"><a href=\"#标题5\" class=\"headerlink\" title=\"标题5\"></a>标题5</h6><h6 id=\"标题6\"><a href=\"#标题6\" class=\"headerlink\" title=\"标题6\"></a>标题6</h6></li>\n<li><p>我是代码段</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">woshi daima</div><div class=\"line\">woshi daima</div><div class=\"line\">woshi daima</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<ol>\n<li><p>我是加粗字体<br><strong>加粗</strong></p>\n<p><code>你猜我是啥</code></p>\n</li>\n<li><p><code>下面的是多行代码呀</code><br><pre><br>fsdfgrg<br>ewrgrgregregre<br>frgr<br><code></code></pre></p>\n</li>\n<li></li>\n</ol>\n<ul>\n<li>1</li>\n<li>2</li>\n<li>3</li>\n</ul>\n<ol>\n<li>下面的我疯啦，你猜他们都是啥<br><strong>lalal</strong><br><em>alalal</em><br><em>You <strong>can</strong> combine them</em></li>\n</ol>\n<ul>\n<li>Item 1</li>\n<li>Item 2<ul>\n<li>Item 2a</li>\n<li>Item 2b</li>\n</ul>\n</li>\n</ul>\n<ol>\n<li>Item 1</li>\n<li>Item 2</li>\n<li>Item 3<ol>\n<li>Item 3a</li>\n<li>Item 3b</li>\n</ol>\n</li>\n</ol>\n<p>I think you should use an<br><code>&lt;addr&gt;</code> element here instead.</p>\n<h2 id=\"hexo插入图片，并控制图片大小\"><a href=\"#hexo插入图片，并控制图片大小\" class=\"headerlink\" title=\"hexo插入图片，并控制图片大小\"></a>hexo插入图片，并控制图片大小</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div align=left&gt;</div><div class=\"line\">    &lt;img src=&quot;/img/vue/238555602663002408.jpg&quot; width=&quot;600&quot; height=&quot;400&quot; alt=&quot;&quot;/&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"hexo-一般插入图片简单方法\"><a href=\"#hexo-一般插入图片简单方法\" class=\"headerlink\" title=\"hexo 一般插入图片简单方法\"></a>hexo 一般插入图片简单方法</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">![GitHub Logo](/img/avatar.png)</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h4 id=\"hexo支持的是Github-Flavored-Markdown语法\"><a href=\"#hexo支持的是Github-Flavored-Markdown语法\" class=\"headerlink\" title=\"hexo支持的是Github Flavored Markdown语法\"></a>hexo支持的是Github Flavored Markdown语法</h4><p>先来个more，详情页你不会看到我的啦~~~~</p>","more":"<ol>\n<li>我是table</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>he</th>\n<th>he</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>1</td>\n</tr>\n</tbody>\n</table>\n<ol>\n<li><p>我是引用</p>\n<blockquote>\n<p>Tranquility is a Scala library that coordinates streaming ingestion through the Druid indexing service. It exists because the Druid indexing service API is fairly low level. In the indexing service, callers create “tasks” that run on a single machine using a fixed bundle of resources. Indexing tasks start up with a particular configuration and generally this configuration cannot be changed once the task is running.<br>Tranquility manages creation of Druid indexing tasks, handling partitioning, replication, service discovery, and schema rollover for you, seamlessly and without downtime. You never have to write code to deal with individual tasks directly.</p>\n</blockquote>\n</li>\n<li><p>我是另一个引用</p>\n<blockquote>\n<p>Tranquility 是一个通过druid indexing service协调实时注入的scala库。它之所以存在是因为druid indexing service的api水平相当地低。对于indexing service,调用者生成tasks，这个tasks运行在一个使用固定的资源包的机器上。Indexing tasks 用一个特定的配置启动，通常tasks一旦启动，这个配置就不能更改了。</p>\n</blockquote>\n</li>\n<li><p>我是注意事项</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">注意：</div><div class=\"line\">行与行之间，不能有多个换行，至多一个</div><div class=\"line\">每个命令后面需要跟一个空格，不然命令会不生效</div><div class=\"line\">列中穿插别的符号，就会重新开始索引的</div></pre></td></tr></table></figure>\n</li>\n<li><p>我是各种标题<br><pre></p>\n<h1 id=\"标题1\"><a href=\"#标题1\" class=\"headerlink\" title=\"标题1\"></a>标题1</h1><h2 id=\"标题2\"><a href=\"#标题2\" class=\"headerlink\" title=\"标题2\"></a>标题2</h2><h3 id=\"标题3\"><a href=\"#标题3\" class=\"headerlink\" title=\"标题3\"></a>标题3</h3><h4 id=\"标题4\"><a href=\"#标题4\" class=\"headerlink\" title=\"标题4\"></a>标题4</h4><h6 id=\"标题5\"><a href=\"#标题5\" class=\"headerlink\" title=\"标题5\"></a>标题5</h6><h6 id=\"标题6\"><a href=\"#标题6\" class=\"headerlink\" title=\"标题6\"></a>标题6</h6></li>\n<li><p>我是代码段</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">woshi daima</div><div class=\"line\">woshi daima</div><div class=\"line\">woshi daima</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<ol>\n<li><p>我是加粗字体<br><strong>加粗</strong></p>\n<p><code>你猜我是啥</code></p>\n</li>\n<li><p><code>下面的是多行代码呀</code><br><pre><br>fsdfgrg<br>ewrgrgregregre<br>frgr<br><code></p>\n</li>\n<li></li>\n</ol>\n<ul>\n<li>1</li>\n<li>2</li>\n<li>3</li>\n</ul>\n<ol>\n<li>下面的我疯啦，你猜他们都是啥<br><strong>lalal</strong><br><em>alalal</em><br><em>You <strong>can</strong> combine them</em></li>\n</ol>\n<ul>\n<li>Item 1</li>\n<li>Item 2<ul>\n<li>Item 2a</li>\n<li>Item 2b</li>\n</ul>\n</li>\n</ul>\n<ol>\n<li>Item 1</li>\n<li>Item 2</li>\n<li>Item 3<ol>\n<li>Item 3a</li>\n<li>Item 3b</li>\n</ol>\n</li>\n</ol>\n<p>I think you should use an<br><code>&lt;addr&gt;</code> element here instead.</p>\n<h2 id=\"hexo插入图片，并控制图片大小\"><a href=\"#hexo插入图片，并控制图片大小\" class=\"headerlink\" title=\"hexo插入图片，并控制图片大小\"></a>hexo插入图片，并控制图片大小</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div align=left&gt;</div><div class=\"line\">    &lt;img src=&quot;/img/vue/238555602663002408.jpg&quot; width=&quot;600&quot; height=&quot;400&quot; alt=&quot;&quot;/&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"hexo-一般插入图片简单方法\"><a href=\"#hexo-一般插入图片简单方法\" class=\"headerlink\" title=\"hexo 一般插入图片简单方法\"></a>hexo 一般插入图片简单方法</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">![GitHub Logo](/img/avatar.png)</div></pre></td></tr></table></figure>"},{"top":1000,"title":"学习计划","date":"2017-05-04T16:00:00.000Z","_content":"\n学习计划\n\n1. 熟悉hadoop环境搭建\n2. 熟悉hive搭建，及基本语法\n3. 熟悉php\n4. redis","source":"_posts/plan.md","raw":"---\ntop: 1000\ntitle: 学习计划\ndate: 2017-05-05 00:00:00\ncategories: \ntags:\n---\n\n学习计划\n\n1. 熟悉hadoop环境搭建\n2. 熟悉hive搭建，及基本语法\n3. 熟悉php\n4. redis","slug":"plan","published":1,"updated":"2021-01-26T10:03:56.637Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkdu2m6j0008y74tyecgdlq9","content":"<p>学习计划</p>\n<ol>\n<li>熟悉hadoop环境搭建</li>\n<li>熟悉hive搭建，及基本语法</li>\n<li>熟悉php</li>\n<li>redis</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>学习计划</p>\n<ol>\n<li>熟悉hadoop环境搭建</li>\n<li>熟悉hive搭建，及基本语法</li>\n<li>熟悉php</li>\n<li>redis</li>\n</ol>\n"},{"title":"xhell5 激活","_content":"\n激活码：101210-450789-147200","source":"_posts/xshell5.md","raw":"---\ntitle: xhell5 激活\ntags:\n---\n\n激活码：101210-450789-147200","slug":"xshell5","published":1,"date":"2021-01-26T10:03:56.639Z","updated":"2021-01-26T10:03:56.639Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkdu2m6m000by74td0xsqx13","content":"<p>激活码：101210-450789-147200</p>\n","site":{"data":{}},"excerpt":"","more":"<p>激活码：101210-450789-147200</p>\n"},{"title":"maven pom配置详解","_content":"\n+ <!-- more --> \n\n### 概述\npom中节点如下分布\n\n``` \n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" \n xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \n xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <!-- 基本配置 -->\n    <groupId>...</groupId>\n    <artifactId>...</artifactId>\n    <version>...</version>\n    <packaging>...</packaging>\n    <!-- 依赖配置 -->\n    <dependencies>...</dependencies>\n    <parent>...</parent>\n    <dependencyManagement>...</dependencyManagement>\n    <modules>...</modules>\n    <properties>...</properties>\n    <!-- 构建配置 -->\n    <build>...</build>\n    <reporting>...</reporting>\n    <!-- 项目信息 -->\n    <name>...</name>\n    <description>...</description>\n    <url>...</url>\n    <inceptionYear>...</inceptionYear>\n    <licenses>...</licenses>\n    <organization>...</organization>\n    <developers>...</developers>\n    <contributors>...</contributors>\n    <!-- 环境设置 -->\n    <issueManagement>...</issueManagement>\n    <ciManagement>...</ciManagement>\n    <mailingLists>...</mailingLists>\n    <scm>...</scm>\n    <prerequisites>...</prerequisites>\n    <repositories>...</repositories>\n    <pluginRepositories>...</pluginRepositories>\n    <distributionManagement>...</distributionManagement>\n    <profiles>...</profiles>\n</project>\n```\n\n### 基本配置\nmodelVersion：pom模型版本，maven2和3只能为4.0.0\ngroupId：组ID，maven用于定位\nartifactId：在组中的唯一ID用于定位\nversion：项目版本\npackaging：项目打包方式，有以下值：pom, jar, maven-plugin, ejb, war, ear, rar, par\n\n### 依赖配置\nparent\n用于确定父项目的坐标。\n\n```\n<parent>\n    <groupId>com.learnPro</groupId>\n    <artifactId>SIP-parent</artifactId>\n    <relativePath></relativePath>\n    <version>0.0.1-SNAPSHOT</version>\n</parent>\n```\ngroupId：父项目的构件标识符\nartifactId：父项目的唯一标识符\nrelativePath：Maven首先在当前项目的找父项目的pom，然后在文件系统的这个位置（relativePath），然后在本地仓库，再在远程仓库找。\nversion：父项目的版本\nmodules\n有些maven项目会做成多模块的，这个标签用于指定当前项目所包含的所有模块。之后对这个项目进行的maven操作，会让所有子模块也进行相同操作。\n\n```\n<modules>\n   <module>com-a</>\n   <module>com-b</>\n   <module>com-c</>\n</>\n```\nproperties\n用于定义pom常量\n\n```\n<properties>\n    <java.version>1.7</java.version>\n</properties>\n```\n\n上面这个常量可以在pom文件的任意地方通过${java.version}来引用\n\ndependencies\n项目相关依赖配置（将在之后详细讲解）\n\n```\n<dependencies>\n    <dependency>\n            <groupId>junit</groupId>\n            <artifactId>junit</artifactId>\n            <version>4.12</version>\n    </dependency>\n</dependencies>\n```\n\n这边依赖和中央仓库中的一致，就可以引入对应的jar\n\ndependencyManagement\n在父模块中定义后，子模块就会直接继承相对应的依赖，配置写法同dependencies\n\n```\n<dependencyManagement>\n    <dependencies>\n    .....\n    </dependencies>\n</dependencyManagement>\n```\n\n### 构建配置\nbuild\n用于配置项目构建相关信息\n\n```\n<build>    \n    <!--该元素设置了项目源码目录，当构建项目的时候，构建系统会编译目录里的源码。该路径是相对于pom.xml的相对路径。-->    \n    <sourceDirectory/>    \n    <!--该元素设置了项目脚本源码目录，该目录和源码目录不同：绝大多数情况下，该目录下的内容 会被拷贝到输出目录(因为脚本是被解释的，而不是被编译的)。-->    \n  <scriptSourceDirectory/>    \n  <!--该元素设置了项目单元测试使用的源码目录，当测试项目的时候，构建系统会编译目录里的源码。该路径是相对于pom.xml的相对路径。-->    \n  <testSourceDirectory/>    \n  <!--被编译过的应用程序class文件存放的目录。-->    \n  <outputDirectory/>    \n  <!--被编译过的测试class文件存放的目录。-->    \n  <testOutputDirectory/>    \n  <!--使用来自该项目的一系列构建扩展-->    \n  <extensions>    \n   <!--描述使用到的构建扩展。-->    \n   <extension>    \n    <!--构建扩展的groupId-->    \n    <groupId/>    \n    <!--构建扩展的artifactId-->    \n    <artifactId/>    \n    <!--构建扩展的版本-->    \n    <version/>    \n   </extension>    \n  </extensions>    \n  <!--当项目没有规定目标（Maven2 叫做阶段）时的默认值-->    \n  <defaultGoal/>    \n  <!--这个元素描述了项目相关的所有资源路径列表，例如和项目相关的属性文件，这些资源被包含在最终的打包文件里。-->    \n  <resources>    \n   <!--这个元素描述了项目相关或测试相关的所有资源路径-->    \n   <resource>    \n    <!-- 描述了资源的目标路径。该路径相对target/classes目录（例如${project.build.outputDirectory}）。举个例 子，如果你想资源在特定的包里(org.apache.maven.messages)，你就必须该元素设置为org/apache/maven /messages。然而，如果你只是想把资源放到源码目录结构里，就不需要该配置。-->    \n    <targetPath/>    \n    <!--是否使用参数值代替参数名。参数值取自properties元素或者文件里配置的属性，文件在filters元素里列出。-->    \n    <filtering/>    \n    <!--描述存放资源的目录，该路径相对POM路径-->    \n    <directory/>    \n    <!--包含的模式列表，例如**/*.xml.-->    \n    <includes/>    \n    <!--排除的模式列表，例如**/*.xml-->    \n    <excludes/>    \n   </resource>    \n  </resources>    \n  <!--这个元素描述了单元测试相关的所有资源路径，例如和单元测试相关的属性文件。-->    \n  <testResources>    \n   <!--这个元素描述了测试相关的所有资源路径，参见build/resources/resource元素的说明-->    \n   <testResource>    \n    <targetPath/><filtering/><directory/><includes/><excludes/>    \n   </testResource>    \n  </testResources>    \n  <!--构建产生的所有文件存放的目录-->    \n  <directory/>    \n  <!--产生的构件的文件名，默认值是${artifactId}-${version}。-->    \n  <finalName/>    \n  <!--当filtering开关打开时，使用到的过滤器属性文件列表-->    \n  <filters/>    \n  <!--子项目可以引用的默认插件信息。该插件配置项直到被引用时才会被解析或绑定到生命周期。给定插件的任何本地配置都会覆盖这里的配置-->    \n  <pluginManagement>    \n   <!--使用的插件列表 。-->    \n   <plugins>    \n    <!--plugin元素包含描述插件所需要的信息。-->    \n    <plugin>    \n     <!--插件在仓库里的group ID-->    \n     <groupId/>    \n     <!--插件在仓库里的artifact ID-->    \n     <artifactId/>    \n     <!--被使用的插件的版本（或版本范围）-->    \n     <version/>    \n     <!--是否从该插件下载Maven扩展（例如打包和类型处理器），由于性能原因，只有在真需要下载时，该元素才被设置成enabled。-->    \n     <extensions/>    \n     <!--在构建生命周期中执行一组目标的配置。每个目标可能有不同的配置。-->    \n     <executions>    \n      <!--execution元素包含了插件执行需要的信息-->    \n      <execution>    \n       <!--执行目标的标识符，用于标识构建过程中的目标，或者匹配继承过程中需要合并的执行目标-->    \n       <id/>    \n       <!--绑定了目标的构建生命周期阶段，如果省略，目标会被绑定到源数据里配置的默认阶段-->    \n       <phase/>    \n       <!--配置的执行目标-->    \n       <goals/>    \n       <!--配置是否被传播到子POM-->    \n       <inherited/>    \n       <!--作为DOM对象的配置-->    \n       <configuration/>    \n      </execution>    \n     </executions>    \n     <!--项目引入插件所需要的额外依赖-->    \n     <dependencies>    \n      <!--参见dependencies/dependency元素-->    \n      <dependency>    \n       ......    \n      </dependency>    \n     </dependencies>         \n     <!--任何配置是否被传播到子项目-->    \n     <inherited/>    \n     <!--作为DOM对象的配置-->    \n     <configuration/>    \n    </plugin>    \n   </plugins>    \n  </pluginManagement>    \n  <!--使用的插件列表-->    \n  <plugins>    \n   <!--参见build/pluginManagement/plugins/plugin元素-->    \n   <plugin>    \n    <groupId/><artifactId/><version/><extensions/>    \n    <executions>    \n     <execution>    \n      <id/><phase/><goals/><inherited/><configuration/>    \n     </execution>    \n    </executions>    \n    <dependencies>    \n     <!--参见dependencies/dependency元素-->    \n     <dependency>    \n      ......    \n     </dependency>    \n    </dependencies>    \n    <goals/><inherited/><configuration/>    \n   </plugin>    \n  </plugins>    \n </build>\n ```\n\nreporting\n该元素描述使用报表插件产生报表的规范。当用户执行“mvn site”，这些报表就会运行。 在页面导航栏能看到所有报表的链接。\n\n```\n<reporting>    \n  <!--true，则，网站不包括默认的报表。这包括“项目信息”菜单中的报表。-->    \n  <excludeDefaults/>    \n  <!--所有产生的报表存放到哪里。默认值是${project.build.directory}/site。-->    \n  <outputDirectory/>    \n  <!--使用的报表插件和他们的配置。-->    \n  <plugins>    \n   <!--plugin元素包含描述报表插件需要的信息-->    \n   <plugin>    \n    <!--报表插件在仓库里的group ID-->    \n    <groupId/>    \n    <!--报表插件在仓库里的artifact ID-->    \n    <artifactId/>    \n    <!--被使用的报表插件的版本（或版本范围）-->    \n    <version/>    \n    <!--任何配置是否被传播到子项目-->    \n    <inherited/>    \n    <!--报表插件的配置-->    \n    <configuration/>    \n    <!--一组报表的多重规范，每个规范可能有不同的配置。一个规范（报表集）对应一个执行目标 。例如，有1，2，3，4，5，6，7，8，9个报表。1，2，5构成A报表集，对应一个执行目标。2，5，8构成B报表集，对应另一个执行目标-->    \n    <reportSets>    \n     <!--表示报表的一个集合，以及产生该集合的配置-->    \n     <reportSet>    \n      <!--报表集合的唯一标识符，POM继承时用到-->    \n      <id/>    \n      <!--产生报表集合时，被使用的报表的配置-->    \n      <configuration/>    \n      <!--配置是否被继承到子POMs-->    \n      <inherited/>    \n      <!--这个集合里使用到哪些报表-->    \n      <reports/>    \n     </reportSet>    \n    </reportSets>    \n   </plugin>    \n  </plugins>    \n </reporting>\n ```\n\n### 项目信息\nname：给用户提供更为友好的项目名\ndescription：项目描述，maven文档中保存\nurl：主页的URL，maven文档中保存\ninceptionYear：项目创建年份，4位数字。当产生版权信息时需要使用这个值\nlicenses：该元素描述了项目所有License列表。 应该只列出该项目的license列表，不要列出依赖项目的 license列表。如果列出多个license，用户可以选择它们中的一个而不是接受所有license。（如下）\n\n```\n<license>    \n    <!--license用于法律上的名称-->    \n    <name>...</name>     \n    <!--官方的license正文页面的URL-->    \n    <url>....</url>\n    <!--项目分发的主要方式：repo，可以从Maven库下载 manual， 用户必须手动下载和安装依赖-->    \n    <distribution>repo</distribution>     \n    <!--关于license的补充信息-->    \n    <comments>....</comments>     \n</license> \n```\norganization：1.name 组织名 2.url 组织主页url\ndevelopers：项目开发人员列表（如下）\ncontributors：项目其他贡献者列表，同developers\n\n```\n<developers>  \n    <!--某个开发者信息-->\n    <developer>  \n        <!--开发者的唯一标识符-->\n        <id>....</id>  \n        <!--开发者的全名-->\n        <name>...</name>  \n        <!--开发者的email-->\n        <email>...</email>  \n        <!--开发者的主页-->\n        <url>...<url/>\n        <!--开发者在项目中的角色-->\n        <roles>  \n            <role>Java Dev</role>  \n            <role>Web UI</role>  \n        </roles> \n        <!--开发者所属组织--> \n        <organization>sun</organization>  \n        <!--开发者所属组织的URL-->\n        <organizationUrl>...</organizationUrl>  \n        <!--开发者属性，如即时消息如何处理等-->\n        <properties>\n            <!-- 和主标签中的properties一样，可以随意定义子标签 -->\n        </properties> \n        <!--开发者所在时区， -11到12范围内的整数。--> \n        <timezone>-5</timezone>  \n    </developer>  \n</developers>  \n```\n### 环境设置\nissueManagement\n目的问题管理系统(Bugzilla, Jira, Scarab)的名称和URL\n\n```\n<issueManagement>\n    <system>Bugzilla</system>\n    <url>http://127.0.0.1/bugzilla/</url>\n</issueManagement>\n```\nsystem：系统类型\nurl：路径\nciManagement\n项目的持续集成信息\n\n```\n  <ciManagement>\n    <system>continuum</system>\n    <url>http://127.0.0.1:8080/continuum</url>\n    <notifiers>\n      <notifier>\n        <type>mail</type>\n        <sendOnError>true</sendOnError>\n        <sendOnFailure>true</sendOnFailure>\n        <sendOnSuccess>false</sendOnSuccess>\n        <sendOnWarning>false</sendOnWarning>\n        <address>continuum@127.0.0.1</address>\n        <configuration></configuration>\n      </notifier>\n    </notifiers>\n  </ciManagement>\n```\n\nsystem：持续集成系统的名字\nurl：持续集成系统的URL\nnotifiers：构建完成时，需要通知的开发者/用户的配置项。包括被通知者信息和通知条件（错误，失败，成功，警告）\ntype：通知方式\nsendOnError：错误时是否通知\nsendOnFailure：失败时是否通知\nsendOnSuccess：成功时是否通知\nsendOnWarning：警告时是否通知\naddress：通知发送到的地址\nconfiguration：扩展项\nmailingLists\n项目相关邮件列表信息\n\n```\n  <mailingLists>\n    <mailingList>\n      <name>User List</name>\n      <subscribe>user-subscribe@127.0.0.1</subscribe>\n      <unsubscribe>user-unsubscribe@127.0.0.1</unsubscribe>\n      <post>user@127.0.0.1</post>\n      <archive>http://127.0.0.1/user/</archive>\n      <otherArchives>\n        <otherArchive>http://base.google.com/base/1/127.0.0.1</otherArchive>\n      </otherArchives>\n    </mailingList>\n    .....\n  </mailingLists>\n  ```\nsubscribe, unsubscribe: 订阅邮件（取消订阅）的地址或链接，如果是邮件地址，创建文档时，mailto: 链接会被自动创建\narchive：浏览邮件信息的URL\npost：接收邮件的地址\nscm\n允许你配置你的代码库，供Maven web站点和其它插件使用\n\n```\n  <scm>\n    <connection>scm:svn:http://127.0.0.1/svn/my-project</connection>\n    <developerConnection>scm:svn:https://127.0.0.1/svn/my-project</developerConnection>\n    <tag>HEAD</tag>\n    <url>http://127.0.0.1/websvn/my-project</url>\n  </scm>\n ```\nconnection, developerConnection：这两个表示我们如何连接到maven的版本库。connection只提供读，developerConnection将提供写的请求\n写法如：scm:[provider]:[provider_specific]\n如果连接到CVS仓库，可以配置如下：scm:cvs:pserver:127.0.0.1:/cvs/root:my-project\ntag：项目标签，默认HEAD\nurl：共有仓库路径\nprerequisites\n项目构建的前提\n\n```\n<prerequisites>\n    <maven>2.0.6</maven>\n</prerequisites>\n```\nrepositories,pluginRepositories\n依赖和扩展的远程仓库列表，同上篇文章，setting.xml配置中介绍的。\n\n```\n  <repositories>\n    <repository>\n      <releases>\n        <enabled>false</enabled>\n        <updatePolicy>always</updatePolicy>\n        <checksumPolicy>warn</checksumPolicy>\n      </releases>\n      <snapshots>\n        <enabled>true</enabled>\n        <updatePolicy>never</updatePolicy>\n        <checksumPolicy>fail</checksumPolicy>\n      </snapshots>\n      <id>codehausSnapshots</id>\n      <name>Codehaus Snapshots</name>\n      <url>http://snapshots.maven.codehaus.org/maven2</url>\n      <layout>default</layout>\n    </repository>\n  </repositories>\n  <pluginRepositories>\n    ...\n  </pluginRepositories>\n```\nreleases, snapshots:这是各种构件的策略，release或者snapshot。这两个集合，POM就可以根据独立仓库任意类型的依赖改变策略。如：一个人可能只激活下载snapshot用来开发。\nenable：true或者false，决定仓库是否对于各自的类型激活(release 或者 snapshot)。\nupdatePolicy: 这个元素决定更新频率。maven将比较本地pom的时间戳（存储在仓库的maven数据文件中）和远程的. 有以下选择: always, daily (默认), interval:X (x是代表分钟的整型) ， never.\nchecksumPolicy：当Maven向仓库部署文件的时候，它也部署了相应的校验和文件。可选的为：ignore，fail，warn，或者不正确的校验和。\nlayout：在上面描述仓库的时候，提到他们有统一的布局。Maven 2有它仓库默认布局。然而，Maven 1.x有不同布局。使用这个元素来表明它是default还是legacy。\ndistributionManagement\n它管理的分布在整个构建过程生成的工件和支持文件\n\n```\n  <distributionManagement>\n    ...\n    <downloadUrl>http://mojo.codehaus.org/my-project</downloadUrl>\n    <status>deployed</status>\n  </distributionManagement>\n ```\ndownloadUrl: 其他pom可以通过此url的仓库抓取组件\nstatus：给出该构件在远程仓库的状态\nnone: 默认\nconverted: 将被早期Maven 2 POM转换过来\npartner: 这个项目会从合作者仓库同步过来\ndeployed: 从Maven 2或3实例部署\nverified: 被核实时正确的和最终的\nRepository\n指定Maven pom从远程下载控件到当前项目的位置和方式，如果snapshotRepository没有被定义则使用repository相关的配置\n\n```\n  <distributionManagement>\n    <repository>\n      <uniqueVersion>false</uniqueVersion>\n      <id>corp1</id>\n      <name>Corporate Repository</name>\n      <url>scp://repo/maven2</url>\n      <layout>default</layout>\n    </repository>\n    <snapshotRepository>\n      <uniqueVersion>true</uniqueVersion>\n      <id>propSnap</id>\n      <name>Propellors Snapshots</name>\n      <url>sftp://propellers.net/maven</url>\n      <layout>legacy</layout>\n    </snapshotRepository>\n    ...\n  </distributionManagement>\n  ```\nid, name：仓库的唯一标识\nuniqueVersion：true或false，指明控件部署的时候是否获取独立的版本号。\nurl：repository元素的核心。指定位置和部署协议发布控件到仓库。\nlayout：布局，default或legacy\nSite Distribution\n多分布存储库,distributionManagement负责定义如何部署项目的网站和文档。\n\n```\n  <distributionManagement>\n    ...\n    <site>\n      <id>mojo.website</id>\n      <name>Mojo Website</name>\n      <url>scp://beaver.codehaus.org/home/projects/mojo/public_html/</url>\n    </site>\n    ...\n  </distributionManagement>\n ```\nid, name, url: 这些元素与distributionManagement repository中的相同\nRelocation\n重新部署-项目不是静态的，是活的。他们需要被搬到更合适的地方。如：当你的下个成功的开源项目移到Apache下，重命名为org.apache:my-project:1.0 对你项目更有好处。\n\n```\n  <distributionManagement>\n    ...\n    <relocation>\n      <groupId>org.apache</groupId>\n      <artifactId>my-project</artifactId>\n      <version>1.0</version>\n      <message>We have moved the Project under Apache</message>\n    </relocation>\n    ...\n  </distributionManagement>\n  ```\nprofiles\nprofile可以让我们定义一系列的配置信息（插件等），然后指定其激活条件\n","source":"_posts/pom.md","raw":"---\ntitle: maven pom配置详解\ntags:\n- maven\n- pom\n---\n\n+ <!-- more --> \n\n### 概述\npom中节点如下分布\n\n``` \n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" \n xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \n xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <!-- 基本配置 -->\n    <groupId>...</groupId>\n    <artifactId>...</artifactId>\n    <version>...</version>\n    <packaging>...</packaging>\n    <!-- 依赖配置 -->\n    <dependencies>...</dependencies>\n    <parent>...</parent>\n    <dependencyManagement>...</dependencyManagement>\n    <modules>...</modules>\n    <properties>...</properties>\n    <!-- 构建配置 -->\n    <build>...</build>\n    <reporting>...</reporting>\n    <!-- 项目信息 -->\n    <name>...</name>\n    <description>...</description>\n    <url>...</url>\n    <inceptionYear>...</inceptionYear>\n    <licenses>...</licenses>\n    <organization>...</organization>\n    <developers>...</developers>\n    <contributors>...</contributors>\n    <!-- 环境设置 -->\n    <issueManagement>...</issueManagement>\n    <ciManagement>...</ciManagement>\n    <mailingLists>...</mailingLists>\n    <scm>...</scm>\n    <prerequisites>...</prerequisites>\n    <repositories>...</repositories>\n    <pluginRepositories>...</pluginRepositories>\n    <distributionManagement>...</distributionManagement>\n    <profiles>...</profiles>\n</project>\n```\n\n### 基本配置\nmodelVersion：pom模型版本，maven2和3只能为4.0.0\ngroupId：组ID，maven用于定位\nartifactId：在组中的唯一ID用于定位\nversion：项目版本\npackaging：项目打包方式，有以下值：pom, jar, maven-plugin, ejb, war, ear, rar, par\n\n### 依赖配置\nparent\n用于确定父项目的坐标。\n\n```\n<parent>\n    <groupId>com.learnPro</groupId>\n    <artifactId>SIP-parent</artifactId>\n    <relativePath></relativePath>\n    <version>0.0.1-SNAPSHOT</version>\n</parent>\n```\ngroupId：父项目的构件标识符\nartifactId：父项目的唯一标识符\nrelativePath：Maven首先在当前项目的找父项目的pom，然后在文件系统的这个位置（relativePath），然后在本地仓库，再在远程仓库找。\nversion：父项目的版本\nmodules\n有些maven项目会做成多模块的，这个标签用于指定当前项目所包含的所有模块。之后对这个项目进行的maven操作，会让所有子模块也进行相同操作。\n\n```\n<modules>\n   <module>com-a</>\n   <module>com-b</>\n   <module>com-c</>\n</>\n```\nproperties\n用于定义pom常量\n\n```\n<properties>\n    <java.version>1.7</java.version>\n</properties>\n```\n\n上面这个常量可以在pom文件的任意地方通过${java.version}来引用\n\ndependencies\n项目相关依赖配置（将在之后详细讲解）\n\n```\n<dependencies>\n    <dependency>\n            <groupId>junit</groupId>\n            <artifactId>junit</artifactId>\n            <version>4.12</version>\n    </dependency>\n</dependencies>\n```\n\n这边依赖和中央仓库中的一致，就可以引入对应的jar\n\ndependencyManagement\n在父模块中定义后，子模块就会直接继承相对应的依赖，配置写法同dependencies\n\n```\n<dependencyManagement>\n    <dependencies>\n    .....\n    </dependencies>\n</dependencyManagement>\n```\n\n### 构建配置\nbuild\n用于配置项目构建相关信息\n\n```\n<build>    \n    <!--该元素设置了项目源码目录，当构建项目的时候，构建系统会编译目录里的源码。该路径是相对于pom.xml的相对路径。-->    \n    <sourceDirectory/>    \n    <!--该元素设置了项目脚本源码目录，该目录和源码目录不同：绝大多数情况下，该目录下的内容 会被拷贝到输出目录(因为脚本是被解释的，而不是被编译的)。-->    \n  <scriptSourceDirectory/>    \n  <!--该元素设置了项目单元测试使用的源码目录，当测试项目的时候，构建系统会编译目录里的源码。该路径是相对于pom.xml的相对路径。-->    \n  <testSourceDirectory/>    \n  <!--被编译过的应用程序class文件存放的目录。-->    \n  <outputDirectory/>    \n  <!--被编译过的测试class文件存放的目录。-->    \n  <testOutputDirectory/>    \n  <!--使用来自该项目的一系列构建扩展-->    \n  <extensions>    \n   <!--描述使用到的构建扩展。-->    \n   <extension>    \n    <!--构建扩展的groupId-->    \n    <groupId/>    \n    <!--构建扩展的artifactId-->    \n    <artifactId/>    \n    <!--构建扩展的版本-->    \n    <version/>    \n   </extension>    \n  </extensions>    \n  <!--当项目没有规定目标（Maven2 叫做阶段）时的默认值-->    \n  <defaultGoal/>    \n  <!--这个元素描述了项目相关的所有资源路径列表，例如和项目相关的属性文件，这些资源被包含在最终的打包文件里。-->    \n  <resources>    \n   <!--这个元素描述了项目相关或测试相关的所有资源路径-->    \n   <resource>    \n    <!-- 描述了资源的目标路径。该路径相对target/classes目录（例如${project.build.outputDirectory}）。举个例 子，如果你想资源在特定的包里(org.apache.maven.messages)，你就必须该元素设置为org/apache/maven /messages。然而，如果你只是想把资源放到源码目录结构里，就不需要该配置。-->    \n    <targetPath/>    \n    <!--是否使用参数值代替参数名。参数值取自properties元素或者文件里配置的属性，文件在filters元素里列出。-->    \n    <filtering/>    \n    <!--描述存放资源的目录，该路径相对POM路径-->    \n    <directory/>    \n    <!--包含的模式列表，例如**/*.xml.-->    \n    <includes/>    \n    <!--排除的模式列表，例如**/*.xml-->    \n    <excludes/>    \n   </resource>    \n  </resources>    \n  <!--这个元素描述了单元测试相关的所有资源路径，例如和单元测试相关的属性文件。-->    \n  <testResources>    \n   <!--这个元素描述了测试相关的所有资源路径，参见build/resources/resource元素的说明-->    \n   <testResource>    \n    <targetPath/><filtering/><directory/><includes/><excludes/>    \n   </testResource>    \n  </testResources>    \n  <!--构建产生的所有文件存放的目录-->    \n  <directory/>    \n  <!--产生的构件的文件名，默认值是${artifactId}-${version}。-->    \n  <finalName/>    \n  <!--当filtering开关打开时，使用到的过滤器属性文件列表-->    \n  <filters/>    \n  <!--子项目可以引用的默认插件信息。该插件配置项直到被引用时才会被解析或绑定到生命周期。给定插件的任何本地配置都会覆盖这里的配置-->    \n  <pluginManagement>    \n   <!--使用的插件列表 。-->    \n   <plugins>    \n    <!--plugin元素包含描述插件所需要的信息。-->    \n    <plugin>    \n     <!--插件在仓库里的group ID-->    \n     <groupId/>    \n     <!--插件在仓库里的artifact ID-->    \n     <artifactId/>    \n     <!--被使用的插件的版本（或版本范围）-->    \n     <version/>    \n     <!--是否从该插件下载Maven扩展（例如打包和类型处理器），由于性能原因，只有在真需要下载时，该元素才被设置成enabled。-->    \n     <extensions/>    \n     <!--在构建生命周期中执行一组目标的配置。每个目标可能有不同的配置。-->    \n     <executions>    \n      <!--execution元素包含了插件执行需要的信息-->    \n      <execution>    \n       <!--执行目标的标识符，用于标识构建过程中的目标，或者匹配继承过程中需要合并的执行目标-->    \n       <id/>    \n       <!--绑定了目标的构建生命周期阶段，如果省略，目标会被绑定到源数据里配置的默认阶段-->    \n       <phase/>    \n       <!--配置的执行目标-->    \n       <goals/>    \n       <!--配置是否被传播到子POM-->    \n       <inherited/>    \n       <!--作为DOM对象的配置-->    \n       <configuration/>    \n      </execution>    \n     </executions>    \n     <!--项目引入插件所需要的额外依赖-->    \n     <dependencies>    \n      <!--参见dependencies/dependency元素-->    \n      <dependency>    \n       ......    \n      </dependency>    \n     </dependencies>         \n     <!--任何配置是否被传播到子项目-->    \n     <inherited/>    \n     <!--作为DOM对象的配置-->    \n     <configuration/>    \n    </plugin>    \n   </plugins>    \n  </pluginManagement>    \n  <!--使用的插件列表-->    \n  <plugins>    \n   <!--参见build/pluginManagement/plugins/plugin元素-->    \n   <plugin>    \n    <groupId/><artifactId/><version/><extensions/>    \n    <executions>    \n     <execution>    \n      <id/><phase/><goals/><inherited/><configuration/>    \n     </execution>    \n    </executions>    \n    <dependencies>    \n     <!--参见dependencies/dependency元素-->    \n     <dependency>    \n      ......    \n     </dependency>    \n    </dependencies>    \n    <goals/><inherited/><configuration/>    \n   </plugin>    \n  </plugins>    \n </build>\n ```\n\nreporting\n该元素描述使用报表插件产生报表的规范。当用户执行“mvn site”，这些报表就会运行。 在页面导航栏能看到所有报表的链接。\n\n```\n<reporting>    \n  <!--true，则，网站不包括默认的报表。这包括“项目信息”菜单中的报表。-->    \n  <excludeDefaults/>    \n  <!--所有产生的报表存放到哪里。默认值是${project.build.directory}/site。-->    \n  <outputDirectory/>    \n  <!--使用的报表插件和他们的配置。-->    \n  <plugins>    \n   <!--plugin元素包含描述报表插件需要的信息-->    \n   <plugin>    \n    <!--报表插件在仓库里的group ID-->    \n    <groupId/>    \n    <!--报表插件在仓库里的artifact ID-->    \n    <artifactId/>    \n    <!--被使用的报表插件的版本（或版本范围）-->    \n    <version/>    \n    <!--任何配置是否被传播到子项目-->    \n    <inherited/>    \n    <!--报表插件的配置-->    \n    <configuration/>    \n    <!--一组报表的多重规范，每个规范可能有不同的配置。一个规范（报表集）对应一个执行目标 。例如，有1，2，3，4，5，6，7，8，9个报表。1，2，5构成A报表集，对应一个执行目标。2，5，8构成B报表集，对应另一个执行目标-->    \n    <reportSets>    \n     <!--表示报表的一个集合，以及产生该集合的配置-->    \n     <reportSet>    \n      <!--报表集合的唯一标识符，POM继承时用到-->    \n      <id/>    \n      <!--产生报表集合时，被使用的报表的配置-->    \n      <configuration/>    \n      <!--配置是否被继承到子POMs-->    \n      <inherited/>    \n      <!--这个集合里使用到哪些报表-->    \n      <reports/>    \n     </reportSet>    \n    </reportSets>    \n   </plugin>    \n  </plugins>    \n </reporting>\n ```\n\n### 项目信息\nname：给用户提供更为友好的项目名\ndescription：项目描述，maven文档中保存\nurl：主页的URL，maven文档中保存\ninceptionYear：项目创建年份，4位数字。当产生版权信息时需要使用这个值\nlicenses：该元素描述了项目所有License列表。 应该只列出该项目的license列表，不要列出依赖项目的 license列表。如果列出多个license，用户可以选择它们中的一个而不是接受所有license。（如下）\n\n```\n<license>    \n    <!--license用于法律上的名称-->    \n    <name>...</name>     \n    <!--官方的license正文页面的URL-->    \n    <url>....</url>\n    <!--项目分发的主要方式：repo，可以从Maven库下载 manual， 用户必须手动下载和安装依赖-->    \n    <distribution>repo</distribution>     \n    <!--关于license的补充信息-->    \n    <comments>....</comments>     \n</license> \n```\norganization：1.name 组织名 2.url 组织主页url\ndevelopers：项目开发人员列表（如下）\ncontributors：项目其他贡献者列表，同developers\n\n```\n<developers>  \n    <!--某个开发者信息-->\n    <developer>  \n        <!--开发者的唯一标识符-->\n        <id>....</id>  \n        <!--开发者的全名-->\n        <name>...</name>  \n        <!--开发者的email-->\n        <email>...</email>  \n        <!--开发者的主页-->\n        <url>...<url/>\n        <!--开发者在项目中的角色-->\n        <roles>  \n            <role>Java Dev</role>  \n            <role>Web UI</role>  \n        </roles> \n        <!--开发者所属组织--> \n        <organization>sun</organization>  \n        <!--开发者所属组织的URL-->\n        <organizationUrl>...</organizationUrl>  \n        <!--开发者属性，如即时消息如何处理等-->\n        <properties>\n            <!-- 和主标签中的properties一样，可以随意定义子标签 -->\n        </properties> \n        <!--开发者所在时区， -11到12范围内的整数。--> \n        <timezone>-5</timezone>  \n    </developer>  \n</developers>  \n```\n### 环境设置\nissueManagement\n目的问题管理系统(Bugzilla, Jira, Scarab)的名称和URL\n\n```\n<issueManagement>\n    <system>Bugzilla</system>\n    <url>http://127.0.0.1/bugzilla/</url>\n</issueManagement>\n```\nsystem：系统类型\nurl：路径\nciManagement\n项目的持续集成信息\n\n```\n  <ciManagement>\n    <system>continuum</system>\n    <url>http://127.0.0.1:8080/continuum</url>\n    <notifiers>\n      <notifier>\n        <type>mail</type>\n        <sendOnError>true</sendOnError>\n        <sendOnFailure>true</sendOnFailure>\n        <sendOnSuccess>false</sendOnSuccess>\n        <sendOnWarning>false</sendOnWarning>\n        <address>continuum@127.0.0.1</address>\n        <configuration></configuration>\n      </notifier>\n    </notifiers>\n  </ciManagement>\n```\n\nsystem：持续集成系统的名字\nurl：持续集成系统的URL\nnotifiers：构建完成时，需要通知的开发者/用户的配置项。包括被通知者信息和通知条件（错误，失败，成功，警告）\ntype：通知方式\nsendOnError：错误时是否通知\nsendOnFailure：失败时是否通知\nsendOnSuccess：成功时是否通知\nsendOnWarning：警告时是否通知\naddress：通知发送到的地址\nconfiguration：扩展项\nmailingLists\n项目相关邮件列表信息\n\n```\n  <mailingLists>\n    <mailingList>\n      <name>User List</name>\n      <subscribe>user-subscribe@127.0.0.1</subscribe>\n      <unsubscribe>user-unsubscribe@127.0.0.1</unsubscribe>\n      <post>user@127.0.0.1</post>\n      <archive>http://127.0.0.1/user/</archive>\n      <otherArchives>\n        <otherArchive>http://base.google.com/base/1/127.0.0.1</otherArchive>\n      </otherArchives>\n    </mailingList>\n    .....\n  </mailingLists>\n  ```\nsubscribe, unsubscribe: 订阅邮件（取消订阅）的地址或链接，如果是邮件地址，创建文档时，mailto: 链接会被自动创建\narchive：浏览邮件信息的URL\npost：接收邮件的地址\nscm\n允许你配置你的代码库，供Maven web站点和其它插件使用\n\n```\n  <scm>\n    <connection>scm:svn:http://127.0.0.1/svn/my-project</connection>\n    <developerConnection>scm:svn:https://127.0.0.1/svn/my-project</developerConnection>\n    <tag>HEAD</tag>\n    <url>http://127.0.0.1/websvn/my-project</url>\n  </scm>\n ```\nconnection, developerConnection：这两个表示我们如何连接到maven的版本库。connection只提供读，developerConnection将提供写的请求\n写法如：scm:[provider]:[provider_specific]\n如果连接到CVS仓库，可以配置如下：scm:cvs:pserver:127.0.0.1:/cvs/root:my-project\ntag：项目标签，默认HEAD\nurl：共有仓库路径\nprerequisites\n项目构建的前提\n\n```\n<prerequisites>\n    <maven>2.0.6</maven>\n</prerequisites>\n```\nrepositories,pluginRepositories\n依赖和扩展的远程仓库列表，同上篇文章，setting.xml配置中介绍的。\n\n```\n  <repositories>\n    <repository>\n      <releases>\n        <enabled>false</enabled>\n        <updatePolicy>always</updatePolicy>\n        <checksumPolicy>warn</checksumPolicy>\n      </releases>\n      <snapshots>\n        <enabled>true</enabled>\n        <updatePolicy>never</updatePolicy>\n        <checksumPolicy>fail</checksumPolicy>\n      </snapshots>\n      <id>codehausSnapshots</id>\n      <name>Codehaus Snapshots</name>\n      <url>http://snapshots.maven.codehaus.org/maven2</url>\n      <layout>default</layout>\n    </repository>\n  </repositories>\n  <pluginRepositories>\n    ...\n  </pluginRepositories>\n```\nreleases, snapshots:这是各种构件的策略，release或者snapshot。这两个集合，POM就可以根据独立仓库任意类型的依赖改变策略。如：一个人可能只激活下载snapshot用来开发。\nenable：true或者false，决定仓库是否对于各自的类型激活(release 或者 snapshot)。\nupdatePolicy: 这个元素决定更新频率。maven将比较本地pom的时间戳（存储在仓库的maven数据文件中）和远程的. 有以下选择: always, daily (默认), interval:X (x是代表分钟的整型) ， never.\nchecksumPolicy：当Maven向仓库部署文件的时候，它也部署了相应的校验和文件。可选的为：ignore，fail，warn，或者不正确的校验和。\nlayout：在上面描述仓库的时候，提到他们有统一的布局。Maven 2有它仓库默认布局。然而，Maven 1.x有不同布局。使用这个元素来表明它是default还是legacy。\ndistributionManagement\n它管理的分布在整个构建过程生成的工件和支持文件\n\n```\n  <distributionManagement>\n    ...\n    <downloadUrl>http://mojo.codehaus.org/my-project</downloadUrl>\n    <status>deployed</status>\n  </distributionManagement>\n ```\ndownloadUrl: 其他pom可以通过此url的仓库抓取组件\nstatus：给出该构件在远程仓库的状态\nnone: 默认\nconverted: 将被早期Maven 2 POM转换过来\npartner: 这个项目会从合作者仓库同步过来\ndeployed: 从Maven 2或3实例部署\nverified: 被核实时正确的和最终的\nRepository\n指定Maven pom从远程下载控件到当前项目的位置和方式，如果snapshotRepository没有被定义则使用repository相关的配置\n\n```\n  <distributionManagement>\n    <repository>\n      <uniqueVersion>false</uniqueVersion>\n      <id>corp1</id>\n      <name>Corporate Repository</name>\n      <url>scp://repo/maven2</url>\n      <layout>default</layout>\n    </repository>\n    <snapshotRepository>\n      <uniqueVersion>true</uniqueVersion>\n      <id>propSnap</id>\n      <name>Propellors Snapshots</name>\n      <url>sftp://propellers.net/maven</url>\n      <layout>legacy</layout>\n    </snapshotRepository>\n    ...\n  </distributionManagement>\n  ```\nid, name：仓库的唯一标识\nuniqueVersion：true或false，指明控件部署的时候是否获取独立的版本号。\nurl：repository元素的核心。指定位置和部署协议发布控件到仓库。\nlayout：布局，default或legacy\nSite Distribution\n多分布存储库,distributionManagement负责定义如何部署项目的网站和文档。\n\n```\n  <distributionManagement>\n    ...\n    <site>\n      <id>mojo.website</id>\n      <name>Mojo Website</name>\n      <url>scp://beaver.codehaus.org/home/projects/mojo/public_html/</url>\n    </site>\n    ...\n  </distributionManagement>\n ```\nid, name, url: 这些元素与distributionManagement repository中的相同\nRelocation\n重新部署-项目不是静态的，是活的。他们需要被搬到更合适的地方。如：当你的下个成功的开源项目移到Apache下，重命名为org.apache:my-project:1.0 对你项目更有好处。\n\n```\n  <distributionManagement>\n    ...\n    <relocation>\n      <groupId>org.apache</groupId>\n      <artifactId>my-project</artifactId>\n      <version>1.0</version>\n      <message>We have moved the Project under Apache</message>\n    </relocation>\n    ...\n  </distributionManagement>\n  ```\nprofiles\nprofile可以让我们定义一系列的配置信息（插件等），然后指定其激活条件\n","slug":"pom","published":1,"date":"2021-01-26T10:03:56.637Z","updated":"2021-01-26T10:03:56.639Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkdu2m9v000ky74tlefajg39","content":"<ul>\n<li><a id=\"more\"></a> \n</li>\n</ul>\n<h3 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h3><p>pom中节点如下分布</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; </div><div class=\"line\"> xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; </div><div class=\"line\"> xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</div><div class=\"line\">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</div><div class=\"line\">    &lt;!-- 基本配置 --&gt;</div><div class=\"line\">    &lt;groupId&gt;...&lt;/groupId&gt;</div><div class=\"line\">    &lt;artifactId&gt;...&lt;/artifactId&gt;</div><div class=\"line\">    &lt;version&gt;...&lt;/version&gt;</div><div class=\"line\">    &lt;packaging&gt;...&lt;/packaging&gt;</div><div class=\"line\">    &lt;!-- 依赖配置 --&gt;</div><div class=\"line\">    &lt;dependencies&gt;...&lt;/dependencies&gt;</div><div class=\"line\">    &lt;parent&gt;...&lt;/parent&gt;</div><div class=\"line\">    &lt;dependencyManagement&gt;...&lt;/dependencyManagement&gt;</div><div class=\"line\">    &lt;modules&gt;...&lt;/modules&gt;</div><div class=\"line\">    &lt;properties&gt;...&lt;/properties&gt;</div><div class=\"line\">    &lt;!-- 构建配置 --&gt;</div><div class=\"line\">    &lt;build&gt;...&lt;/build&gt;</div><div class=\"line\">    &lt;reporting&gt;...&lt;/reporting&gt;</div><div class=\"line\">    &lt;!-- 项目信息 --&gt;</div><div class=\"line\">    &lt;name&gt;...&lt;/name&gt;</div><div class=\"line\">    &lt;description&gt;...&lt;/description&gt;</div><div class=\"line\">    &lt;url&gt;...&lt;/url&gt;</div><div class=\"line\">    &lt;inceptionYear&gt;...&lt;/inceptionYear&gt;</div><div class=\"line\">    &lt;licenses&gt;...&lt;/licenses&gt;</div><div class=\"line\">    &lt;organization&gt;...&lt;/organization&gt;</div><div class=\"line\">    &lt;developers&gt;...&lt;/developers&gt;</div><div class=\"line\">    &lt;contributors&gt;...&lt;/contributors&gt;</div><div class=\"line\">    &lt;!-- 环境设置 --&gt;</div><div class=\"line\">    &lt;issueManagement&gt;...&lt;/issueManagement&gt;</div><div class=\"line\">    &lt;ciManagement&gt;...&lt;/ciManagement&gt;</div><div class=\"line\">    &lt;mailingLists&gt;...&lt;/mailingLists&gt;</div><div class=\"line\">    &lt;scm&gt;...&lt;/scm&gt;</div><div class=\"line\">    &lt;prerequisites&gt;...&lt;/prerequisites&gt;</div><div class=\"line\">    &lt;repositories&gt;...&lt;/repositories&gt;</div><div class=\"line\">    &lt;pluginRepositories&gt;...&lt;/pluginRepositories&gt;</div><div class=\"line\">    &lt;distributionManagement&gt;...&lt;/distributionManagement&gt;</div><div class=\"line\">    &lt;profiles&gt;...&lt;/profiles&gt;</div><div class=\"line\">&lt;/project&gt;</div></pre></td></tr></table></figure>\n<h3 id=\"基本配置\"><a href=\"#基本配置\" class=\"headerlink\" title=\"基本配置\"></a>基本配置</h3><p>modelVersion：pom模型版本，maven2和3只能为4.0.0<br>groupId：组ID，maven用于定位<br>artifactId：在组中的唯一ID用于定位<br>version：项目版本<br>packaging：项目打包方式，有以下值：pom, jar, maven-plugin, ejb, war, ear, rar, par</p>\n<h3 id=\"依赖配置\"><a href=\"#依赖配置\" class=\"headerlink\" title=\"依赖配置\"></a>依赖配置</h3><p>parent<br>用于确定父项目的坐标。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;parent&gt;</div><div class=\"line\">    &lt;groupId&gt;com.learnPro&lt;/groupId&gt;</div><div class=\"line\">    &lt;artifactId&gt;SIP-parent&lt;/artifactId&gt;</div><div class=\"line\">    &lt;relativePath&gt;&lt;/relativePath&gt;</div><div class=\"line\">    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</div><div class=\"line\">&lt;/parent&gt;</div></pre></td></tr></table></figure>\n<p>groupId：父项目的构件标识符<br>artifactId：父项目的唯一标识符<br>relativePath：Maven首先在当前项目的找父项目的pom，然后在文件系统的这个位置（relativePath），然后在本地仓库，再在远程仓库找。<br>version：父项目的版本<br>modules<br>有些maven项目会做成多模块的，这个标签用于指定当前项目所包含的所有模块。之后对这个项目进行的maven操作，会让所有子模块也进行相同操作。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;modules&gt;</div><div class=\"line\">   &lt;module&gt;com-a&lt;/&gt;</div><div class=\"line\">   &lt;module&gt;com-b&lt;/&gt;</div><div class=\"line\">   &lt;module&gt;com-c&lt;/&gt;</div><div class=\"line\">&lt;/&gt;</div></pre></td></tr></table></figure>\n<p>properties<br>用于定义pom常量</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;properties&gt;</div><div class=\"line\">    &lt;java.version&gt;1.7&lt;/java.version&gt;</div><div class=\"line\">&lt;/properties&gt;</div></pre></td></tr></table></figure>\n<p>上面这个常量可以在pom文件的任意地方通过${java.version}来引用</p>\n<p>dependencies<br>项目相关依赖配置（将在之后详细讲解）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;dependencies&gt;</div><div class=\"line\">    &lt;dependency&gt;</div><div class=\"line\">            &lt;groupId&gt;junit&lt;/groupId&gt;</div><div class=\"line\">            &lt;artifactId&gt;junit&lt;/artifactId&gt;</div><div class=\"line\">            &lt;version&gt;4.12&lt;/version&gt;</div><div class=\"line\">    &lt;/dependency&gt;</div><div class=\"line\">&lt;/dependencies&gt;</div></pre></td></tr></table></figure>\n<p>这边依赖和中央仓库中的一致，就可以引入对应的jar</p>\n<p>dependencyManagement<br>在父模块中定义后，子模块就会直接继承相对应的依赖，配置写法同dependencies</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;dependencyManagement&gt;</div><div class=\"line\">    &lt;dependencies&gt;</div><div class=\"line\">    .....</div><div class=\"line\">    &lt;/dependencies&gt;</div><div class=\"line\">&lt;/dependencyManagement&gt;</div></pre></td></tr></table></figure>\n<h3 id=\"构建配置\"><a href=\"#构建配置\" class=\"headerlink\" title=\"构建配置\"></a>构建配置</h3><p>build<br>用于配置项目构建相关信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;build&gt;    </div><div class=\"line\">    &lt;!--该元素设置了项目源码目录，当构建项目的时候，构建系统会编译目录里的源码。该路径是相对于pom.xml的相对路径。--&gt;    </div><div class=\"line\">    &lt;sourceDirectory/&gt;    </div><div class=\"line\">    &lt;!--该元素设置了项目脚本源码目录，该目录和源码目录不同：绝大多数情况下，该目录下的内容 会被拷贝到输出目录(因为脚本是被解释的，而不是被编译的)。--&gt;    </div><div class=\"line\">  &lt;scriptSourceDirectory/&gt;    </div><div class=\"line\">  &lt;!--该元素设置了项目单元测试使用的源码目录，当测试项目的时候，构建系统会编译目录里的源码。该路径是相对于pom.xml的相对路径。--&gt;    </div><div class=\"line\">  &lt;testSourceDirectory/&gt;    </div><div class=\"line\">  &lt;!--被编译过的应用程序class文件存放的目录。--&gt;    </div><div class=\"line\">  &lt;outputDirectory/&gt;    </div><div class=\"line\">  &lt;!--被编译过的测试class文件存放的目录。--&gt;    </div><div class=\"line\">  &lt;testOutputDirectory/&gt;    </div><div class=\"line\">  &lt;!--使用来自该项目的一系列构建扩展--&gt;    </div><div class=\"line\">  &lt;extensions&gt;    </div><div class=\"line\">   &lt;!--描述使用到的构建扩展。--&gt;    </div><div class=\"line\">   &lt;extension&gt;    </div><div class=\"line\">    &lt;!--构建扩展的groupId--&gt;    </div><div class=\"line\">    &lt;groupId/&gt;    </div><div class=\"line\">    &lt;!--构建扩展的artifactId--&gt;    </div><div class=\"line\">    &lt;artifactId/&gt;    </div><div class=\"line\">    &lt;!--构建扩展的版本--&gt;    </div><div class=\"line\">    &lt;version/&gt;    </div><div class=\"line\">   &lt;/extension&gt;    </div><div class=\"line\">  &lt;/extensions&gt;    </div><div class=\"line\">  &lt;!--当项目没有规定目标（Maven2 叫做阶段）时的默认值--&gt;    </div><div class=\"line\">  &lt;defaultGoal/&gt;    </div><div class=\"line\">  &lt;!--这个元素描述了项目相关的所有资源路径列表，例如和项目相关的属性文件，这些资源被包含在最终的打包文件里。--&gt;    </div><div class=\"line\">  &lt;resources&gt;    </div><div class=\"line\">   &lt;!--这个元素描述了项目相关或测试相关的所有资源路径--&gt;    </div><div class=\"line\">   &lt;resource&gt;    </div><div class=\"line\">    &lt;!-- 描述了资源的目标路径。该路径相对target/classes目录（例如$&#123;project.build.outputDirectory&#125;）。举个例 子，如果你想资源在特定的包里(org.apache.maven.messages)，你就必须该元素设置为org/apache/maven /messages。然而，如果你只是想把资源放到源码目录结构里，就不需要该配置。--&gt;    </div><div class=\"line\">    &lt;targetPath/&gt;    </div><div class=\"line\">    &lt;!--是否使用参数值代替参数名。参数值取自properties元素或者文件里配置的属性，文件在filters元素里列出。--&gt;    </div><div class=\"line\">    &lt;filtering/&gt;    </div><div class=\"line\">    &lt;!--描述存放资源的目录，该路径相对POM路径--&gt;    </div><div class=\"line\">    &lt;directory/&gt;    </div><div class=\"line\">    &lt;!--包含的模式列表，例如**/*.xml.--&gt;    </div><div class=\"line\">    &lt;includes/&gt;    </div><div class=\"line\">    &lt;!--排除的模式列表，例如**/*.xml--&gt;    </div><div class=\"line\">    &lt;excludes/&gt;    </div><div class=\"line\">   &lt;/resource&gt;    </div><div class=\"line\">  &lt;/resources&gt;    </div><div class=\"line\">  &lt;!--这个元素描述了单元测试相关的所有资源路径，例如和单元测试相关的属性文件。--&gt;    </div><div class=\"line\">  &lt;testResources&gt;    </div><div class=\"line\">   &lt;!--这个元素描述了测试相关的所有资源路径，参见build/resources/resource元素的说明--&gt;    </div><div class=\"line\">   &lt;testResource&gt;    </div><div class=\"line\">    &lt;targetPath/&gt;&lt;filtering/&gt;&lt;directory/&gt;&lt;includes/&gt;&lt;excludes/&gt;    </div><div class=\"line\">   &lt;/testResource&gt;    </div><div class=\"line\">  &lt;/testResources&gt;    </div><div class=\"line\">  &lt;!--构建产生的所有文件存放的目录--&gt;    </div><div class=\"line\">  &lt;directory/&gt;    </div><div class=\"line\">  &lt;!--产生的构件的文件名，默认值是$&#123;artifactId&#125;-$&#123;version&#125;。--&gt;    </div><div class=\"line\">  &lt;finalName/&gt;    </div><div class=\"line\">  &lt;!--当filtering开关打开时，使用到的过滤器属性文件列表--&gt;    </div><div class=\"line\">  &lt;filters/&gt;    </div><div class=\"line\">  &lt;!--子项目可以引用的默认插件信息。该插件配置项直到被引用时才会被解析或绑定到生命周期。给定插件的任何本地配置都会覆盖这里的配置--&gt;    </div><div class=\"line\">  &lt;pluginManagement&gt;    </div><div class=\"line\">   &lt;!--使用的插件列表 。--&gt;    </div><div class=\"line\">   &lt;plugins&gt;    </div><div class=\"line\">    &lt;!--plugin元素包含描述插件所需要的信息。--&gt;    </div><div class=\"line\">    &lt;plugin&gt;    </div><div class=\"line\">     &lt;!--插件在仓库里的group ID--&gt;    </div><div class=\"line\">     &lt;groupId/&gt;    </div><div class=\"line\">     &lt;!--插件在仓库里的artifact ID--&gt;    </div><div class=\"line\">     &lt;artifactId/&gt;    </div><div class=\"line\">     &lt;!--被使用的插件的版本（或版本范围）--&gt;    </div><div class=\"line\">     &lt;version/&gt;    </div><div class=\"line\">     &lt;!--是否从该插件下载Maven扩展（例如打包和类型处理器），由于性能原因，只有在真需要下载时，该元素才被设置成enabled。--&gt;    </div><div class=\"line\">     &lt;extensions/&gt;    </div><div class=\"line\">     &lt;!--在构建生命周期中执行一组目标的配置。每个目标可能有不同的配置。--&gt;    </div><div class=\"line\">     &lt;executions&gt;    </div><div class=\"line\">      &lt;!--execution元素包含了插件执行需要的信息--&gt;    </div><div class=\"line\">      &lt;execution&gt;    </div><div class=\"line\">       &lt;!--执行目标的标识符，用于标识构建过程中的目标，或者匹配继承过程中需要合并的执行目标--&gt;    </div><div class=\"line\">       &lt;id/&gt;    </div><div class=\"line\">       &lt;!--绑定了目标的构建生命周期阶段，如果省略，目标会被绑定到源数据里配置的默认阶段--&gt;    </div><div class=\"line\">       &lt;phase/&gt;    </div><div class=\"line\">       &lt;!--配置的执行目标--&gt;    </div><div class=\"line\">       &lt;goals/&gt;    </div><div class=\"line\">       &lt;!--配置是否被传播到子POM--&gt;    </div><div class=\"line\">       &lt;inherited/&gt;    </div><div class=\"line\">       &lt;!--作为DOM对象的配置--&gt;    </div><div class=\"line\">       &lt;configuration/&gt;    </div><div class=\"line\">      &lt;/execution&gt;    </div><div class=\"line\">     &lt;/executions&gt;    </div><div class=\"line\">     &lt;!--项目引入插件所需要的额外依赖--&gt;    </div><div class=\"line\">     &lt;dependencies&gt;    </div><div class=\"line\">      &lt;!--参见dependencies/dependency元素--&gt;    </div><div class=\"line\">      &lt;dependency&gt;    </div><div class=\"line\">       ......    </div><div class=\"line\">      &lt;/dependency&gt;    </div><div class=\"line\">     &lt;/dependencies&gt;         </div><div class=\"line\">     &lt;!--任何配置是否被传播到子项目--&gt;    </div><div class=\"line\">     &lt;inherited/&gt;    </div><div class=\"line\">     &lt;!--作为DOM对象的配置--&gt;    </div><div class=\"line\">     &lt;configuration/&gt;    </div><div class=\"line\">    &lt;/plugin&gt;    </div><div class=\"line\">   &lt;/plugins&gt;    </div><div class=\"line\">  &lt;/pluginManagement&gt;    </div><div class=\"line\">  &lt;!--使用的插件列表--&gt;    </div><div class=\"line\">  &lt;plugins&gt;    </div><div class=\"line\">   &lt;!--参见build/pluginManagement/plugins/plugin元素--&gt;    </div><div class=\"line\">   &lt;plugin&gt;    </div><div class=\"line\">    &lt;groupId/&gt;&lt;artifactId/&gt;&lt;version/&gt;&lt;extensions/&gt;    </div><div class=\"line\">    &lt;executions&gt;    </div><div class=\"line\">     &lt;execution&gt;    </div><div class=\"line\">      &lt;id/&gt;&lt;phase/&gt;&lt;goals/&gt;&lt;inherited/&gt;&lt;configuration/&gt;    </div><div class=\"line\">     &lt;/execution&gt;    </div><div class=\"line\">    &lt;/executions&gt;    </div><div class=\"line\">    &lt;dependencies&gt;    </div><div class=\"line\">     &lt;!--参见dependencies/dependency元素--&gt;    </div><div class=\"line\">     &lt;dependency&gt;    </div><div class=\"line\">      ......    </div><div class=\"line\">     &lt;/dependency&gt;    </div><div class=\"line\">    &lt;/dependencies&gt;    </div><div class=\"line\">    &lt;goals/&gt;&lt;inherited/&gt;&lt;configuration/&gt;    </div><div class=\"line\">   &lt;/plugin&gt;    </div><div class=\"line\">  &lt;/plugins&gt;    </div><div class=\"line\"> &lt;/build&gt;</div></pre></td></tr></table></figure>\n<p>reporting<br>该元素描述使用报表插件产生报表的规范。当用户执行“mvn site”，这些报表就会运行。 在页面导航栏能看到所有报表的链接。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;reporting&gt;    </div><div class=\"line\">  &lt;!--true，则，网站不包括默认的报表。这包括“项目信息”菜单中的报表。--&gt;    </div><div class=\"line\">  &lt;excludeDefaults/&gt;    </div><div class=\"line\">  &lt;!--所有产生的报表存放到哪里。默认值是$&#123;project.build.directory&#125;/site。--&gt;    </div><div class=\"line\">  &lt;outputDirectory/&gt;    </div><div class=\"line\">  &lt;!--使用的报表插件和他们的配置。--&gt;    </div><div class=\"line\">  &lt;plugins&gt;    </div><div class=\"line\">   &lt;!--plugin元素包含描述报表插件需要的信息--&gt;    </div><div class=\"line\">   &lt;plugin&gt;    </div><div class=\"line\">    &lt;!--报表插件在仓库里的group ID--&gt;    </div><div class=\"line\">    &lt;groupId/&gt;    </div><div class=\"line\">    &lt;!--报表插件在仓库里的artifact ID--&gt;    </div><div class=\"line\">    &lt;artifactId/&gt;    </div><div class=\"line\">    &lt;!--被使用的报表插件的版本（或版本范围）--&gt;    </div><div class=\"line\">    &lt;version/&gt;    </div><div class=\"line\">    &lt;!--任何配置是否被传播到子项目--&gt;    </div><div class=\"line\">    &lt;inherited/&gt;    </div><div class=\"line\">    &lt;!--报表插件的配置--&gt;    </div><div class=\"line\">    &lt;configuration/&gt;    </div><div class=\"line\">    &lt;!--一组报表的多重规范，每个规范可能有不同的配置。一个规范（报表集）对应一个执行目标 。例如，有1，2，3，4，5，6，7，8，9个报表。1，2，5构成A报表集，对应一个执行目标。2，5，8构成B报表集，对应另一个执行目标--&gt;    </div><div class=\"line\">    &lt;reportSets&gt;    </div><div class=\"line\">     &lt;!--表示报表的一个集合，以及产生该集合的配置--&gt;    </div><div class=\"line\">     &lt;reportSet&gt;    </div><div class=\"line\">      &lt;!--报表集合的唯一标识符，POM继承时用到--&gt;    </div><div class=\"line\">      &lt;id/&gt;    </div><div class=\"line\">      &lt;!--产生报表集合时，被使用的报表的配置--&gt;    </div><div class=\"line\">      &lt;configuration/&gt;    </div><div class=\"line\">      &lt;!--配置是否被继承到子POMs--&gt;    </div><div class=\"line\">      &lt;inherited/&gt;    </div><div class=\"line\">      &lt;!--这个集合里使用到哪些报表--&gt;    </div><div class=\"line\">      &lt;reports/&gt;    </div><div class=\"line\">     &lt;/reportSet&gt;    </div><div class=\"line\">    &lt;/reportSets&gt;    </div><div class=\"line\">   &lt;/plugin&gt;    </div><div class=\"line\">  &lt;/plugins&gt;    </div><div class=\"line\"> &lt;/reporting&gt;</div></pre></td></tr></table></figure>\n<h3 id=\"项目信息\"><a href=\"#项目信息\" class=\"headerlink\" title=\"项目信息\"></a>项目信息</h3><p>name：给用户提供更为友好的项目名<br>description：项目描述，maven文档中保存<br>url：主页的URL，maven文档中保存<br>inceptionYear：项目创建年份，4位数字。当产生版权信息时需要使用这个值<br>licenses：该元素描述了项目所有License列表。 应该只列出该项目的license列表，不要列出依赖项目的 license列表。如果列出多个license，用户可以选择它们中的一个而不是接受所有license。（如下）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;license&gt;    </div><div class=\"line\">    &lt;!--license用于法律上的名称--&gt;    </div><div class=\"line\">    &lt;name&gt;...&lt;/name&gt;     </div><div class=\"line\">    &lt;!--官方的license正文页面的URL--&gt;    </div><div class=\"line\">    &lt;url&gt;....&lt;/url&gt;</div><div class=\"line\">    &lt;!--项目分发的主要方式：repo，可以从Maven库下载 manual， 用户必须手动下载和安装依赖--&gt;    </div><div class=\"line\">    &lt;distribution&gt;repo&lt;/distribution&gt;     </div><div class=\"line\">    &lt;!--关于license的补充信息--&gt;    </div><div class=\"line\">    &lt;comments&gt;....&lt;/comments&gt;     </div><div class=\"line\">&lt;/license&gt;</div></pre></td></tr></table></figure>\n<p>organization：1.name 组织名 2.url 组织主页url<br>developers：项目开发人员列表（如下）<br>contributors：项目其他贡献者列表，同developers</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;developers&gt;  </div><div class=\"line\">    &lt;!--某个开发者信息--&gt;</div><div class=\"line\">    &lt;developer&gt;  </div><div class=\"line\">        &lt;!--开发者的唯一标识符--&gt;</div><div class=\"line\">        &lt;id&gt;....&lt;/id&gt;  </div><div class=\"line\">        &lt;!--开发者的全名--&gt;</div><div class=\"line\">        &lt;name&gt;...&lt;/name&gt;  </div><div class=\"line\">        &lt;!--开发者的email--&gt;</div><div class=\"line\">        &lt;email&gt;...&lt;/email&gt;  </div><div class=\"line\">        &lt;!--开发者的主页--&gt;</div><div class=\"line\">        &lt;url&gt;...&lt;url/&gt;</div><div class=\"line\">        &lt;!--开发者在项目中的角色--&gt;</div><div class=\"line\">        &lt;roles&gt;  </div><div class=\"line\">            &lt;role&gt;Java Dev&lt;/role&gt;  </div><div class=\"line\">            &lt;role&gt;Web UI&lt;/role&gt;  </div><div class=\"line\">        &lt;/roles&gt; </div><div class=\"line\">        &lt;!--开发者所属组织--&gt; </div><div class=\"line\">        &lt;organization&gt;sun&lt;/organization&gt;  </div><div class=\"line\">        &lt;!--开发者所属组织的URL--&gt;</div><div class=\"line\">        &lt;organizationUrl&gt;...&lt;/organizationUrl&gt;  </div><div class=\"line\">        &lt;!--开发者属性，如即时消息如何处理等--&gt;</div><div class=\"line\">        &lt;properties&gt;</div><div class=\"line\">            &lt;!-- 和主标签中的properties一样，可以随意定义子标签 --&gt;</div><div class=\"line\">        &lt;/properties&gt; </div><div class=\"line\">        &lt;!--开发者所在时区， -11到12范围内的整数。--&gt; </div><div class=\"line\">        &lt;timezone&gt;-5&lt;/timezone&gt;  </div><div class=\"line\">    &lt;/developer&gt;  </div><div class=\"line\">&lt;/developers&gt;</div></pre></td></tr></table></figure>\n<h3 id=\"环境设置\"><a href=\"#环境设置\" class=\"headerlink\" title=\"环境设置\"></a>环境设置</h3><p>issueManagement<br>目的问题管理系统(Bugzilla, Jira, Scarab)的名称和URL</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;issueManagement&gt;</div><div class=\"line\">    &lt;system&gt;Bugzilla&lt;/system&gt;</div><div class=\"line\">    &lt;url&gt;http://127.0.0.1/bugzilla/&lt;/url&gt;</div><div class=\"line\">&lt;/issueManagement&gt;</div></pre></td></tr></table></figure>\n<p>system：系统类型<br>url：路径<br>ciManagement<br>项目的持续集成信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;ciManagement&gt;</div><div class=\"line\">  &lt;system&gt;continuum&lt;/system&gt;</div><div class=\"line\">  &lt;url&gt;http://127.0.0.1:8080/continuum&lt;/url&gt;</div><div class=\"line\">  &lt;notifiers&gt;</div><div class=\"line\">    &lt;notifier&gt;</div><div class=\"line\">      &lt;type&gt;mail&lt;/type&gt;</div><div class=\"line\">      &lt;sendOnError&gt;true&lt;/sendOnError&gt;</div><div class=\"line\">      &lt;sendOnFailure&gt;true&lt;/sendOnFailure&gt;</div><div class=\"line\">      &lt;sendOnSuccess&gt;false&lt;/sendOnSuccess&gt;</div><div class=\"line\">      &lt;sendOnWarning&gt;false&lt;/sendOnWarning&gt;</div><div class=\"line\">      &lt;address&gt;continuum@127.0.0.1&lt;/address&gt;</div><div class=\"line\">      &lt;configuration&gt;&lt;/configuration&gt;</div><div class=\"line\">    &lt;/notifier&gt;</div><div class=\"line\">  &lt;/notifiers&gt;</div><div class=\"line\">&lt;/ciManagement&gt;</div></pre></td></tr></table></figure>\n<p>system：持续集成系统的名字<br>url：持续集成系统的URL<br>notifiers：构建完成时，需要通知的开发者/用户的配置项。包括被通知者信息和通知条件（错误，失败，成功，警告）<br>type：通知方式<br>sendOnError：错误时是否通知<br>sendOnFailure：失败时是否通知<br>sendOnSuccess：成功时是否通知<br>sendOnWarning：警告时是否通知<br>address：通知发送到的地址<br>configuration：扩展项<br>mailingLists<br>项目相关邮件列表信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;mailingLists&gt;</div><div class=\"line\">  &lt;mailingList&gt;</div><div class=\"line\">    &lt;name&gt;User List&lt;/name&gt;</div><div class=\"line\">    &lt;subscribe&gt;user-subscribe@127.0.0.1&lt;/subscribe&gt;</div><div class=\"line\">    &lt;unsubscribe&gt;user-unsubscribe@127.0.0.1&lt;/unsubscribe&gt;</div><div class=\"line\">    &lt;post&gt;user@127.0.0.1&lt;/post&gt;</div><div class=\"line\">    &lt;archive&gt;http://127.0.0.1/user/&lt;/archive&gt;</div><div class=\"line\">    &lt;otherArchives&gt;</div><div class=\"line\">      &lt;otherArchive&gt;http://base.google.com/base/1/127.0.0.1&lt;/otherArchive&gt;</div><div class=\"line\">    &lt;/otherArchives&gt;</div><div class=\"line\">  &lt;/mailingList&gt;</div><div class=\"line\">  .....</div><div class=\"line\">&lt;/mailingLists&gt;</div></pre></td></tr></table></figure>\n<p>subscribe, unsubscribe: 订阅邮件（取消订阅）的地址或链接，如果是邮件地址，创建文档时，mailto: 链接会被自动创建<br>archive：浏览邮件信息的URL<br>post：接收邮件的地址<br>scm<br>允许你配置你的代码库，供Maven web站点和其它插件使用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;scm&gt;</div><div class=\"line\">  &lt;connection&gt;scm:svn:http://127.0.0.1/svn/my-project&lt;/connection&gt;</div><div class=\"line\">  &lt;developerConnection&gt;scm:svn:https://127.0.0.1/svn/my-project&lt;/developerConnection&gt;</div><div class=\"line\">  &lt;tag&gt;HEAD&lt;/tag&gt;</div><div class=\"line\">  &lt;url&gt;http://127.0.0.1/websvn/my-project&lt;/url&gt;</div><div class=\"line\">&lt;/scm&gt;</div></pre></td></tr></table></figure>\n<p>connection, developerConnection：这两个表示我们如何连接到maven的版本库。connection只提供读，developerConnection将提供写的请求<br>写法如：scm:[provider]:[provider_specific]<br>如果连接到CVS仓库，可以配置如下：scm:cvs:pserver:127.0.0.1:/cvs/root:my-project<br>tag：项目标签，默认HEAD<br>url：共有仓库路径<br>prerequisites<br>项目构建的前提</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;prerequisites&gt;</div><div class=\"line\">    &lt;maven&gt;2.0.6&lt;/maven&gt;</div><div class=\"line\">&lt;/prerequisites&gt;</div></pre></td></tr></table></figure>\n<p>repositories,pluginRepositories<br>依赖和扩展的远程仓库列表，同上篇文章，setting.xml配置中介绍的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;repositories&gt;</div><div class=\"line\">  &lt;repository&gt;</div><div class=\"line\">    &lt;releases&gt;</div><div class=\"line\">      &lt;enabled&gt;false&lt;/enabled&gt;</div><div class=\"line\">      &lt;updatePolicy&gt;always&lt;/updatePolicy&gt;</div><div class=\"line\">      &lt;checksumPolicy&gt;warn&lt;/checksumPolicy&gt;</div><div class=\"line\">    &lt;/releases&gt;</div><div class=\"line\">    &lt;snapshots&gt;</div><div class=\"line\">      &lt;enabled&gt;true&lt;/enabled&gt;</div><div class=\"line\">      &lt;updatePolicy&gt;never&lt;/updatePolicy&gt;</div><div class=\"line\">      &lt;checksumPolicy&gt;fail&lt;/checksumPolicy&gt;</div><div class=\"line\">    &lt;/snapshots&gt;</div><div class=\"line\">    &lt;id&gt;codehausSnapshots&lt;/id&gt;</div><div class=\"line\">    &lt;name&gt;Codehaus Snapshots&lt;/name&gt;</div><div class=\"line\">    &lt;url&gt;http://snapshots.maven.codehaus.org/maven2&lt;/url&gt;</div><div class=\"line\">    &lt;layout&gt;default&lt;/layout&gt;</div><div class=\"line\">  &lt;/repository&gt;</div><div class=\"line\">&lt;/repositories&gt;</div><div class=\"line\">&lt;pluginRepositories&gt;</div><div class=\"line\">  ...</div><div class=\"line\">&lt;/pluginRepositories&gt;</div></pre></td></tr></table></figure>\n<p>releases, snapshots:这是各种构件的策略，release或者snapshot。这两个集合，POM就可以根据独立仓库任意类型的依赖改变策略。如：一个人可能只激活下载snapshot用来开发。<br>enable：true或者false，决定仓库是否对于各自的类型激活(release 或者 snapshot)。<br>updatePolicy: 这个元素决定更新频率。maven将比较本地pom的时间戳（存储在仓库的maven数据文件中）和远程的. 有以下选择: always, daily (默认), interval:X (x是代表分钟的整型) ， never.<br>checksumPolicy：当Maven向仓库部署文件的时候，它也部署了相应的校验和文件。可选的为：ignore，fail，warn，或者不正确的校验和。<br>layout：在上面描述仓库的时候，提到他们有统一的布局。Maven 2有它仓库默认布局。然而，Maven 1.x有不同布局。使用这个元素来表明它是default还是legacy。<br>distributionManagement<br>它管理的分布在整个构建过程生成的工件和支持文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;distributionManagement&gt;</div><div class=\"line\">  ...</div><div class=\"line\">  &lt;downloadUrl&gt;http://mojo.codehaus.org/my-project&lt;/downloadUrl&gt;</div><div class=\"line\">  &lt;status&gt;deployed&lt;/status&gt;</div><div class=\"line\">&lt;/distributionManagement&gt;</div></pre></td></tr></table></figure>\n<p>downloadUrl: 其他pom可以通过此url的仓库抓取组件<br>status：给出该构件在远程仓库的状态<br>none: 默认<br>converted: 将被早期Maven 2 POM转换过来<br>partner: 这个项目会从合作者仓库同步过来<br>deployed: 从Maven 2或3实例部署<br>verified: 被核实时正确的和最终的<br>Repository<br>指定Maven pom从远程下载控件到当前项目的位置和方式，如果snapshotRepository没有被定义则使用repository相关的配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;distributionManagement&gt;</div><div class=\"line\">  &lt;repository&gt;</div><div class=\"line\">    &lt;uniqueVersion&gt;false&lt;/uniqueVersion&gt;</div><div class=\"line\">    &lt;id&gt;corp1&lt;/id&gt;</div><div class=\"line\">    &lt;name&gt;Corporate Repository&lt;/name&gt;</div><div class=\"line\">    &lt;url&gt;scp://repo/maven2&lt;/url&gt;</div><div class=\"line\">    &lt;layout&gt;default&lt;/layout&gt;</div><div class=\"line\">  &lt;/repository&gt;</div><div class=\"line\">  &lt;snapshotRepository&gt;</div><div class=\"line\">    &lt;uniqueVersion&gt;true&lt;/uniqueVersion&gt;</div><div class=\"line\">    &lt;id&gt;propSnap&lt;/id&gt;</div><div class=\"line\">    &lt;name&gt;Propellors Snapshots&lt;/name&gt;</div><div class=\"line\">    &lt;url&gt;sftp://propellers.net/maven&lt;/url&gt;</div><div class=\"line\">    &lt;layout&gt;legacy&lt;/layout&gt;</div><div class=\"line\">  &lt;/snapshotRepository&gt;</div><div class=\"line\">  ...</div><div class=\"line\">&lt;/distributionManagement&gt;</div></pre></td></tr></table></figure>\n<p>id, name：仓库的唯一标识<br>uniqueVersion：true或false，指明控件部署的时候是否获取独立的版本号。<br>url：repository元素的核心。指定位置和部署协议发布控件到仓库。<br>layout：布局，default或legacy<br>Site Distribution<br>多分布存储库,distributionManagement负责定义如何部署项目的网站和文档。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;distributionManagement&gt;</div><div class=\"line\">  ...</div><div class=\"line\">  &lt;site&gt;</div><div class=\"line\">    &lt;id&gt;mojo.website&lt;/id&gt;</div><div class=\"line\">    &lt;name&gt;Mojo Website&lt;/name&gt;</div><div class=\"line\">    &lt;url&gt;scp://beaver.codehaus.org/home/projects/mojo/public_html/&lt;/url&gt;</div><div class=\"line\">  &lt;/site&gt;</div><div class=\"line\">  ...</div><div class=\"line\">&lt;/distributionManagement&gt;</div></pre></td></tr></table></figure>\n<p>id, name, url: 这些元素与distributionManagement repository中的相同<br>Relocation<br>重新部署-项目不是静态的，是活的。他们需要被搬到更合适的地方。如：当你的下个成功的开源项目移到Apache下，重命名为org.apache:my-project:1.0 对你项目更有好处。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;distributionManagement&gt;</div><div class=\"line\">  ...</div><div class=\"line\">  &lt;relocation&gt;</div><div class=\"line\">    &lt;groupId&gt;org.apache&lt;/groupId&gt;</div><div class=\"line\">    &lt;artifactId&gt;my-project&lt;/artifactId&gt;</div><div class=\"line\">    &lt;version&gt;1.0&lt;/version&gt;</div><div class=\"line\">    &lt;message&gt;We have moved the Project under Apache&lt;/message&gt;</div><div class=\"line\">  &lt;/relocation&gt;</div><div class=\"line\">  ...</div><div class=\"line\">&lt;/distributionManagement&gt;</div></pre></td></tr></table></figure>\n<p>profiles<br>profile可以让我们定义一系列的配置信息（插件等），然后指定其激活条件</p>\n","site":{"data":{}},"excerpt":"<ul>\n<li>","more":"</li>\n</ul>\n<h3 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h3><p>pom中节点如下分布</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; </div><div class=\"line\"> xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; </div><div class=\"line\"> xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</div><div class=\"line\">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</div><div class=\"line\">    &lt;!-- 基本配置 --&gt;</div><div class=\"line\">    &lt;groupId&gt;...&lt;/groupId&gt;</div><div class=\"line\">    &lt;artifactId&gt;...&lt;/artifactId&gt;</div><div class=\"line\">    &lt;version&gt;...&lt;/version&gt;</div><div class=\"line\">    &lt;packaging&gt;...&lt;/packaging&gt;</div><div class=\"line\">    &lt;!-- 依赖配置 --&gt;</div><div class=\"line\">    &lt;dependencies&gt;...&lt;/dependencies&gt;</div><div class=\"line\">    &lt;parent&gt;...&lt;/parent&gt;</div><div class=\"line\">    &lt;dependencyManagement&gt;...&lt;/dependencyManagement&gt;</div><div class=\"line\">    &lt;modules&gt;...&lt;/modules&gt;</div><div class=\"line\">    &lt;properties&gt;...&lt;/properties&gt;</div><div class=\"line\">    &lt;!-- 构建配置 --&gt;</div><div class=\"line\">    &lt;build&gt;...&lt;/build&gt;</div><div class=\"line\">    &lt;reporting&gt;...&lt;/reporting&gt;</div><div class=\"line\">    &lt;!-- 项目信息 --&gt;</div><div class=\"line\">    &lt;name&gt;...&lt;/name&gt;</div><div class=\"line\">    &lt;description&gt;...&lt;/description&gt;</div><div class=\"line\">    &lt;url&gt;...&lt;/url&gt;</div><div class=\"line\">    &lt;inceptionYear&gt;...&lt;/inceptionYear&gt;</div><div class=\"line\">    &lt;licenses&gt;...&lt;/licenses&gt;</div><div class=\"line\">    &lt;organization&gt;...&lt;/organization&gt;</div><div class=\"line\">    &lt;developers&gt;...&lt;/developers&gt;</div><div class=\"line\">    &lt;contributors&gt;...&lt;/contributors&gt;</div><div class=\"line\">    &lt;!-- 环境设置 --&gt;</div><div class=\"line\">    &lt;issueManagement&gt;...&lt;/issueManagement&gt;</div><div class=\"line\">    &lt;ciManagement&gt;...&lt;/ciManagement&gt;</div><div class=\"line\">    &lt;mailingLists&gt;...&lt;/mailingLists&gt;</div><div class=\"line\">    &lt;scm&gt;...&lt;/scm&gt;</div><div class=\"line\">    &lt;prerequisites&gt;...&lt;/prerequisites&gt;</div><div class=\"line\">    &lt;repositories&gt;...&lt;/repositories&gt;</div><div class=\"line\">    &lt;pluginRepositories&gt;...&lt;/pluginRepositories&gt;</div><div class=\"line\">    &lt;distributionManagement&gt;...&lt;/distributionManagement&gt;</div><div class=\"line\">    &lt;profiles&gt;...&lt;/profiles&gt;</div><div class=\"line\">&lt;/project&gt;</div></pre></td></tr></table></figure>\n<h3 id=\"基本配置\"><a href=\"#基本配置\" class=\"headerlink\" title=\"基本配置\"></a>基本配置</h3><p>modelVersion：pom模型版本，maven2和3只能为4.0.0<br>groupId：组ID，maven用于定位<br>artifactId：在组中的唯一ID用于定位<br>version：项目版本<br>packaging：项目打包方式，有以下值：pom, jar, maven-plugin, ejb, war, ear, rar, par</p>\n<h3 id=\"依赖配置\"><a href=\"#依赖配置\" class=\"headerlink\" title=\"依赖配置\"></a>依赖配置</h3><p>parent<br>用于确定父项目的坐标。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;parent&gt;</div><div class=\"line\">    &lt;groupId&gt;com.learnPro&lt;/groupId&gt;</div><div class=\"line\">    &lt;artifactId&gt;SIP-parent&lt;/artifactId&gt;</div><div class=\"line\">    &lt;relativePath&gt;&lt;/relativePath&gt;</div><div class=\"line\">    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</div><div class=\"line\">&lt;/parent&gt;</div></pre></td></tr></table></figure>\n<p>groupId：父项目的构件标识符<br>artifactId：父项目的唯一标识符<br>relativePath：Maven首先在当前项目的找父项目的pom，然后在文件系统的这个位置（relativePath），然后在本地仓库，再在远程仓库找。<br>version：父项目的版本<br>modules<br>有些maven项目会做成多模块的，这个标签用于指定当前项目所包含的所有模块。之后对这个项目进行的maven操作，会让所有子模块也进行相同操作。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;modules&gt;</div><div class=\"line\">   &lt;module&gt;com-a&lt;/&gt;</div><div class=\"line\">   &lt;module&gt;com-b&lt;/&gt;</div><div class=\"line\">   &lt;module&gt;com-c&lt;/&gt;</div><div class=\"line\">&lt;/&gt;</div></pre></td></tr></table></figure>\n<p>properties<br>用于定义pom常量</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;properties&gt;</div><div class=\"line\">    &lt;java.version&gt;1.7&lt;/java.version&gt;</div><div class=\"line\">&lt;/properties&gt;</div></pre></td></tr></table></figure>\n<p>上面这个常量可以在pom文件的任意地方通过${java.version}来引用</p>\n<p>dependencies<br>项目相关依赖配置（将在之后详细讲解）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;dependencies&gt;</div><div class=\"line\">    &lt;dependency&gt;</div><div class=\"line\">            &lt;groupId&gt;junit&lt;/groupId&gt;</div><div class=\"line\">            &lt;artifactId&gt;junit&lt;/artifactId&gt;</div><div class=\"line\">            &lt;version&gt;4.12&lt;/version&gt;</div><div class=\"line\">    &lt;/dependency&gt;</div><div class=\"line\">&lt;/dependencies&gt;</div></pre></td></tr></table></figure>\n<p>这边依赖和中央仓库中的一致，就可以引入对应的jar</p>\n<p>dependencyManagement<br>在父模块中定义后，子模块就会直接继承相对应的依赖，配置写法同dependencies</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;dependencyManagement&gt;</div><div class=\"line\">    &lt;dependencies&gt;</div><div class=\"line\">    .....</div><div class=\"line\">    &lt;/dependencies&gt;</div><div class=\"line\">&lt;/dependencyManagement&gt;</div></pre></td></tr></table></figure>\n<h3 id=\"构建配置\"><a href=\"#构建配置\" class=\"headerlink\" title=\"构建配置\"></a>构建配置</h3><p>build<br>用于配置项目构建相关信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;build&gt;    </div><div class=\"line\">    &lt;!--该元素设置了项目源码目录，当构建项目的时候，构建系统会编译目录里的源码。该路径是相对于pom.xml的相对路径。--&gt;    </div><div class=\"line\">    &lt;sourceDirectory/&gt;    </div><div class=\"line\">    &lt;!--该元素设置了项目脚本源码目录，该目录和源码目录不同：绝大多数情况下，该目录下的内容 会被拷贝到输出目录(因为脚本是被解释的，而不是被编译的)。--&gt;    </div><div class=\"line\">  &lt;scriptSourceDirectory/&gt;    </div><div class=\"line\">  &lt;!--该元素设置了项目单元测试使用的源码目录，当测试项目的时候，构建系统会编译目录里的源码。该路径是相对于pom.xml的相对路径。--&gt;    </div><div class=\"line\">  &lt;testSourceDirectory/&gt;    </div><div class=\"line\">  &lt;!--被编译过的应用程序class文件存放的目录。--&gt;    </div><div class=\"line\">  &lt;outputDirectory/&gt;    </div><div class=\"line\">  &lt;!--被编译过的测试class文件存放的目录。--&gt;    </div><div class=\"line\">  &lt;testOutputDirectory/&gt;    </div><div class=\"line\">  &lt;!--使用来自该项目的一系列构建扩展--&gt;    </div><div class=\"line\">  &lt;extensions&gt;    </div><div class=\"line\">   &lt;!--描述使用到的构建扩展。--&gt;    </div><div class=\"line\">   &lt;extension&gt;    </div><div class=\"line\">    &lt;!--构建扩展的groupId--&gt;    </div><div class=\"line\">    &lt;groupId/&gt;    </div><div class=\"line\">    &lt;!--构建扩展的artifactId--&gt;    </div><div class=\"line\">    &lt;artifactId/&gt;    </div><div class=\"line\">    &lt;!--构建扩展的版本--&gt;    </div><div class=\"line\">    &lt;version/&gt;    </div><div class=\"line\">   &lt;/extension&gt;    </div><div class=\"line\">  &lt;/extensions&gt;    </div><div class=\"line\">  &lt;!--当项目没有规定目标（Maven2 叫做阶段）时的默认值--&gt;    </div><div class=\"line\">  &lt;defaultGoal/&gt;    </div><div class=\"line\">  &lt;!--这个元素描述了项目相关的所有资源路径列表，例如和项目相关的属性文件，这些资源被包含在最终的打包文件里。--&gt;    </div><div class=\"line\">  &lt;resources&gt;    </div><div class=\"line\">   &lt;!--这个元素描述了项目相关或测试相关的所有资源路径--&gt;    </div><div class=\"line\">   &lt;resource&gt;    </div><div class=\"line\">    &lt;!-- 描述了资源的目标路径。该路径相对target/classes目录（例如$&#123;project.build.outputDirectory&#125;）。举个例 子，如果你想资源在特定的包里(org.apache.maven.messages)，你就必须该元素设置为org/apache/maven /messages。然而，如果你只是想把资源放到源码目录结构里，就不需要该配置。--&gt;    </div><div class=\"line\">    &lt;targetPath/&gt;    </div><div class=\"line\">    &lt;!--是否使用参数值代替参数名。参数值取自properties元素或者文件里配置的属性，文件在filters元素里列出。--&gt;    </div><div class=\"line\">    &lt;filtering/&gt;    </div><div class=\"line\">    &lt;!--描述存放资源的目录，该路径相对POM路径--&gt;    </div><div class=\"line\">    &lt;directory/&gt;    </div><div class=\"line\">    &lt;!--包含的模式列表，例如**/*.xml.--&gt;    </div><div class=\"line\">    &lt;includes/&gt;    </div><div class=\"line\">    &lt;!--排除的模式列表，例如**/*.xml--&gt;    </div><div class=\"line\">    &lt;excludes/&gt;    </div><div class=\"line\">   &lt;/resource&gt;    </div><div class=\"line\">  &lt;/resources&gt;    </div><div class=\"line\">  &lt;!--这个元素描述了单元测试相关的所有资源路径，例如和单元测试相关的属性文件。--&gt;    </div><div class=\"line\">  &lt;testResources&gt;    </div><div class=\"line\">   &lt;!--这个元素描述了测试相关的所有资源路径，参见build/resources/resource元素的说明--&gt;    </div><div class=\"line\">   &lt;testResource&gt;    </div><div class=\"line\">    &lt;targetPath/&gt;&lt;filtering/&gt;&lt;directory/&gt;&lt;includes/&gt;&lt;excludes/&gt;    </div><div class=\"line\">   &lt;/testResource&gt;    </div><div class=\"line\">  &lt;/testResources&gt;    </div><div class=\"line\">  &lt;!--构建产生的所有文件存放的目录--&gt;    </div><div class=\"line\">  &lt;directory/&gt;    </div><div class=\"line\">  &lt;!--产生的构件的文件名，默认值是$&#123;artifactId&#125;-$&#123;version&#125;。--&gt;    </div><div class=\"line\">  &lt;finalName/&gt;    </div><div class=\"line\">  &lt;!--当filtering开关打开时，使用到的过滤器属性文件列表--&gt;    </div><div class=\"line\">  &lt;filters/&gt;    </div><div class=\"line\">  &lt;!--子项目可以引用的默认插件信息。该插件配置项直到被引用时才会被解析或绑定到生命周期。给定插件的任何本地配置都会覆盖这里的配置--&gt;    </div><div class=\"line\">  &lt;pluginManagement&gt;    </div><div class=\"line\">   &lt;!--使用的插件列表 。--&gt;    </div><div class=\"line\">   &lt;plugins&gt;    </div><div class=\"line\">    &lt;!--plugin元素包含描述插件所需要的信息。--&gt;    </div><div class=\"line\">    &lt;plugin&gt;    </div><div class=\"line\">     &lt;!--插件在仓库里的group ID--&gt;    </div><div class=\"line\">     &lt;groupId/&gt;    </div><div class=\"line\">     &lt;!--插件在仓库里的artifact ID--&gt;    </div><div class=\"line\">     &lt;artifactId/&gt;    </div><div class=\"line\">     &lt;!--被使用的插件的版本（或版本范围）--&gt;    </div><div class=\"line\">     &lt;version/&gt;    </div><div class=\"line\">     &lt;!--是否从该插件下载Maven扩展（例如打包和类型处理器），由于性能原因，只有在真需要下载时，该元素才被设置成enabled。--&gt;    </div><div class=\"line\">     &lt;extensions/&gt;    </div><div class=\"line\">     &lt;!--在构建生命周期中执行一组目标的配置。每个目标可能有不同的配置。--&gt;    </div><div class=\"line\">     &lt;executions&gt;    </div><div class=\"line\">      &lt;!--execution元素包含了插件执行需要的信息--&gt;    </div><div class=\"line\">      &lt;execution&gt;    </div><div class=\"line\">       &lt;!--执行目标的标识符，用于标识构建过程中的目标，或者匹配继承过程中需要合并的执行目标--&gt;    </div><div class=\"line\">       &lt;id/&gt;    </div><div class=\"line\">       &lt;!--绑定了目标的构建生命周期阶段，如果省略，目标会被绑定到源数据里配置的默认阶段--&gt;    </div><div class=\"line\">       &lt;phase/&gt;    </div><div class=\"line\">       &lt;!--配置的执行目标--&gt;    </div><div class=\"line\">       &lt;goals/&gt;    </div><div class=\"line\">       &lt;!--配置是否被传播到子POM--&gt;    </div><div class=\"line\">       &lt;inherited/&gt;    </div><div class=\"line\">       &lt;!--作为DOM对象的配置--&gt;    </div><div class=\"line\">       &lt;configuration/&gt;    </div><div class=\"line\">      &lt;/execution&gt;    </div><div class=\"line\">     &lt;/executions&gt;    </div><div class=\"line\">     &lt;!--项目引入插件所需要的额外依赖--&gt;    </div><div class=\"line\">     &lt;dependencies&gt;    </div><div class=\"line\">      &lt;!--参见dependencies/dependency元素--&gt;    </div><div class=\"line\">      &lt;dependency&gt;    </div><div class=\"line\">       ......    </div><div class=\"line\">      &lt;/dependency&gt;    </div><div class=\"line\">     &lt;/dependencies&gt;         </div><div class=\"line\">     &lt;!--任何配置是否被传播到子项目--&gt;    </div><div class=\"line\">     &lt;inherited/&gt;    </div><div class=\"line\">     &lt;!--作为DOM对象的配置--&gt;    </div><div class=\"line\">     &lt;configuration/&gt;    </div><div class=\"line\">    &lt;/plugin&gt;    </div><div class=\"line\">   &lt;/plugins&gt;    </div><div class=\"line\">  &lt;/pluginManagement&gt;    </div><div class=\"line\">  &lt;!--使用的插件列表--&gt;    </div><div class=\"line\">  &lt;plugins&gt;    </div><div class=\"line\">   &lt;!--参见build/pluginManagement/plugins/plugin元素--&gt;    </div><div class=\"line\">   &lt;plugin&gt;    </div><div class=\"line\">    &lt;groupId/&gt;&lt;artifactId/&gt;&lt;version/&gt;&lt;extensions/&gt;    </div><div class=\"line\">    &lt;executions&gt;    </div><div class=\"line\">     &lt;execution&gt;    </div><div class=\"line\">      &lt;id/&gt;&lt;phase/&gt;&lt;goals/&gt;&lt;inherited/&gt;&lt;configuration/&gt;    </div><div class=\"line\">     &lt;/execution&gt;    </div><div class=\"line\">    &lt;/executions&gt;    </div><div class=\"line\">    &lt;dependencies&gt;    </div><div class=\"line\">     &lt;!--参见dependencies/dependency元素--&gt;    </div><div class=\"line\">     &lt;dependency&gt;    </div><div class=\"line\">      ......    </div><div class=\"line\">     &lt;/dependency&gt;    </div><div class=\"line\">    &lt;/dependencies&gt;    </div><div class=\"line\">    &lt;goals/&gt;&lt;inherited/&gt;&lt;configuration/&gt;    </div><div class=\"line\">   &lt;/plugin&gt;    </div><div class=\"line\">  &lt;/plugins&gt;    </div><div class=\"line\"> &lt;/build&gt;</div></pre></td></tr></table></figure>\n<p>reporting<br>该元素描述使用报表插件产生报表的规范。当用户执行“mvn site”，这些报表就会运行。 在页面导航栏能看到所有报表的链接。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;reporting&gt;    </div><div class=\"line\">  &lt;!--true，则，网站不包括默认的报表。这包括“项目信息”菜单中的报表。--&gt;    </div><div class=\"line\">  &lt;excludeDefaults/&gt;    </div><div class=\"line\">  &lt;!--所有产生的报表存放到哪里。默认值是$&#123;project.build.directory&#125;/site。--&gt;    </div><div class=\"line\">  &lt;outputDirectory/&gt;    </div><div class=\"line\">  &lt;!--使用的报表插件和他们的配置。--&gt;    </div><div class=\"line\">  &lt;plugins&gt;    </div><div class=\"line\">   &lt;!--plugin元素包含描述报表插件需要的信息--&gt;    </div><div class=\"line\">   &lt;plugin&gt;    </div><div class=\"line\">    &lt;!--报表插件在仓库里的group ID--&gt;    </div><div class=\"line\">    &lt;groupId/&gt;    </div><div class=\"line\">    &lt;!--报表插件在仓库里的artifact ID--&gt;    </div><div class=\"line\">    &lt;artifactId/&gt;    </div><div class=\"line\">    &lt;!--被使用的报表插件的版本（或版本范围）--&gt;    </div><div class=\"line\">    &lt;version/&gt;    </div><div class=\"line\">    &lt;!--任何配置是否被传播到子项目--&gt;    </div><div class=\"line\">    &lt;inherited/&gt;    </div><div class=\"line\">    &lt;!--报表插件的配置--&gt;    </div><div class=\"line\">    &lt;configuration/&gt;    </div><div class=\"line\">    &lt;!--一组报表的多重规范，每个规范可能有不同的配置。一个规范（报表集）对应一个执行目标 。例如，有1，2，3，4，5，6，7，8，9个报表。1，2，5构成A报表集，对应一个执行目标。2，5，8构成B报表集，对应另一个执行目标--&gt;    </div><div class=\"line\">    &lt;reportSets&gt;    </div><div class=\"line\">     &lt;!--表示报表的一个集合，以及产生该集合的配置--&gt;    </div><div class=\"line\">     &lt;reportSet&gt;    </div><div class=\"line\">      &lt;!--报表集合的唯一标识符，POM继承时用到--&gt;    </div><div class=\"line\">      &lt;id/&gt;    </div><div class=\"line\">      &lt;!--产生报表集合时，被使用的报表的配置--&gt;    </div><div class=\"line\">      &lt;configuration/&gt;    </div><div class=\"line\">      &lt;!--配置是否被继承到子POMs--&gt;    </div><div class=\"line\">      &lt;inherited/&gt;    </div><div class=\"line\">      &lt;!--这个集合里使用到哪些报表--&gt;    </div><div class=\"line\">      &lt;reports/&gt;    </div><div class=\"line\">     &lt;/reportSet&gt;    </div><div class=\"line\">    &lt;/reportSets&gt;    </div><div class=\"line\">   &lt;/plugin&gt;    </div><div class=\"line\">  &lt;/plugins&gt;    </div><div class=\"line\"> &lt;/reporting&gt;</div></pre></td></tr></table></figure>\n<h3 id=\"项目信息\"><a href=\"#项目信息\" class=\"headerlink\" title=\"项目信息\"></a>项目信息</h3><p>name：给用户提供更为友好的项目名<br>description：项目描述，maven文档中保存<br>url：主页的URL，maven文档中保存<br>inceptionYear：项目创建年份，4位数字。当产生版权信息时需要使用这个值<br>licenses：该元素描述了项目所有License列表。 应该只列出该项目的license列表，不要列出依赖项目的 license列表。如果列出多个license，用户可以选择它们中的一个而不是接受所有license。（如下）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;license&gt;    </div><div class=\"line\">    &lt;!--license用于法律上的名称--&gt;    </div><div class=\"line\">    &lt;name&gt;...&lt;/name&gt;     </div><div class=\"line\">    &lt;!--官方的license正文页面的URL--&gt;    </div><div class=\"line\">    &lt;url&gt;....&lt;/url&gt;</div><div class=\"line\">    &lt;!--项目分发的主要方式：repo，可以从Maven库下载 manual， 用户必须手动下载和安装依赖--&gt;    </div><div class=\"line\">    &lt;distribution&gt;repo&lt;/distribution&gt;     </div><div class=\"line\">    &lt;!--关于license的补充信息--&gt;    </div><div class=\"line\">    &lt;comments&gt;....&lt;/comments&gt;     </div><div class=\"line\">&lt;/license&gt;</div></pre></td></tr></table></figure>\n<p>organization：1.name 组织名 2.url 组织主页url<br>developers：项目开发人员列表（如下）<br>contributors：项目其他贡献者列表，同developers</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;developers&gt;  </div><div class=\"line\">    &lt;!--某个开发者信息--&gt;</div><div class=\"line\">    &lt;developer&gt;  </div><div class=\"line\">        &lt;!--开发者的唯一标识符--&gt;</div><div class=\"line\">        &lt;id&gt;....&lt;/id&gt;  </div><div class=\"line\">        &lt;!--开发者的全名--&gt;</div><div class=\"line\">        &lt;name&gt;...&lt;/name&gt;  </div><div class=\"line\">        &lt;!--开发者的email--&gt;</div><div class=\"line\">        &lt;email&gt;...&lt;/email&gt;  </div><div class=\"line\">        &lt;!--开发者的主页--&gt;</div><div class=\"line\">        &lt;url&gt;...&lt;url/&gt;</div><div class=\"line\">        &lt;!--开发者在项目中的角色--&gt;</div><div class=\"line\">        &lt;roles&gt;  </div><div class=\"line\">            &lt;role&gt;Java Dev&lt;/role&gt;  </div><div class=\"line\">            &lt;role&gt;Web UI&lt;/role&gt;  </div><div class=\"line\">        &lt;/roles&gt; </div><div class=\"line\">        &lt;!--开发者所属组织--&gt; </div><div class=\"line\">        &lt;organization&gt;sun&lt;/organization&gt;  </div><div class=\"line\">        &lt;!--开发者所属组织的URL--&gt;</div><div class=\"line\">        &lt;organizationUrl&gt;...&lt;/organizationUrl&gt;  </div><div class=\"line\">        &lt;!--开发者属性，如即时消息如何处理等--&gt;</div><div class=\"line\">        &lt;properties&gt;</div><div class=\"line\">            &lt;!-- 和主标签中的properties一样，可以随意定义子标签 --&gt;</div><div class=\"line\">        &lt;/properties&gt; </div><div class=\"line\">        &lt;!--开发者所在时区， -11到12范围内的整数。--&gt; </div><div class=\"line\">        &lt;timezone&gt;-5&lt;/timezone&gt;  </div><div class=\"line\">    &lt;/developer&gt;  </div><div class=\"line\">&lt;/developers&gt;</div></pre></td></tr></table></figure>\n<h3 id=\"环境设置\"><a href=\"#环境设置\" class=\"headerlink\" title=\"环境设置\"></a>环境设置</h3><p>issueManagement<br>目的问题管理系统(Bugzilla, Jira, Scarab)的名称和URL</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;issueManagement&gt;</div><div class=\"line\">    &lt;system&gt;Bugzilla&lt;/system&gt;</div><div class=\"line\">    &lt;url&gt;http://127.0.0.1/bugzilla/&lt;/url&gt;</div><div class=\"line\">&lt;/issueManagement&gt;</div></pre></td></tr></table></figure>\n<p>system：系统类型<br>url：路径<br>ciManagement<br>项目的持续集成信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;ciManagement&gt;</div><div class=\"line\">  &lt;system&gt;continuum&lt;/system&gt;</div><div class=\"line\">  &lt;url&gt;http://127.0.0.1:8080/continuum&lt;/url&gt;</div><div class=\"line\">  &lt;notifiers&gt;</div><div class=\"line\">    &lt;notifier&gt;</div><div class=\"line\">      &lt;type&gt;mail&lt;/type&gt;</div><div class=\"line\">      &lt;sendOnError&gt;true&lt;/sendOnError&gt;</div><div class=\"line\">      &lt;sendOnFailure&gt;true&lt;/sendOnFailure&gt;</div><div class=\"line\">      &lt;sendOnSuccess&gt;false&lt;/sendOnSuccess&gt;</div><div class=\"line\">      &lt;sendOnWarning&gt;false&lt;/sendOnWarning&gt;</div><div class=\"line\">      &lt;address&gt;continuum@127.0.0.1&lt;/address&gt;</div><div class=\"line\">      &lt;configuration&gt;&lt;/configuration&gt;</div><div class=\"line\">    &lt;/notifier&gt;</div><div class=\"line\">  &lt;/notifiers&gt;</div><div class=\"line\">&lt;/ciManagement&gt;</div></pre></td></tr></table></figure>\n<p>system：持续集成系统的名字<br>url：持续集成系统的URL<br>notifiers：构建完成时，需要通知的开发者/用户的配置项。包括被通知者信息和通知条件（错误，失败，成功，警告）<br>type：通知方式<br>sendOnError：错误时是否通知<br>sendOnFailure：失败时是否通知<br>sendOnSuccess：成功时是否通知<br>sendOnWarning：警告时是否通知<br>address：通知发送到的地址<br>configuration：扩展项<br>mailingLists<br>项目相关邮件列表信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;mailingLists&gt;</div><div class=\"line\">  &lt;mailingList&gt;</div><div class=\"line\">    &lt;name&gt;User List&lt;/name&gt;</div><div class=\"line\">    &lt;subscribe&gt;user-subscribe@127.0.0.1&lt;/subscribe&gt;</div><div class=\"line\">    &lt;unsubscribe&gt;user-unsubscribe@127.0.0.1&lt;/unsubscribe&gt;</div><div class=\"line\">    &lt;post&gt;user@127.0.0.1&lt;/post&gt;</div><div class=\"line\">    &lt;archive&gt;http://127.0.0.1/user/&lt;/archive&gt;</div><div class=\"line\">    &lt;otherArchives&gt;</div><div class=\"line\">      &lt;otherArchive&gt;http://base.google.com/base/1/127.0.0.1&lt;/otherArchive&gt;</div><div class=\"line\">    &lt;/otherArchives&gt;</div><div class=\"line\">  &lt;/mailingList&gt;</div><div class=\"line\">  .....</div><div class=\"line\">&lt;/mailingLists&gt;</div></pre></td></tr></table></figure>\n<p>subscribe, unsubscribe: 订阅邮件（取消订阅）的地址或链接，如果是邮件地址，创建文档时，mailto: 链接会被自动创建<br>archive：浏览邮件信息的URL<br>post：接收邮件的地址<br>scm<br>允许你配置你的代码库，供Maven web站点和其它插件使用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;scm&gt;</div><div class=\"line\">  &lt;connection&gt;scm:svn:http://127.0.0.1/svn/my-project&lt;/connection&gt;</div><div class=\"line\">  &lt;developerConnection&gt;scm:svn:https://127.0.0.1/svn/my-project&lt;/developerConnection&gt;</div><div class=\"line\">  &lt;tag&gt;HEAD&lt;/tag&gt;</div><div class=\"line\">  &lt;url&gt;http://127.0.0.1/websvn/my-project&lt;/url&gt;</div><div class=\"line\">&lt;/scm&gt;</div></pre></td></tr></table></figure>\n<p>connection, developerConnection：这两个表示我们如何连接到maven的版本库。connection只提供读，developerConnection将提供写的请求<br>写法如：scm:[provider]:[provider_specific]<br>如果连接到CVS仓库，可以配置如下：scm:cvs:pserver:127.0.0.1:/cvs/root:my-project<br>tag：项目标签，默认HEAD<br>url：共有仓库路径<br>prerequisites<br>项目构建的前提</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;prerequisites&gt;</div><div class=\"line\">    &lt;maven&gt;2.0.6&lt;/maven&gt;</div><div class=\"line\">&lt;/prerequisites&gt;</div></pre></td></tr></table></figure>\n<p>repositories,pluginRepositories<br>依赖和扩展的远程仓库列表，同上篇文章，setting.xml配置中介绍的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;repositories&gt;</div><div class=\"line\">  &lt;repository&gt;</div><div class=\"line\">    &lt;releases&gt;</div><div class=\"line\">      &lt;enabled&gt;false&lt;/enabled&gt;</div><div class=\"line\">      &lt;updatePolicy&gt;always&lt;/updatePolicy&gt;</div><div class=\"line\">      &lt;checksumPolicy&gt;warn&lt;/checksumPolicy&gt;</div><div class=\"line\">    &lt;/releases&gt;</div><div class=\"line\">    &lt;snapshots&gt;</div><div class=\"line\">      &lt;enabled&gt;true&lt;/enabled&gt;</div><div class=\"line\">      &lt;updatePolicy&gt;never&lt;/updatePolicy&gt;</div><div class=\"line\">      &lt;checksumPolicy&gt;fail&lt;/checksumPolicy&gt;</div><div class=\"line\">    &lt;/snapshots&gt;</div><div class=\"line\">    &lt;id&gt;codehausSnapshots&lt;/id&gt;</div><div class=\"line\">    &lt;name&gt;Codehaus Snapshots&lt;/name&gt;</div><div class=\"line\">    &lt;url&gt;http://snapshots.maven.codehaus.org/maven2&lt;/url&gt;</div><div class=\"line\">    &lt;layout&gt;default&lt;/layout&gt;</div><div class=\"line\">  &lt;/repository&gt;</div><div class=\"line\">&lt;/repositories&gt;</div><div class=\"line\">&lt;pluginRepositories&gt;</div><div class=\"line\">  ...</div><div class=\"line\">&lt;/pluginRepositories&gt;</div></pre></td></tr></table></figure>\n<p>releases, snapshots:这是各种构件的策略，release或者snapshot。这两个集合，POM就可以根据独立仓库任意类型的依赖改变策略。如：一个人可能只激活下载snapshot用来开发。<br>enable：true或者false，决定仓库是否对于各自的类型激活(release 或者 snapshot)。<br>updatePolicy: 这个元素决定更新频率。maven将比较本地pom的时间戳（存储在仓库的maven数据文件中）和远程的. 有以下选择: always, daily (默认), interval:X (x是代表分钟的整型) ， never.<br>checksumPolicy：当Maven向仓库部署文件的时候，它也部署了相应的校验和文件。可选的为：ignore，fail，warn，或者不正确的校验和。<br>layout：在上面描述仓库的时候，提到他们有统一的布局。Maven 2有它仓库默认布局。然而，Maven 1.x有不同布局。使用这个元素来表明它是default还是legacy。<br>distributionManagement<br>它管理的分布在整个构建过程生成的工件和支持文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;distributionManagement&gt;</div><div class=\"line\">  ...</div><div class=\"line\">  &lt;downloadUrl&gt;http://mojo.codehaus.org/my-project&lt;/downloadUrl&gt;</div><div class=\"line\">  &lt;status&gt;deployed&lt;/status&gt;</div><div class=\"line\">&lt;/distributionManagement&gt;</div></pre></td></tr></table></figure>\n<p>downloadUrl: 其他pom可以通过此url的仓库抓取组件<br>status：给出该构件在远程仓库的状态<br>none: 默认<br>converted: 将被早期Maven 2 POM转换过来<br>partner: 这个项目会从合作者仓库同步过来<br>deployed: 从Maven 2或3实例部署<br>verified: 被核实时正确的和最终的<br>Repository<br>指定Maven pom从远程下载控件到当前项目的位置和方式，如果snapshotRepository没有被定义则使用repository相关的配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;distributionManagement&gt;</div><div class=\"line\">  &lt;repository&gt;</div><div class=\"line\">    &lt;uniqueVersion&gt;false&lt;/uniqueVersion&gt;</div><div class=\"line\">    &lt;id&gt;corp1&lt;/id&gt;</div><div class=\"line\">    &lt;name&gt;Corporate Repository&lt;/name&gt;</div><div class=\"line\">    &lt;url&gt;scp://repo/maven2&lt;/url&gt;</div><div class=\"line\">    &lt;layout&gt;default&lt;/layout&gt;</div><div class=\"line\">  &lt;/repository&gt;</div><div class=\"line\">  &lt;snapshotRepository&gt;</div><div class=\"line\">    &lt;uniqueVersion&gt;true&lt;/uniqueVersion&gt;</div><div class=\"line\">    &lt;id&gt;propSnap&lt;/id&gt;</div><div class=\"line\">    &lt;name&gt;Propellors Snapshots&lt;/name&gt;</div><div class=\"line\">    &lt;url&gt;sftp://propellers.net/maven&lt;/url&gt;</div><div class=\"line\">    &lt;layout&gt;legacy&lt;/layout&gt;</div><div class=\"line\">  &lt;/snapshotRepository&gt;</div><div class=\"line\">  ...</div><div class=\"line\">&lt;/distributionManagement&gt;</div></pre></td></tr></table></figure>\n<p>id, name：仓库的唯一标识<br>uniqueVersion：true或false，指明控件部署的时候是否获取独立的版本号。<br>url：repository元素的核心。指定位置和部署协议发布控件到仓库。<br>layout：布局，default或legacy<br>Site Distribution<br>多分布存储库,distributionManagement负责定义如何部署项目的网站和文档。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;distributionManagement&gt;</div><div class=\"line\">  ...</div><div class=\"line\">  &lt;site&gt;</div><div class=\"line\">    &lt;id&gt;mojo.website&lt;/id&gt;</div><div class=\"line\">    &lt;name&gt;Mojo Website&lt;/name&gt;</div><div class=\"line\">    &lt;url&gt;scp://beaver.codehaus.org/home/projects/mojo/public_html/&lt;/url&gt;</div><div class=\"line\">  &lt;/site&gt;</div><div class=\"line\">  ...</div><div class=\"line\">&lt;/distributionManagement&gt;</div></pre></td></tr></table></figure>\n<p>id, name, url: 这些元素与distributionManagement repository中的相同<br>Relocation<br>重新部署-项目不是静态的，是活的。他们需要被搬到更合适的地方。如：当你的下个成功的开源项目移到Apache下，重命名为org.apache:my-project:1.0 对你项目更有好处。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;distributionManagement&gt;</div><div class=\"line\">  ...</div><div class=\"line\">  &lt;relocation&gt;</div><div class=\"line\">    &lt;groupId&gt;org.apache&lt;/groupId&gt;</div><div class=\"line\">    &lt;artifactId&gt;my-project&lt;/artifactId&gt;</div><div class=\"line\">    &lt;version&gt;1.0&lt;/version&gt;</div><div class=\"line\">    &lt;message&gt;We have moved the Project under Apache&lt;/message&gt;</div><div class=\"line\">  &lt;/relocation&gt;</div><div class=\"line\">  ...</div><div class=\"line\">&lt;/distributionManagement&gt;</div></pre></td></tr></table></figure>\n<p>profiles<br>profile可以让我们定义一系列的配置信息（插件等），然后指定其激活条件</p>"},{"title":"Dashboard使用说明","date":"2017-05-07T16:00:00.000Z","_content":"\n1. webstrom安装和破解\n安装好webstrom后，先运行IntelliJIDEALicenseServer_windows_386.exe 然后，再运行webstrom，注册以后，即可\n\n2. webstrom配置nodejs项目运行\n选择edit configuration-->新建 nodejs -->选择相应的javascript文件，保存\n\n","source":"_posts/dashboard/dashboard.md","raw":"---\ntitle: Dashboard使用说明\ndate: 2017-05-08 00:00:00\ncategories: Dashboard\ntags:\n - dashboard\n---\n\n1. webstrom安装和破解\n安装好webstrom后，先运行IntelliJIDEALicenseServer_windows_386.exe 然后，再运行webstrom，注册以后，即可\n\n2. webstrom配置nodejs项目运行\n选择edit configuration-->新建 nodejs -->选择相应的javascript文件，保存\n\n","slug":"dashboard/dashboard","published":1,"updated":"2021-01-26T10:03:56.636Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkdu2m9x000ly74tl8famcsm","content":"<ol>\n<li><p>webstrom安装和破解<br>安装好webstrom后，先运行IntelliJIDEALicenseServer_windows_386.exe 然后，再运行webstrom，注册以后，即可</p>\n</li>\n<li><p>webstrom配置nodejs项目运行<br>选择edit configuration–&gt;新建 nodejs –&gt;选择相应的javascript文件，保存</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li><p>webstrom安装和破解<br>安装好webstrom后，先运行IntelliJIDEALicenseServer_windows_386.exe 然后，再运行webstrom，注册以后，即可</p>\n</li>\n<li><p>webstrom配置nodejs项目运行<br>选择edit configuration–&gt;新建 nodejs –&gt;选择相应的javascript文件，保存</p>\n</li>\n</ol>\n"},{"title":"Linux文件操作","date":"2017-05-03T16:00:00.000Z","_content":"\nLinux文件操作\n \n <!--more-->\n\n### 字符串统计\n\n1. 根据特殊字符串，输出该字符串共多少个\n当用户访问一个页面，就会相应打印该页面的地址，为了统一周内，该网站每个页面的访问次数，需要取出log文件中所有的'##'前的字符串\n> **log文件示例**：\n```\nt_daily_article##\nSQL Request\n```\n> **处理命令**：grep \"##\" online-8182-out-2.log > result.log\n\n \n \n \n \n \n \n \n \n ","source":"_posts/file/file.md","raw":"---\ntitle: Linux文件操作\ndate: 2017-05-04 00:00:00\ncategories: File\ntags:\n - linux\n - grep\n - awk\n---\n\nLinux文件操作\n \n <!--more-->\n\n### 字符串统计\n\n1. 根据特殊字符串，输出该字符串共多少个\n当用户访问一个页面，就会相应打印该页面的地址，为了统一周内，该网站每个页面的访问次数，需要取出log文件中所有的'##'前的字符串\n> **log文件示例**：\n```\nt_daily_article##\nSQL Request\n```\n> **处理命令**：grep \"##\" online-8182-out-2.log > result.log\n\n \n \n \n \n \n \n \n \n ","slug":"file/file","published":1,"updated":"2021-01-26T10:03:56.636Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkdu2m9z000ny74tq28kxxph","content":"<p>Linux文件操作</p>\n <a id=\"more\"></a>\n<h3 id=\"字符串统计\"><a href=\"#字符串统计\" class=\"headerlink\" title=\"字符串统计\"></a>字符串统计</h3><ol>\n<li>根据特殊字符串，输出该字符串共多少个<br>当用户访问一个页面，就会相应打印该页面的地址，为了统一周内，该网站每个页面的访问次数，需要取出log文件中所有的’##’前的字符串<blockquote>\n<p><strong>log文件示例</strong>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">t_daily_article##</div><div class=\"line\">SQL Request</div></pre></td></tr></table></figure>\n</blockquote>\n</li>\n</ol>\n<blockquote>\n<p><strong>处理命令</strong>：grep “##” online-8182-out-2.log &gt; result.log</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>Linux文件操作</p>","more":"<h3 id=\"字符串统计\"><a href=\"#字符串统计\" class=\"headerlink\" title=\"字符串统计\"></a>字符串统计</h3><ol>\n<li>根据特殊字符串，输出该字符串共多少个<br>当用户访问一个页面，就会相应打印该页面的地址，为了统一周内，该网站每个页面的访问次数，需要取出log文件中所有的’##’前的字符串<blockquote>\n<p><strong>log文件示例</strong>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">t_daily_article##</div><div class=\"line\">SQL Request</div></pre></td></tr></table></figure>\n</blockquote>\n</li>\n</ol>\n<blockquote>\n<p><strong>处理命令</strong>：grep “##” online-8182-out-2.log &gt; result.log</p>\n</blockquote>"},{"title":"druid书--阅读笔记","date":"2017-05-01T16:00:00.000Z","_content":"\n最开始接触druid是在16年3月份，那时候相关的资料很少，只有官网上的资料，近段时间，发现有人出书了，现在将在读书中遇到的一些小重点记录下来，也算是一种经验的积累（工作是，实时加载用的是Index Service的方式来加载数据）。\n\n <!-- more -->\n\n## 基本简介\n1. druid是一个分布式的支持实时分析的** 数据存储系统 **。\n2. 数据集合包括** 时间列（Timestamp）**、** 维度列（Dimension）**、** 指标列（Metrics）**。\n3. 数据摄入方式分为** 实时数据摄入**、** 批处理数据摄入**。\n4. 实时数据处理部分是面向写多读少的优化，批处理部分是面向读多写少的优化。\n5. 整个系统使用Zookeeper进行协调，mysql存储元数据。\n6. 不支持JOIN\n7. 按时间粒度对数据进行聚合。\n8. OLAP（联机分析处理），核心思想是建立多维度的数据立方体，以维度和度量为基本概念，辅以元数据实现可以钻取（Drill-down/up）、切片（Slice）、切块（Dice）的数据展现。\n9. Pinot与druid最为相似，整体设计更加完整和系统化\n10. druid标签：开源、实时、高效、简洁。\n\n## 架构详解（realtime方式）\n1. druid节点\n **实时节点（Realtime Node）**：摄入实时数据，生成segment数据文件\n **历史节点（Historical Node）**：加载已生成好的数据文件，供数据查询\n **查询节点（Broker Node）**：对外提供数据查询服务，并同时从实时节点和历史节点查询数据，合并后，返回给调用方\n **协调节点（Coordinator Node）**：负责历史节点的数据负载均衡，及通过规则（Rule）管理数据的生命周期\n\n2. 外部依赖\n**元数据库**：存储druid集群的原数据信息\n**分布式协调服务（ZK）**：为druid集群提供一致协调性服务\n**数据文件存储库**：存放生成的segment数据文件，供历史节点下载\n\n3. 索引（Index）：加速数据库数据的访问（使用树结构）\n\n4. 总体架构\n> 实时数据 --> 加载到 --> 实时节点内存中的堆结构缓存区 --> （满足条件的时候）--> 写进磁盘 --> 形成数据块（segment split）-->（同时）--> 实时节点会立即将新生成的数据块 --> 加载 --> 内存中的非堆区 -->（同时）--> 实时节点周期性的将磁盘同一时间内生成的所有数据块合并为一个大的数据块（Segment Merge） -->（立即）--> 该segment被实时节点上传到数据文件存储库（HDFS...） -->（随后）--> 协调节点（coordinator）-->（指导）--> 历史节点 --> 去文件存储库将新生成的segment下载到本地磁盘中 --> 加载成功 --> historical -->（通过）--> 协调节点（coordinator）--> 声明从此刻开始提供该新生成的segment的查询 --> 实时节点收到声明 --> 声明自己不再提供该segment的查询。\n<br />\n > 查询节点会一直从实时节点和历史节点中查询数据，并做整合。\n\n## 实际使用（Index Service方式-tranquility）\n1. Master：协调节点（Coordinator）和统治节点（Overlord）\n2. Date：历史节点（Historical）和中间管理者（Middlemanager）\n3. Query：查询节点（Broker）\n\n## 数据摄入\n1.DataSchema\n```\n{\n  \"Datasource\":\"\", #string类型，数据源名字\n  \"parser\"：\"{}\", #JSON对象，包含了如何解析数据相关内容\n  \"metricsSpec\":\"{}\", #list包含了所有的指标列信息\n  \"graunlaritySpec\":\" #JSON对象，指明数据的存储和查询力度\"\n}\n```\n\n","source":"_posts/druid/druid_book_read.md","raw":"---\ntitle: druid书--阅读笔记\ndate: 2017-05-02 00:00:00\ncategories: druid\ntags:\n - druid\n - tranquility\n - OLAP\n - share nothing\n---\n\n最开始接触druid是在16年3月份，那时候相关的资料很少，只有官网上的资料，近段时间，发现有人出书了，现在将在读书中遇到的一些小重点记录下来，也算是一种经验的积累（工作是，实时加载用的是Index Service的方式来加载数据）。\n\n <!-- more -->\n\n## 基本简介\n1. druid是一个分布式的支持实时分析的** 数据存储系统 **。\n2. 数据集合包括** 时间列（Timestamp）**、** 维度列（Dimension）**、** 指标列（Metrics）**。\n3. 数据摄入方式分为** 实时数据摄入**、** 批处理数据摄入**。\n4. 实时数据处理部分是面向写多读少的优化，批处理部分是面向读多写少的优化。\n5. 整个系统使用Zookeeper进行协调，mysql存储元数据。\n6. 不支持JOIN\n7. 按时间粒度对数据进行聚合。\n8. OLAP（联机分析处理），核心思想是建立多维度的数据立方体，以维度和度量为基本概念，辅以元数据实现可以钻取（Drill-down/up）、切片（Slice）、切块（Dice）的数据展现。\n9. Pinot与druid最为相似，整体设计更加完整和系统化\n10. druid标签：开源、实时、高效、简洁。\n\n## 架构详解（realtime方式）\n1. druid节点\n **实时节点（Realtime Node）**：摄入实时数据，生成segment数据文件\n **历史节点（Historical Node）**：加载已生成好的数据文件，供数据查询\n **查询节点（Broker Node）**：对外提供数据查询服务，并同时从实时节点和历史节点查询数据，合并后，返回给调用方\n **协调节点（Coordinator Node）**：负责历史节点的数据负载均衡，及通过规则（Rule）管理数据的生命周期\n\n2. 外部依赖\n**元数据库**：存储druid集群的原数据信息\n**分布式协调服务（ZK）**：为druid集群提供一致协调性服务\n**数据文件存储库**：存放生成的segment数据文件，供历史节点下载\n\n3. 索引（Index）：加速数据库数据的访问（使用树结构）\n\n4. 总体架构\n> 实时数据 --> 加载到 --> 实时节点内存中的堆结构缓存区 --> （满足条件的时候）--> 写进磁盘 --> 形成数据块（segment split）-->（同时）--> 实时节点会立即将新生成的数据块 --> 加载 --> 内存中的非堆区 -->（同时）--> 实时节点周期性的将磁盘同一时间内生成的所有数据块合并为一个大的数据块（Segment Merge） -->（立即）--> 该segment被实时节点上传到数据文件存储库（HDFS...） -->（随后）--> 协调节点（coordinator）-->（指导）--> 历史节点 --> 去文件存储库将新生成的segment下载到本地磁盘中 --> 加载成功 --> historical -->（通过）--> 协调节点（coordinator）--> 声明从此刻开始提供该新生成的segment的查询 --> 实时节点收到声明 --> 声明自己不再提供该segment的查询。\n<br />\n > 查询节点会一直从实时节点和历史节点中查询数据，并做整合。\n\n## 实际使用（Index Service方式-tranquility）\n1. Master：协调节点（Coordinator）和统治节点（Overlord）\n2. Date：历史节点（Historical）和中间管理者（Middlemanager）\n3. Query：查询节点（Broker）\n\n## 数据摄入\n1.DataSchema\n```\n{\n  \"Datasource\":\"\", #string类型，数据源名字\n  \"parser\"：\"{}\", #JSON对象，包含了如何解析数据相关内容\n  \"metricsSpec\":\"{}\", #list包含了所有的指标列信息\n  \"graunlaritySpec\":\" #JSON对象，指明数据的存储和查询力度\"\n}\n```\n\n","slug":"druid/druid_book_read","published":1,"updated":"2021-01-26T10:03:56.636Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkdu2ma1000py74tiy9hegwj","content":"<p>最开始接触druid是在16年3月份，那时候相关的资料很少，只有官网上的资料，近段时间，发现有人出书了，现在将在读书中遇到的一些小重点记录下来，也算是一种经验的积累（工作是，实时加载用的是Index Service的方式来加载数据）。</p>\n <a id=\"more\"></a>\n<h2 id=\"基本简介\"><a href=\"#基本简介\" class=\"headerlink\" title=\"基本简介\"></a>基本简介</h2><ol>\n<li>druid是一个分布式的支持实时分析的<strong> 数据存储系统 </strong>。</li>\n<li>数据集合包括<strong> 时间列（Timestamp）</strong>、<strong> 维度列（Dimension）</strong>、<strong> 指标列（Metrics）</strong>。</li>\n<li>数据摄入方式分为<strong> 实时数据摄入</strong>、<strong> 批处理数据摄入</strong>。</li>\n<li>实时数据处理部分是面向写多读少的优化，批处理部分是面向读多写少的优化。</li>\n<li>整个系统使用Zookeeper进行协调，mysql存储元数据。</li>\n<li>不支持JOIN</li>\n<li>按时间粒度对数据进行聚合。</li>\n<li>OLAP（联机分析处理），核心思想是建立多维度的数据立方体，以维度和度量为基本概念，辅以元数据实现可以钻取（Drill-down/up）、切片（Slice）、切块（Dice）的数据展现。</li>\n<li>Pinot与druid最为相似，整体设计更加完整和系统化</li>\n<li>druid标签：开源、实时、高效、简洁。</li>\n</ol>\n<h2 id=\"架构详解（realtime方式）\"><a href=\"#架构详解（realtime方式）\" class=\"headerlink\" title=\"架构详解（realtime方式）\"></a>架构详解（realtime方式）</h2><ol>\n<li><p>druid节点<br><strong>实时节点（Realtime Node）</strong>：摄入实时数据，生成segment数据文件<br><strong>历史节点（Historical Node）</strong>：加载已生成好的数据文件，供数据查询<br><strong>查询节点（Broker Node）</strong>：对外提供数据查询服务，并同时从实时节点和历史节点查询数据，合并后，返回给调用方<br><strong>协调节点（Coordinator Node）</strong>：负责历史节点的数据负载均衡，及通过规则（Rule）管理数据的生命周期</p>\n</li>\n<li><p>外部依赖<br><strong>元数据库</strong>：存储druid集群的原数据信息<br><strong>分布式协调服务（ZK）</strong>：为druid集群提供一致协调性服务<br><strong>数据文件存储库</strong>：存放生成的segment数据文件，供历史节点下载</p>\n</li>\n<li><p>索引（Index）：加速数据库数据的访问（使用树结构）</p>\n</li>\n<li><p>总体架构</p>\n<blockquote>\n<p>实时数据 –&gt; 加载到 –&gt; 实时节点内存中的堆结构缓存区 –&gt; （满足条件的时候）–&gt; 写进磁盘 –&gt; 形成数据块（segment split）–&gt;（同时）–&gt; 实时节点会立即将新生成的数据块 –&gt; 加载 –&gt; 内存中的非堆区 –&gt;（同时）–&gt; 实时节点周期性的将磁盘同一时间内生成的所有数据块合并为一个大的数据块（Segment Merge） –&gt;（立即）–&gt; 该segment被实时节点上传到数据文件存储库（HDFS…） –&gt;（随后）–&gt; 协调节点（coordinator）–&gt;（指导）–&gt; 历史节点 –&gt; 去文件存储库将新生成的segment下载到本地磁盘中 –&gt; 加载成功 –&gt; historical –&gt;（通过）–&gt; 协调节点（coordinator）–&gt; 声明从此刻开始提供该新生成的segment的查询 –&gt; 实时节点收到声明 –&gt; 声明自己不再提供该segment的查询。<br><br><br>查询节点会一直从实时节点和历史节点中查询数据，并做整合。</p>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"实际使用（Index-Service方式-tranquility）\"><a href=\"#实际使用（Index-Service方式-tranquility）\" class=\"headerlink\" title=\"实际使用（Index Service方式-tranquility）\"></a>实际使用（Index Service方式-tranquility）</h2><ol>\n<li>Master：协调节点（Coordinator）和统治节点（Overlord）</li>\n<li>Date：历史节点（Historical）和中间管理者（Middlemanager）</li>\n<li>Query：查询节点（Broker）</li>\n</ol>\n<h2 id=\"数据摄入\"><a href=\"#数据摄入\" class=\"headerlink\" title=\"数据摄入\"></a>数据摄入</h2><p>1.DataSchema<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  &quot;Datasource&quot;:&quot;&quot;, #string类型，数据源名字</div><div class=\"line\">  &quot;parser&quot;：&quot;&#123;&#125;&quot;, #JSON对象，包含了如何解析数据相关内容</div><div class=\"line\">  &quot;metricsSpec&quot;:&quot;&#123;&#125;&quot;, #list包含了所有的指标列信息</div><div class=\"line\">  &quot;graunlaritySpec&quot;:&quot; #JSON对象，指明数据的存储和查询力度&quot;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<p>最开始接触druid是在16年3月份，那时候相关的资料很少，只有官网上的资料，近段时间，发现有人出书了，现在将在读书中遇到的一些小重点记录下来，也算是一种经验的积累（工作是，实时加载用的是Index Service的方式来加载数据）。</p>","more":"<h2 id=\"基本简介\"><a href=\"#基本简介\" class=\"headerlink\" title=\"基本简介\"></a>基本简介</h2><ol>\n<li>druid是一个分布式的支持实时分析的<strong> 数据存储系统 </strong>。</li>\n<li>数据集合包括<strong> 时间列（Timestamp）</strong>、<strong> 维度列（Dimension）</strong>、<strong> 指标列（Metrics）</strong>。</li>\n<li>数据摄入方式分为<strong> 实时数据摄入</strong>、<strong> 批处理数据摄入</strong>。</li>\n<li>实时数据处理部分是面向写多读少的优化，批处理部分是面向读多写少的优化。</li>\n<li>整个系统使用Zookeeper进行协调，mysql存储元数据。</li>\n<li>不支持JOIN</li>\n<li>按时间粒度对数据进行聚合。</li>\n<li>OLAP（联机分析处理），核心思想是建立多维度的数据立方体，以维度和度量为基本概念，辅以元数据实现可以钻取（Drill-down/up）、切片（Slice）、切块（Dice）的数据展现。</li>\n<li>Pinot与druid最为相似，整体设计更加完整和系统化</li>\n<li>druid标签：开源、实时、高效、简洁。</li>\n</ol>\n<h2 id=\"架构详解（realtime方式）\"><a href=\"#架构详解（realtime方式）\" class=\"headerlink\" title=\"架构详解（realtime方式）\"></a>架构详解（realtime方式）</h2><ol>\n<li><p>druid节点<br><strong>实时节点（Realtime Node）</strong>：摄入实时数据，生成segment数据文件<br><strong>历史节点（Historical Node）</strong>：加载已生成好的数据文件，供数据查询<br><strong>查询节点（Broker Node）</strong>：对外提供数据查询服务，并同时从实时节点和历史节点查询数据，合并后，返回给调用方<br><strong>协调节点（Coordinator Node）</strong>：负责历史节点的数据负载均衡，及通过规则（Rule）管理数据的生命周期</p>\n</li>\n<li><p>外部依赖<br><strong>元数据库</strong>：存储druid集群的原数据信息<br><strong>分布式协调服务（ZK）</strong>：为druid集群提供一致协调性服务<br><strong>数据文件存储库</strong>：存放生成的segment数据文件，供历史节点下载</p>\n</li>\n<li><p>索引（Index）：加速数据库数据的访问（使用树结构）</p>\n</li>\n<li><p>总体架构</p>\n<blockquote>\n<p>实时数据 –&gt; 加载到 –&gt; 实时节点内存中的堆结构缓存区 –&gt; （满足条件的时候）–&gt; 写进磁盘 –&gt; 形成数据块（segment split）–&gt;（同时）–&gt; 实时节点会立即将新生成的数据块 –&gt; 加载 –&gt; 内存中的非堆区 –&gt;（同时）–&gt; 实时节点周期性的将磁盘同一时间内生成的所有数据块合并为一个大的数据块（Segment Merge） –&gt;（立即）–&gt; 该segment被实时节点上传到数据文件存储库（HDFS…） –&gt;（随后）–&gt; 协调节点（coordinator）–&gt;（指导）–&gt; 历史节点 –&gt; 去文件存储库将新生成的segment下载到本地磁盘中 –&gt; 加载成功 –&gt; historical –&gt;（通过）–&gt; 协调节点（coordinator）–&gt; 声明从此刻开始提供该新生成的segment的查询 –&gt; 实时节点收到声明 –&gt; 声明自己不再提供该segment的查询。<br><br /><br>查询节点会一直从实时节点和历史节点中查询数据，并做整合。</p>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"实际使用（Index-Service方式-tranquility）\"><a href=\"#实际使用（Index-Service方式-tranquility）\" class=\"headerlink\" title=\"实际使用（Index Service方式-tranquility）\"></a>实际使用（Index Service方式-tranquility）</h2><ol>\n<li>Master：协调节点（Coordinator）和统治节点（Overlord）</li>\n<li>Date：历史节点（Historical）和中间管理者（Middlemanager）</li>\n<li>Query：查询节点（Broker）</li>\n</ol>\n<h2 id=\"数据摄入\"><a href=\"#数据摄入\" class=\"headerlink\" title=\"数据摄入\"></a>数据摄入</h2><p>1.DataSchema<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  &quot;Datasource&quot;:&quot;&quot;, #string类型，数据源名字</div><div class=\"line\">  &quot;parser&quot;：&quot;&#123;&#125;&quot;, #JSON对象，包含了如何解析数据相关内容</div><div class=\"line\">  &quot;metricsSpec&quot;:&quot;&#123;&#125;&quot;, #list包含了所有的指标列信息</div><div class=\"line\">  &quot;graunlaritySpec&quot;:&quot; #JSON对象，指明数据的存储和查询力度&quot;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>"},{"title":"解决kafka topic 删除重建后，状态依旧为删除的问题","_content":"在kafka的测试中，发现当删除一个topic后，想重建它，但是重建后的状态依旧为\"marked for deletion\"，查询资料后，终于解决\n\n+ <!-- more -->\n\n## 删除kafka topic\n1. 在kafka删除\nbin/kafka-topics.sh  --delete --zookeeper localhost:2181,localhost:2182,localhost:2183  --topic test\n2. 在kafka查看topic是否存在\nbin/kafka-topics.sh --list --zookeeper localhost:2181,localhost:2182,localhost:2183\n3. 在zk安装目录执行\nbin/zkCli.sh\n4. 查看topic\nls /brokers/topics\n5. 删除zktopic\ndeleteall /brokers/topics/test\ndeleteall /config/topics/test\ndeleteall /admin/delete_topics/test\n\n最后重建测试，一切正常\n","source":"_posts/kafka/delete_topic.md","raw":"---\ntitle: 解决kafka topic 删除重建后，状态依旧为删除的问题\n---\n在kafka的测试中，发现当删除一个topic后，想重建它，但是重建后的状态依旧为\"marked for deletion\"，查询资料后，终于解决\n\n+ <!-- more -->\n\n## 删除kafka topic\n1. 在kafka删除\nbin/kafka-topics.sh  --delete --zookeeper localhost:2181,localhost:2182,localhost:2183  --topic test\n2. 在kafka查看topic是否存在\nbin/kafka-topics.sh --list --zookeeper localhost:2181,localhost:2182,localhost:2183\n3. 在zk安装目录执行\nbin/zkCli.sh\n4. 查看topic\nls /brokers/topics\n5. 删除zktopic\ndeleteall /brokers/topics/test\ndeleteall /config/topics/test\ndeleteall /admin/delete_topics/test\n\n最后重建测试，一切正常\n","slug":"kafka/delete_topic","published":1,"date":"2021-01-26T10:03:56.637Z","updated":"2021-01-26T10:03:56.637Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkdu2ma2000qy74t1hjbgoq6","content":"<p>在kafka的测试中，发现当删除一个topic后，想重建它，但是重建后的状态依旧为”marked for deletion”，查询资料后，终于解决</p>\n<ul>\n<li><a id=\"more\"></a>\n</li>\n</ul>\n<h2 id=\"删除kafka-topic\"><a href=\"#删除kafka-topic\" class=\"headerlink\" title=\"删除kafka topic\"></a>删除kafka topic</h2><ol>\n<li>在kafka删除<br>bin/kafka-topics.sh  –delete –zookeeper localhost:2181,localhost:2182,localhost:2183  –topic test</li>\n<li>在kafka查看topic是否存在<br>bin/kafka-topics.sh –list –zookeeper localhost:2181,localhost:2182,localhost:2183</li>\n<li>在zk安装目录执行<br>bin/zkCli.sh</li>\n<li>查看topic<br>ls /brokers/topics</li>\n<li>删除zktopic<br>deleteall /brokers/topics/test<br>deleteall /config/topics/test<br>deleteall /admin/delete_topics/test</li>\n</ol>\n<p>最后重建测试，一切正常</p>\n","site":{"data":{}},"excerpt":"<p>在kafka的测试中，发现当删除一个topic后，想重建它，但是重建后的状态依旧为”marked for deletion”，查询资料后，终于解决</p>\n<ul>\n<li>","more":"</li>\n</ul>\n<h2 id=\"删除kafka-topic\"><a href=\"#删除kafka-topic\" class=\"headerlink\" title=\"删除kafka topic\"></a>删除kafka topic</h2><ol>\n<li>在kafka删除<br>bin/kafka-topics.sh  –delete –zookeeper localhost:2181,localhost:2182,localhost:2183  –topic test</li>\n<li>在kafka查看topic是否存在<br>bin/kafka-topics.sh –list –zookeeper localhost:2181,localhost:2182,localhost:2183</li>\n<li>在zk安装目录执行<br>bin/zkCli.sh</li>\n<li>查看topic<br>ls /brokers/topics</li>\n<li>删除zktopic<br>deleteall /brokers/topics/test<br>deleteall /config/topics/test<br>deleteall /admin/delete_topics/test</li>\n</ol>\n<p>最后重建测试，一切正常</p>"},{"title":"kafka基本操作","_content":"kafka的基本操作，及搭建\n\n+ <!-- more -->\n\n## kafka基本操作\n### 启动单节点zk\nnohup bin/zookeeper-server-start.sh config/zookeeper.properties > logs/zk.log 2>&1 &\n\n### 启动单节点kafka\nnohup bin/kafka-server-start.sh config/server.properties > logs/server.log 2>&1 &\n\n### 启动kafka集群\nnohup bin/kafka-server-start.sh config/server-1.properties > logs/server-1.log 2>&1 &\nnohup bin/kafka-server-start.sh config/server-2.properties > logs/server-2.log 2>&1 &\n\n### 检测kafka服务\nps ax | grep -i 'kafka\\.Kafka' | grep java | grep -v grep | awk '{print $1}'\n\n### 创建kafka topic\nbin/kafka-topics.sh --create --zookeeper localhost:2185 --replication-factor 1  --partitions 1 --topic test\n\n### 查看kafka所有topic\nbin/kafka-topics.sh --list --zookeeper localhost:2185\n\n### 启动生产者（ctrl+Z结束）\nbin/kafka-console-producer.sh --broker-list  localhost:9092,localhost:9093,localhost:9094 --topic test\n\n### 启动消费者（ctrl+Z结束）\nbin/kafka-console-consumer.sh --zookeeper  localhost:2185  --from-beginning --topic test\n\n### 创建有3个副本的topic\nbin/kafka-topics.sh --create --zookeeper localhost:2185 --replication-factor 1 --partitions 1 --topic my-replicated-topic\n\n### 查看每个topic的详细信息\nbinfka-topics.sh --describe --zookeeper localhost:2185 --topic my-replicated-topic\n\n### 使用 Kafka Connect 去导入和导出数据\nbin/connect-standalone.sh config/connect-standalone.properties config/connect-file-source.properties config/connect-file-sink.properties\n\n### 删除kafka topic\n1. 在kafka删除\nbin/kafka-topics.sh  --delete --zookeeper localhost:2185  --topic test\n2. 在kafka查看topic是否存在\nbin/kafka-topics.sh --list --zookeeper localhost:2185\n3. 在zk安装目录执行\nbin/zkCli.sh\n4. 查看topic\nls /brokers/topics\n5. 删除zktopic\ndeleteall /brokers/topics/test\ndeleteall /config/topics/test\ndeleteall /admin/delete_topics/test\n\n\n\n\n","source":"_posts/kafka/operate.md","raw":"---\ntitle: kafka基本操作\n---\nkafka的基本操作，及搭建\n\n+ <!-- more -->\n\n## kafka基本操作\n### 启动单节点zk\nnohup bin/zookeeper-server-start.sh config/zookeeper.properties > logs/zk.log 2>&1 &\n\n### 启动单节点kafka\nnohup bin/kafka-server-start.sh config/server.properties > logs/server.log 2>&1 &\n\n### 启动kafka集群\nnohup bin/kafka-server-start.sh config/server-1.properties > logs/server-1.log 2>&1 &\nnohup bin/kafka-server-start.sh config/server-2.properties > logs/server-2.log 2>&1 &\n\n### 检测kafka服务\nps ax | grep -i 'kafka\\.Kafka' | grep java | grep -v grep | awk '{print $1}'\n\n### 创建kafka topic\nbin/kafka-topics.sh --create --zookeeper localhost:2185 --replication-factor 1  --partitions 1 --topic test\n\n### 查看kafka所有topic\nbin/kafka-topics.sh --list --zookeeper localhost:2185\n\n### 启动生产者（ctrl+Z结束）\nbin/kafka-console-producer.sh --broker-list  localhost:9092,localhost:9093,localhost:9094 --topic test\n\n### 启动消费者（ctrl+Z结束）\nbin/kafka-console-consumer.sh --zookeeper  localhost:2185  --from-beginning --topic test\n\n### 创建有3个副本的topic\nbin/kafka-topics.sh --create --zookeeper localhost:2185 --replication-factor 1 --partitions 1 --topic my-replicated-topic\n\n### 查看每个topic的详细信息\nbinfka-topics.sh --describe --zookeeper localhost:2185 --topic my-replicated-topic\n\n### 使用 Kafka Connect 去导入和导出数据\nbin/connect-standalone.sh config/connect-standalone.properties config/connect-file-source.properties config/connect-file-sink.properties\n\n### 删除kafka topic\n1. 在kafka删除\nbin/kafka-topics.sh  --delete --zookeeper localhost:2185  --topic test\n2. 在kafka查看topic是否存在\nbin/kafka-topics.sh --list --zookeeper localhost:2185\n3. 在zk安装目录执行\nbin/zkCli.sh\n4. 查看topic\nls /brokers/topics\n5. 删除zktopic\ndeleteall /brokers/topics/test\ndeleteall /config/topics/test\ndeleteall /admin/delete_topics/test\n\n\n\n\n","slug":"kafka/operate","published":1,"date":"2021-01-26T10:03:56.637Z","updated":"2021-01-26T10:03:56.637Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkdu2ma4000sy74t6ems8xh8","content":"<p>kafka的基本操作，及搭建</p>\n<ul>\n<li><a id=\"more\"></a>\n</li>\n</ul>\n<h2 id=\"kafka基本操作\"><a href=\"#kafka基本操作\" class=\"headerlink\" title=\"kafka基本操作\"></a>kafka基本操作</h2><h3 id=\"启动单节点zk\"><a href=\"#启动单节点zk\" class=\"headerlink\" title=\"启动单节点zk\"></a>启动单节点zk</h3><p>nohup bin/zookeeper-server-start.sh config/zookeeper.properties &gt; logs/zk.log 2&gt;&amp;1 &amp;</p>\n<h3 id=\"启动单节点kafka\"><a href=\"#启动单节点kafka\" class=\"headerlink\" title=\"启动单节点kafka\"></a>启动单节点kafka</h3><p>nohup bin/kafka-server-start.sh config/server.properties &gt; logs/server.log 2&gt;&amp;1 &amp;</p>\n<h3 id=\"启动kafka集群\"><a href=\"#启动kafka集群\" class=\"headerlink\" title=\"启动kafka集群\"></a>启动kafka集群</h3><p>nohup bin/kafka-server-start.sh config/server-1.properties &gt; logs/server-1.log 2&gt;&amp;1 &amp;<br>nohup bin/kafka-server-start.sh config/server-2.properties &gt; logs/server-2.log 2&gt;&amp;1 &amp;</p>\n<h3 id=\"检测kafka服务\"><a href=\"#检测kafka服务\" class=\"headerlink\" title=\"检测kafka服务\"></a>检测kafka服务</h3><p>ps ax | grep -i ‘kafka.Kafka’ | grep java | grep -v grep | awk ‘{print $1}’</p>\n<h3 id=\"创建kafka-topic\"><a href=\"#创建kafka-topic\" class=\"headerlink\" title=\"创建kafka topic\"></a>创建kafka topic</h3><p>bin/kafka-topics.sh –create –zookeeper localhost:2185 –replication-factor 1  –partitions 1 –topic test</p>\n<h3 id=\"查看kafka所有topic\"><a href=\"#查看kafka所有topic\" class=\"headerlink\" title=\"查看kafka所有topic\"></a>查看kafka所有topic</h3><p>bin/kafka-topics.sh –list –zookeeper localhost:2185</p>\n<h3 id=\"启动生产者（ctrl-Z结束）\"><a href=\"#启动生产者（ctrl-Z结束）\" class=\"headerlink\" title=\"启动生产者（ctrl+Z结束）\"></a>启动生产者（ctrl+Z结束）</h3><p>bin/kafka-console-producer.sh –broker-list  localhost:9092,localhost:9093,localhost:9094 –topic test</p>\n<h3 id=\"启动消费者（ctrl-Z结束）\"><a href=\"#启动消费者（ctrl-Z结束）\" class=\"headerlink\" title=\"启动消费者（ctrl+Z结束）\"></a>启动消费者（ctrl+Z结束）</h3><p>bin/kafka-console-consumer.sh –zookeeper  localhost:2185  –from-beginning –topic test</p>\n<h3 id=\"创建有3个副本的topic\"><a href=\"#创建有3个副本的topic\" class=\"headerlink\" title=\"创建有3个副本的topic\"></a>创建有3个副本的topic</h3><p>bin/kafka-topics.sh –create –zookeeper localhost:2185 –replication-factor 1 –partitions 1 –topic my-replicated-topic</p>\n<h3 id=\"查看每个topic的详细信息\"><a href=\"#查看每个topic的详细信息\" class=\"headerlink\" title=\"查看每个topic的详细信息\"></a>查看每个topic的详细信息</h3><p>binfka-topics.sh –describe –zookeeper localhost:2185 –topic my-replicated-topic</p>\n<h3 id=\"使用-Kafka-Connect-去导入和导出数据\"><a href=\"#使用-Kafka-Connect-去导入和导出数据\" class=\"headerlink\" title=\"使用 Kafka Connect 去导入和导出数据\"></a>使用 Kafka Connect 去导入和导出数据</h3><p>bin/connect-standalone.sh config/connect-standalone.properties config/connect-file-source.properties config/connect-file-sink.properties</p>\n<h3 id=\"删除kafka-topic\"><a href=\"#删除kafka-topic\" class=\"headerlink\" title=\"删除kafka topic\"></a>删除kafka topic</h3><ol>\n<li>在kafka删除<br>bin/kafka-topics.sh  –delete –zookeeper localhost:2185  –topic test</li>\n<li>在kafka查看topic是否存在<br>bin/kafka-topics.sh –list –zookeeper localhost:2185</li>\n<li>在zk安装目录执行<br>bin/zkCli.sh</li>\n<li>查看topic<br>ls /brokers/topics</li>\n<li>删除zktopic<br>deleteall /brokers/topics/test<br>deleteall /config/topics/test<br>deleteall /admin/delete_topics/test</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>kafka的基本操作，及搭建</p>\n<ul>\n<li>","more":"</li>\n</ul>\n<h2 id=\"kafka基本操作\"><a href=\"#kafka基本操作\" class=\"headerlink\" title=\"kafka基本操作\"></a>kafka基本操作</h2><h3 id=\"启动单节点zk\"><a href=\"#启动单节点zk\" class=\"headerlink\" title=\"启动单节点zk\"></a>启动单节点zk</h3><p>nohup bin/zookeeper-server-start.sh config/zookeeper.properties &gt; logs/zk.log 2&gt;&amp;1 &amp;</p>\n<h3 id=\"启动单节点kafka\"><a href=\"#启动单节点kafka\" class=\"headerlink\" title=\"启动单节点kafka\"></a>启动单节点kafka</h3><p>nohup bin/kafka-server-start.sh config/server.properties &gt; logs/server.log 2&gt;&amp;1 &amp;</p>\n<h3 id=\"启动kafka集群\"><a href=\"#启动kafka集群\" class=\"headerlink\" title=\"启动kafka集群\"></a>启动kafka集群</h3><p>nohup bin/kafka-server-start.sh config/server-1.properties &gt; logs/server-1.log 2&gt;&amp;1 &amp;<br>nohup bin/kafka-server-start.sh config/server-2.properties &gt; logs/server-2.log 2&gt;&amp;1 &amp;</p>\n<h3 id=\"检测kafka服务\"><a href=\"#检测kafka服务\" class=\"headerlink\" title=\"检测kafka服务\"></a>检测kafka服务</h3><p>ps ax | grep -i ‘kafka.Kafka’ | grep java | grep -v grep | awk ‘{print $1}’</p>\n<h3 id=\"创建kafka-topic\"><a href=\"#创建kafka-topic\" class=\"headerlink\" title=\"创建kafka topic\"></a>创建kafka topic</h3><p>bin/kafka-topics.sh –create –zookeeper localhost:2185 –replication-factor 1  –partitions 1 –topic test</p>\n<h3 id=\"查看kafka所有topic\"><a href=\"#查看kafka所有topic\" class=\"headerlink\" title=\"查看kafka所有topic\"></a>查看kafka所有topic</h3><p>bin/kafka-topics.sh –list –zookeeper localhost:2185</p>\n<h3 id=\"启动生产者（ctrl-Z结束）\"><a href=\"#启动生产者（ctrl-Z结束）\" class=\"headerlink\" title=\"启动生产者（ctrl+Z结束）\"></a>启动生产者（ctrl+Z结束）</h3><p>bin/kafka-console-producer.sh –broker-list  localhost:9092,localhost:9093,localhost:9094 –topic test</p>\n<h3 id=\"启动消费者（ctrl-Z结束）\"><a href=\"#启动消费者（ctrl-Z结束）\" class=\"headerlink\" title=\"启动消费者（ctrl+Z结束）\"></a>启动消费者（ctrl+Z结束）</h3><p>bin/kafka-console-consumer.sh –zookeeper  localhost:2185  –from-beginning –topic test</p>\n<h3 id=\"创建有3个副本的topic\"><a href=\"#创建有3个副本的topic\" class=\"headerlink\" title=\"创建有3个副本的topic\"></a>创建有3个副本的topic</h3><p>bin/kafka-topics.sh –create –zookeeper localhost:2185 –replication-factor 1 –partitions 1 –topic my-replicated-topic</p>\n<h3 id=\"查看每个topic的详细信息\"><a href=\"#查看每个topic的详细信息\" class=\"headerlink\" title=\"查看每个topic的详细信息\"></a>查看每个topic的详细信息</h3><p>binfka-topics.sh –describe –zookeeper localhost:2185 –topic my-replicated-topic</p>\n<h3 id=\"使用-Kafka-Connect-去导入和导出数据\"><a href=\"#使用-Kafka-Connect-去导入和导出数据\" class=\"headerlink\" title=\"使用 Kafka Connect 去导入和导出数据\"></a>使用 Kafka Connect 去导入和导出数据</h3><p>bin/connect-standalone.sh config/connect-standalone.properties config/connect-file-source.properties config/connect-file-sink.properties</p>\n<h3 id=\"删除kafka-topic\"><a href=\"#删除kafka-topic\" class=\"headerlink\" title=\"删除kafka topic\"></a>删除kafka topic</h3><ol>\n<li>在kafka删除<br>bin/kafka-topics.sh  –delete –zookeeper localhost:2185  –topic test</li>\n<li>在kafka查看topic是否存在<br>bin/kafka-topics.sh –list –zookeeper localhost:2185</li>\n<li>在zk安装目录执行<br>bin/zkCli.sh</li>\n<li>查看topic<br>ls /brokers/topics</li>\n<li>删除zktopic<br>deleteall /brokers/topics/test<br>deleteall /config/topics/test<br>deleteall /admin/delete_topics/test</li>\n</ol>"},{"title":"Linux文件解压和压缩语法总结","date":"2017-05-04T16:00:00.000Z","_content":"\n> 大致总结了一下linux下各种格式的压缩包的压缩、解压方法。但是部分方法我没有用到，也就不全，希望大家帮我补充，我将随时修改完善，谢谢！ \n\n <!--more-->\n\n linux解压缩文件\nzip -r myfile.zip ./*  //压缩当前文件下的所有文件到myfile.zip\nsz \n\n解压\ntar -zxvf myfile.zip\n——————————————————\n　　 \n　　.tar \n　　解包：tar xvf FileName.tar \n　　打包：tar cvf FileName.tar DirName \n　　（注：tar是打包，不是压缩！） \n　　——————————————— \n　　.gz \n　　解压 1：gunzip FileName.gz \n　　解压2：gzip -d FileName.gz \n　　压缩：gzip FileName \n　　.tar.gz 和 .tgz \n　　解压：tar zxvf FileName.tar.gz \n　　压缩：tar zcvf FileName.tar.gz DirName \n　　——————————————— \n　　.bz2 \n　　解压1：bzip2 -d FileName.bz2 \n　　解压2：bunzip2 FileName.bz2 \n　　压缩： bzip2 -z FileName \n　　.tar.bz2 \n　　解压：tar jxvf FileName.tar.bz2       或tar --bzip xvf FileName.tar.bz2 \n　　压缩：tar jcvf FileName.tar.bz2 DirName \n　　 ——————————————— \n　　.bz \n　　解压1：bzip2 -d FileName.bz \n　　解压2：bunzip2 FileName.bz \n　　压缩：未知 \n　　.tar.bz \n　　解压：tar jxvf FileName.tar.bz \n　　压缩：未知 \n　　——————————————— \n　　.Z \n　　解压：uncompress FileName.Z \n　　压缩：compress FileName \n　　.tar.Z \n　　解压：tar Zxvf FileName.tar.Z \n　　压缩：tar Zcvf FileName.tar.Z DirName \n　　——————————————— \n　　.zip \n　　解压：unzip FileName.zip \n　　压缩：zip FileName.zip DirName \n　　压缩一个目录使用 -r 参数，-r 递归。例： $ zip -r FileName.zip DirName \n　　——————————————— \n　　.rar \n　　解压：rar x FileName.rar \n　　压缩：rar a FileName.rar DirName \n　　 \n　　rar 请到：http://www.rarsoft.com/download.htm 下载！ \n　　解压后请将rar_static拷贝到/usr /bin目录（其他由$PATH环境变量指定的目录也可以）： \n　　[root@www2 tmp]# cp rar_static /usr/bin/rar \n　　——————————————— \n　　.lha \n　　解压：lha -e FileName.lha \n　　压缩：lha -a FileName.lha FileName \n　　 \n　　lha请到：http://www.infor.kanazawa-it.ac.jp/~ishii/lhaunix/下载！ \n　　>解压后请将 lha拷贝到/usr/bin目录（其他由$PATH环境变量指定的目录也可以）： \n　　[root@www2 tmp]# cp lha /usr/bin/ \n　　——————————————— \n　　.rpm \n　　解包：rpm2cpio FileName.rpm | cpio -div \n　　——————————————— \n　　.deb \n　　解包：ar p FileName.deb data.tar.gz | tar zxf - \n　　——————————————— \n　　.tar .tgz .tar.gz .tar.Z .tar.bz .tar.bz2 .zip .cpio .rpm .deb .slp .arj .rar .ace .lha .lzh .lzx .lzs .arc .sda .sfx .lnx .zoo .cab .kar .cpt .pit .sit .sea \n　　解压：sEx x FileName.* \n　　压缩：sEx a FileName.* FileName \n　　 \n　　sEx只是调用相关程序，本身并无压缩、解压功能，请注意！ \n　　sEx请到： http://sourceforge.net/projects/sex下载！ \n　　解压后请将sEx拷贝到/usr/bin目录（其他由$PATH环境变量指定的目录也可以）： \n　　[root@www2 tmp]# cp sEx /usr/bin/　　\n\n#### Linux下常见文件解压方法及命令 \n\n　　系统·System \n　　\n　　1.以.a为扩展名的文件: \n　　#tar xv file.a \n　　2.以.z为扩展名的文件: \n　　#uncompress file.Z \n　　3.以.gz为扩展名的文件: \n　　#gunzip file.gz \n　　4.以.bz2为扩展名的文件: \n　　#bunzip2 file.bz2 \n　　5.以.tar.Z为扩展名的文件: \n　　#tar xvZf file.tar.Z \n　　或 #compress -dc file.tar.Z | tar xvf \n　　6.以.tar.gz/.tgz为扩展名的文件: \n　　#tar xvzf file.tar.gz \n　　或 gzip -dc file.tar.gz | tar xvf - \n　　7.以.tar.bz2为扩展名的文件: \n　　#tar xvIf file.tar.bz2 \n　　或 bzip2 -dc file.tar.bz2 | xvf - \n　　8.以.cpio.gz/.cgz为扩展名的文件: \n　　#gzip -dc file.cgz | cpio -div \n　　9. 以.cpio/cpio为扩展名的文件: \n　　#cpio -div file.cpio \n　　或cpio -divc file.cpio \n　　10.以.rpm为扩展名的文件安装: \n　　#rpm -i file.rpm \n　　11.以.rpm为扩展名的文件解压缩： \n　　 #rpm2cpio file.rpm | cpio -div \n　　12.以.deb为扩展名的文件安装： \n　　#dpkg -i file.deb \n　　13.以.deb为扩展名的文件解压缩: \n　　#dpkg-deb -fsys-tarfile file.deb | tar xvf - ar p \n　　file.deb data.tar.gz | tar xvzf - \n　　14.以.zip为扩展名的文件: \n　　#unzip file.zip \n　　在linux下解压Winzip格式的文件 \n　　要是装了jdk的话，可以用 jar命令；还可以使用unzip命令。 \n　　直接解压.tar.gz文件 \n　　xxxx.tar.gz文件使用tar带zxvf参数，可以一次解压开。XXXX为文件名。 例如： \n　　$tar zxvf xxxx.tar.gz \n\n#### 各种压缩文件的解压（安装方法） \n　　 \n　　文件扩展名 解压（安装方法） \n　　　 \n　　.a ar xv file.a \n　　.Z uncompress file.Z \n　　.gz gunzip file.gz \n　　.bz2 bunzip2 file.bz2 \n　　.tar.Z tar xvZf file.tar.Z \n　　compress -dc file.tar.Z | tar xvf - \n　　.tar.gz/.tgz tar xvzf file.tar.gz \n　　gzip -dc file.tar.gz | tar xvf - \n　　.tar.bz2 tar xvIf file.tar.bz2 \n　　bzip2 -dc file.tar.bz2 | xvf - \n　　.cpio.gz/.cgz gzip -dc file.cgz | cpio -div \n　　.cpio/cpio cpio -div file.cpio \n　　cpio -divc file.cpio \n　　.rpm/install rpm -i file.rpm \n　　.rpm/extract rpm2cpio file.rpm | cpio -div \n　　.deb/install dpkg -i file.deb \n　　.deb/exrtact dpkg-deb -fsys-tarfile file.deb | tar xvf - \n　　ar p file.deb data.tar.gz | tar xvzf - \n　　.zip unzip file.zip \n　　 \n　　 \n　　bzip2 -d myfile.tar.bz2 | tar xvf \n　　 \n　　 \n　　tar xvfz myfile.tar.bz2 \n　　 \n　　 \n　　x 是解压 \n　　v 是复杂输出 \n　　f 是指定文件 \n　　z gz格式 \n　　 \n　　 \n　　gzip \n　　gzip[选项]要压缩（或解压缩）的文件名 \n　　-c将输出写到标准输出上，并保留原有文件。 \n　　-d将压缩文件压缩。 \n　　-l对每个压缩文件，显示下列字段：压缩文件的大小，未压缩文件的大小、压缩比、未压缩文件的名字 \n　　-r递归式地查找指定目录并压缩或压缩其中的所有文件。 \n　　-t测试压缩文件是正完整。 \n　　-v对每一个压缩和解压缩的文件，显示其文件名和压缩比。 \n　　-num-用指定的数字调整压缩的速度。 \n　　举例： \n　　把/usr目录并包括它的子目录在内的全部文件做一备份，备份文件名为usr.tar \n　　tar cvf usr.tar /home \n　　把/usr 目录并包括它的子目录在内的全部文件做一备份并进行压缩，备份文件名是usr.tar.gz \n　　tar czvf usr.tar.gz /usr \n　　压缩一组文件，文件的后缀为tar.gz \n　　#tar cvf back.tar /back/ \n　　#gzip -q back.tar \n　　or \n　　#tar cvfz back.tar.gz /back/ \n　　释放一个后缀为tar.gz 的文件。 \n　　#tar zxvf back.tar.gz \n　　#gzip back.tar.gz \n　　#tar xvf back.tar","source":"_posts/linux/file.md","raw":"---\ntitle: Linux文件解压和压缩语法总结\ndate: 2017-05-05 00:00:00\ncategories: Linux\ntags:\n - linux\n - tar\n---\n\n> 大致总结了一下linux下各种格式的压缩包的压缩、解压方法。但是部分方法我没有用到，也就不全，希望大家帮我补充，我将随时修改完善，谢谢！ \n\n <!--more-->\n\n linux解压缩文件\nzip -r myfile.zip ./*  //压缩当前文件下的所有文件到myfile.zip\nsz \n\n解压\ntar -zxvf myfile.zip\n——————————————————\n　　 \n　　.tar \n　　解包：tar xvf FileName.tar \n　　打包：tar cvf FileName.tar DirName \n　　（注：tar是打包，不是压缩！） \n　　——————————————— \n　　.gz \n　　解压 1：gunzip FileName.gz \n　　解压2：gzip -d FileName.gz \n　　压缩：gzip FileName \n　　.tar.gz 和 .tgz \n　　解压：tar zxvf FileName.tar.gz \n　　压缩：tar zcvf FileName.tar.gz DirName \n　　——————————————— \n　　.bz2 \n　　解压1：bzip2 -d FileName.bz2 \n　　解压2：bunzip2 FileName.bz2 \n　　压缩： bzip2 -z FileName \n　　.tar.bz2 \n　　解压：tar jxvf FileName.tar.bz2       或tar --bzip xvf FileName.tar.bz2 \n　　压缩：tar jcvf FileName.tar.bz2 DirName \n　　 ——————————————— \n　　.bz \n　　解压1：bzip2 -d FileName.bz \n　　解压2：bunzip2 FileName.bz \n　　压缩：未知 \n　　.tar.bz \n　　解压：tar jxvf FileName.tar.bz \n　　压缩：未知 \n　　——————————————— \n　　.Z \n　　解压：uncompress FileName.Z \n　　压缩：compress FileName \n　　.tar.Z \n　　解压：tar Zxvf FileName.tar.Z \n　　压缩：tar Zcvf FileName.tar.Z DirName \n　　——————————————— \n　　.zip \n　　解压：unzip FileName.zip \n　　压缩：zip FileName.zip DirName \n　　压缩一个目录使用 -r 参数，-r 递归。例： $ zip -r FileName.zip DirName \n　　——————————————— \n　　.rar \n　　解压：rar x FileName.rar \n　　压缩：rar a FileName.rar DirName \n　　 \n　　rar 请到：http://www.rarsoft.com/download.htm 下载！ \n　　解压后请将rar_static拷贝到/usr /bin目录（其他由$PATH环境变量指定的目录也可以）： \n　　[root@www2 tmp]# cp rar_static /usr/bin/rar \n　　——————————————— \n　　.lha \n　　解压：lha -e FileName.lha \n　　压缩：lha -a FileName.lha FileName \n　　 \n　　lha请到：http://www.infor.kanazawa-it.ac.jp/~ishii/lhaunix/下载！ \n　　>解压后请将 lha拷贝到/usr/bin目录（其他由$PATH环境变量指定的目录也可以）： \n　　[root@www2 tmp]# cp lha /usr/bin/ \n　　——————————————— \n　　.rpm \n　　解包：rpm2cpio FileName.rpm | cpio -div \n　　——————————————— \n　　.deb \n　　解包：ar p FileName.deb data.tar.gz | tar zxf - \n　　——————————————— \n　　.tar .tgz .tar.gz .tar.Z .tar.bz .tar.bz2 .zip .cpio .rpm .deb .slp .arj .rar .ace .lha .lzh .lzx .lzs .arc .sda .sfx .lnx .zoo .cab .kar .cpt .pit .sit .sea \n　　解压：sEx x FileName.* \n　　压缩：sEx a FileName.* FileName \n　　 \n　　sEx只是调用相关程序，本身并无压缩、解压功能，请注意！ \n　　sEx请到： http://sourceforge.net/projects/sex下载！ \n　　解压后请将sEx拷贝到/usr/bin目录（其他由$PATH环境变量指定的目录也可以）： \n　　[root@www2 tmp]# cp sEx /usr/bin/　　\n\n#### Linux下常见文件解压方法及命令 \n\n　　系统·System \n　　\n　　1.以.a为扩展名的文件: \n　　#tar xv file.a \n　　2.以.z为扩展名的文件: \n　　#uncompress file.Z \n　　3.以.gz为扩展名的文件: \n　　#gunzip file.gz \n　　4.以.bz2为扩展名的文件: \n　　#bunzip2 file.bz2 \n　　5.以.tar.Z为扩展名的文件: \n　　#tar xvZf file.tar.Z \n　　或 #compress -dc file.tar.Z | tar xvf \n　　6.以.tar.gz/.tgz为扩展名的文件: \n　　#tar xvzf file.tar.gz \n　　或 gzip -dc file.tar.gz | tar xvf - \n　　7.以.tar.bz2为扩展名的文件: \n　　#tar xvIf file.tar.bz2 \n　　或 bzip2 -dc file.tar.bz2 | xvf - \n　　8.以.cpio.gz/.cgz为扩展名的文件: \n　　#gzip -dc file.cgz | cpio -div \n　　9. 以.cpio/cpio为扩展名的文件: \n　　#cpio -div file.cpio \n　　或cpio -divc file.cpio \n　　10.以.rpm为扩展名的文件安装: \n　　#rpm -i file.rpm \n　　11.以.rpm为扩展名的文件解压缩： \n　　 #rpm2cpio file.rpm | cpio -div \n　　12.以.deb为扩展名的文件安装： \n　　#dpkg -i file.deb \n　　13.以.deb为扩展名的文件解压缩: \n　　#dpkg-deb -fsys-tarfile file.deb | tar xvf - ar p \n　　file.deb data.tar.gz | tar xvzf - \n　　14.以.zip为扩展名的文件: \n　　#unzip file.zip \n　　在linux下解压Winzip格式的文件 \n　　要是装了jdk的话，可以用 jar命令；还可以使用unzip命令。 \n　　直接解压.tar.gz文件 \n　　xxxx.tar.gz文件使用tar带zxvf参数，可以一次解压开。XXXX为文件名。 例如： \n　　$tar zxvf xxxx.tar.gz \n\n#### 各种压缩文件的解压（安装方法） \n　　 \n　　文件扩展名 解压（安装方法） \n　　　 \n　　.a ar xv file.a \n　　.Z uncompress file.Z \n　　.gz gunzip file.gz \n　　.bz2 bunzip2 file.bz2 \n　　.tar.Z tar xvZf file.tar.Z \n　　compress -dc file.tar.Z | tar xvf - \n　　.tar.gz/.tgz tar xvzf file.tar.gz \n　　gzip -dc file.tar.gz | tar xvf - \n　　.tar.bz2 tar xvIf file.tar.bz2 \n　　bzip2 -dc file.tar.bz2 | xvf - \n　　.cpio.gz/.cgz gzip -dc file.cgz | cpio -div \n　　.cpio/cpio cpio -div file.cpio \n　　cpio -divc file.cpio \n　　.rpm/install rpm -i file.rpm \n　　.rpm/extract rpm2cpio file.rpm | cpio -div \n　　.deb/install dpkg -i file.deb \n　　.deb/exrtact dpkg-deb -fsys-tarfile file.deb | tar xvf - \n　　ar p file.deb data.tar.gz | tar xvzf - \n　　.zip unzip file.zip \n　　 \n　　 \n　　bzip2 -d myfile.tar.bz2 | tar xvf \n　　 \n　　 \n　　tar xvfz myfile.tar.bz2 \n　　 \n　　 \n　　x 是解压 \n　　v 是复杂输出 \n　　f 是指定文件 \n　　z gz格式 \n　　 \n　　 \n　　gzip \n　　gzip[选项]要压缩（或解压缩）的文件名 \n　　-c将输出写到标准输出上，并保留原有文件。 \n　　-d将压缩文件压缩。 \n　　-l对每个压缩文件，显示下列字段：压缩文件的大小，未压缩文件的大小、压缩比、未压缩文件的名字 \n　　-r递归式地查找指定目录并压缩或压缩其中的所有文件。 \n　　-t测试压缩文件是正完整。 \n　　-v对每一个压缩和解压缩的文件，显示其文件名和压缩比。 \n　　-num-用指定的数字调整压缩的速度。 \n　　举例： \n　　把/usr目录并包括它的子目录在内的全部文件做一备份，备份文件名为usr.tar \n　　tar cvf usr.tar /home \n　　把/usr 目录并包括它的子目录在内的全部文件做一备份并进行压缩，备份文件名是usr.tar.gz \n　　tar czvf usr.tar.gz /usr \n　　压缩一组文件，文件的后缀为tar.gz \n　　#tar cvf back.tar /back/ \n　　#gzip -q back.tar \n　　or \n　　#tar cvfz back.tar.gz /back/ \n　　释放一个后缀为tar.gz 的文件。 \n　　#tar zxvf back.tar.gz \n　　#gzip back.tar.gz \n　　#tar xvf back.tar","slug":"linux/file","published":1,"updated":"2021-01-26T10:03:56.637Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkdu2ma6000uy74t2q0rpew1","content":"<blockquote>\n<p>大致总结了一下linux下各种格式的压缩包的压缩、解压方法。但是部分方法我没有用到，也就不全，希望大家帮我补充，我将随时修改完善，谢谢！ </p>\n</blockquote>\n <a id=\"more\"></a>\n<p> linux解压缩文件<br>zip -r myfile.zip ./*  //压缩当前文件下的所有文件到myfile.zip<br>sz </p>\n<p>解压<br>tar -zxvf myfile.zip<br>——————————————————<br>　　<br>　　.tar<br>　　解包：tar xvf FileName.tar<br>　　打包：tar cvf FileName.tar DirName<br>　　（注：tar是打包，不是压缩！）<br>　　———————————————<br>　　.gz<br>　　解压 1：gunzip FileName.gz<br>　　解压2：gzip -d FileName.gz<br>　　压缩：gzip FileName<br>　　.tar.gz 和 .tgz<br>　　解压：tar zxvf FileName.tar.gz<br>　　压缩：tar zcvf FileName.tar.gz DirName<br>　　———————————————<br>　　.bz2<br>　　解压1：bzip2 -d FileName.bz2<br>　　解压2：bunzip2 FileName.bz2<br>　　压缩： bzip2 -z FileName<br>　　.tar.bz2<br>　　解压：tar jxvf FileName.tar.bz2       或tar –bzip xvf FileName.tar.bz2<br>　　压缩：tar jcvf FileName.tar.bz2 DirName<br>　　 ———————————————<br>　　.bz<br>　　解压1：bzip2 -d FileName.bz<br>　　解压2：bunzip2 FileName.bz<br>　　压缩：未知<br>　　.tar.bz<br>　　解压：tar jxvf FileName.tar.bz<br>　　压缩：未知<br>　　———————————————<br>　　.Z<br>　　解压：uncompress FileName.Z<br>　　压缩：compress FileName<br>　　.tar.Z<br>　　解压：tar Zxvf FileName.tar.Z<br>　　压缩：tar Zcvf FileName.tar.Z DirName<br>　　———————————————<br>　　.zip<br>　　解压：unzip FileName.zip<br>　　压缩：zip FileName.zip DirName<br>　　压缩一个目录使用 -r 参数，-r 递归。例： $ zip -r FileName.zip DirName<br>　　———————————————<br>　　.rar<br>　　解压：rar x FileName.rar<br>　　压缩：rar a FileName.rar DirName<br>　　<br>　　rar 请到：<a href=\"http://www.rarsoft.com/download.htm\" target=\"_blank\" rel=\"external\">http://www.rarsoft.com/download.htm</a> 下载！<br>　　解压后请将rar_static拷贝到/usr /bin目录（其他由$PATH环境变量指定的目录也可以）：<br>　　[root@www2 tmp]# cp rar_static /usr/bin/rar<br>　　———————————————<br>　　.lha<br>　　解压：lha -e FileName.lha<br>　　压缩：lha -a FileName.lha FileName<br>　　<br>　　lha请到：<a href=\"http://www.infor.kanazawa-it.ac.jp/~ishii/lhaunix/下载！\" target=\"_blank\" rel=\"external\">http://www.infor.kanazawa-it.ac.jp/~ishii/lhaunix/下载！</a><br>　　&gt;解压后请将 lha拷贝到/usr/bin目录（其他由$PATH环境变量指定的目录也可以）：<br>　　[root@www2 tmp]# cp lha /usr/bin/<br>　　———————————————<br>　　.rpm<br>　　解包：rpm2cpio FileName.rpm | cpio -div<br>　　———————————————<br>　　.deb<br>　　解包：ar p FileName.deb data.tar.gz | tar zxf -<br>　　———————————————<br>　　.tar .tgz .tar.gz .tar.Z .tar.bz .tar.bz2 .zip .cpio .rpm .deb .slp .arj .rar .ace .lha .lzh .lzx .lzs .arc .sda .sfx .lnx .zoo .cab .kar .cpt .pit .sit .sea<br>　　解压：sEx x FileName.<em><br>　　压缩：sEx a FileName.</em> FileName<br>　　<br>　　sEx只是调用相关程序，本身并无压缩、解压功能，请注意！<br>　　sEx请到： <a href=\"http://sourceforge.net/projects/sex下载！\" target=\"_blank\" rel=\"external\">http://sourceforge.net/projects/sex下载！</a><br>　　解压后请将sEx拷贝到/usr/bin目录（其他由$PATH环境变量指定的目录也可以）：<br>　　[root@www2 tmp]# cp sEx /usr/bin/　　</p>\n<h4 id=\"Linux下常见文件解压方法及命令\"><a href=\"#Linux下常见文件解压方法及命令\" class=\"headerlink\" title=\"Linux下常见文件解压方法及命令\"></a>Linux下常见文件解压方法及命令</h4><p>　　系统·System<br>　　<br>　　1.以.a为扩展名的文件:<br>　　#tar xv file.a<br>　　2.以.z为扩展名的文件:<br>　　#uncompress file.Z<br>　　3.以.gz为扩展名的文件:<br>　　#gunzip file.gz<br>　　4.以.bz2为扩展名的文件:<br>　　#bunzip2 file.bz2<br>　　5.以.tar.Z为扩展名的文件:<br>　　#tar xvZf file.tar.Z<br>　　或 #compress -dc file.tar.Z | tar xvf<br>　　6.以.tar.gz/.tgz为扩展名的文件:<br>　　#tar xvzf file.tar.gz<br>　　或 gzip -dc file.tar.gz | tar xvf -<br>　　7.以.tar.bz2为扩展名的文件:<br>　　#tar xvIf file.tar.bz2<br>　　或 bzip2 -dc file.tar.bz2 | xvf -<br>　　8.以.cpio.gz/.cgz为扩展名的文件:<br>　　#gzip -dc file.cgz | cpio -div<br>　　9. 以.cpio/cpio为扩展名的文件:<br>　　#cpio -div file.cpio<br>　　或cpio -divc file.cpio<br>　　10.以.rpm为扩展名的文件安装:<br>　　#rpm -i file.rpm<br>　　11.以.rpm为扩展名的文件解压缩：<br>　　 #rpm2cpio file.rpm | cpio -div<br>　　12.以.deb为扩展名的文件安装：<br>　　#dpkg -i file.deb<br>　　13.以.deb为扩展名的文件解压缩:<br>　　#dpkg-deb -fsys-tarfile file.deb | tar xvf - ar p<br>　　file.deb data.tar.gz | tar xvzf -<br>　　14.以.zip为扩展名的文件:<br>　　#unzip file.zip<br>　　在linux下解压Winzip格式的文件<br>　　要是装了jdk的话，可以用 jar命令；还可以使用unzip命令。<br>　　直接解压.tar.gz文件<br>　　xxxx.tar.gz文件使用tar带zxvf参数，可以一次解压开。XXXX为文件名。 例如：<br>　　$tar zxvf xxxx.tar.gz </p>\n<h4 id=\"各种压缩文件的解压（安装方法）\"><a href=\"#各种压缩文件的解压（安装方法）\" class=\"headerlink\" title=\"各种压缩文件的解压（安装方法）\"></a>各种压缩文件的解压（安装方法）</h4><p>　　<br>　　文件扩展名 解压（安装方法）<br>　　　<br>　　.a ar xv file.a<br>　　.Z uncompress file.Z<br>　　.gz gunzip file.gz<br>　　.bz2 bunzip2 file.bz2<br>　　.tar.Z tar xvZf file.tar.Z<br>　　compress -dc file.tar.Z | tar xvf -<br>　　.tar.gz/.tgz tar xvzf file.tar.gz<br>　　gzip -dc file.tar.gz | tar xvf -<br>　　.tar.bz2 tar xvIf file.tar.bz2<br>　　bzip2 -dc file.tar.bz2 | xvf -<br>　　.cpio.gz/.cgz gzip -dc file.cgz | cpio -div<br>　　.cpio/cpio cpio -div file.cpio<br>　　cpio -divc file.cpio<br>　　.rpm/install rpm -i file.rpm<br>　　.rpm/extract rpm2cpio file.rpm | cpio -div<br>　　.deb/install dpkg -i file.deb<br>　　.deb/exrtact dpkg-deb -fsys-tarfile file.deb | tar xvf -<br>　　ar p file.deb data.tar.gz | tar xvzf -<br>　　.zip unzip file.zip<br>　　<br>　　<br>　　bzip2 -d myfile.tar.bz2 | tar xvf<br>　　<br>　　<br>　　tar xvfz myfile.tar.bz2<br>　　<br>　　<br>　　x 是解压<br>　　v 是复杂输出<br>　　f 是指定文件<br>　　z gz格式<br>　　<br>　　<br>　　gzip<br>　　gzip[选项]要压缩（或解压缩）的文件名<br>　　-c将输出写到标准输出上，并保留原有文件。<br>　　-d将压缩文件压缩。<br>　　-l对每个压缩文件，显示下列字段：压缩文件的大小，未压缩文件的大小、压缩比、未压缩文件的名字<br>　　-r递归式地查找指定目录并压缩或压缩其中的所有文件。<br>　　-t测试压缩文件是正完整。<br>　　-v对每一个压缩和解压缩的文件，显示其文件名和压缩比。<br>　　-num-用指定的数字调整压缩的速度。<br>　　举例：<br>　　把/usr目录并包括它的子目录在内的全部文件做一备份，备份文件名为usr.tar<br>　　tar cvf usr.tar /home<br>　　把/usr 目录并包括它的子目录在内的全部文件做一备份并进行压缩，备份文件名是usr.tar.gz<br>　　tar czvf usr.tar.gz /usr<br>　　压缩一组文件，文件的后缀为tar.gz<br>　　#tar cvf back.tar /back/<br>　　#gzip -q back.tar<br>　　or<br>　　#tar cvfz back.tar.gz /back/<br>　　释放一个后缀为tar.gz 的文件。<br>　　#tar zxvf back.tar.gz<br>　　#gzip back.tar.gz<br>　　#tar xvf back.tar</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>大致总结了一下linux下各种格式的压缩包的压缩、解压方法。但是部分方法我没有用到，也就不全，希望大家帮我补充，我将随时修改完善，谢谢！ </p>\n</blockquote>","more":"<p> linux解压缩文件<br>zip -r myfile.zip ./*  //压缩当前文件下的所有文件到myfile.zip<br>sz </p>\n<p>解压<br>tar -zxvf myfile.zip<br>——————————————————<br>　　<br>　　.tar<br>　　解包：tar xvf FileName.tar<br>　　打包：tar cvf FileName.tar DirName<br>　　（注：tar是打包，不是压缩！）<br>　　———————————————<br>　　.gz<br>　　解压 1：gunzip FileName.gz<br>　　解压2：gzip -d FileName.gz<br>　　压缩：gzip FileName<br>　　.tar.gz 和 .tgz<br>　　解压：tar zxvf FileName.tar.gz<br>　　压缩：tar zcvf FileName.tar.gz DirName<br>　　———————————————<br>　　.bz2<br>　　解压1：bzip2 -d FileName.bz2<br>　　解压2：bunzip2 FileName.bz2<br>　　压缩： bzip2 -z FileName<br>　　.tar.bz2<br>　　解压：tar jxvf FileName.tar.bz2       或tar –bzip xvf FileName.tar.bz2<br>　　压缩：tar jcvf FileName.tar.bz2 DirName<br>　　 ———————————————<br>　　.bz<br>　　解压1：bzip2 -d FileName.bz<br>　　解压2：bunzip2 FileName.bz<br>　　压缩：未知<br>　　.tar.bz<br>　　解压：tar jxvf FileName.tar.bz<br>　　压缩：未知<br>　　———————————————<br>　　.Z<br>　　解压：uncompress FileName.Z<br>　　压缩：compress FileName<br>　　.tar.Z<br>　　解压：tar Zxvf FileName.tar.Z<br>　　压缩：tar Zcvf FileName.tar.Z DirName<br>　　———————————————<br>　　.zip<br>　　解压：unzip FileName.zip<br>　　压缩：zip FileName.zip DirName<br>　　压缩一个目录使用 -r 参数，-r 递归。例： $ zip -r FileName.zip DirName<br>　　———————————————<br>　　.rar<br>　　解压：rar x FileName.rar<br>　　压缩：rar a FileName.rar DirName<br>　　<br>　　rar 请到：<a href=\"http://www.rarsoft.com/download.htm\">http://www.rarsoft.com/download.htm</a> 下载！<br>　　解压后请将rar_static拷贝到/usr /bin目录（其他由$PATH环境变量指定的目录也可以）：<br>　　[root@www2 tmp]# cp rar_static /usr/bin/rar<br>　　———————————————<br>　　.lha<br>　　解压：lha -e FileName.lha<br>　　压缩：lha -a FileName.lha FileName<br>　　<br>　　lha请到：<a href=\"http://www.infor.kanazawa-it.ac.jp/~ishii/lhaunix/下载！\">http://www.infor.kanazawa-it.ac.jp/~ishii/lhaunix/下载！</a><br>　　&gt;解压后请将 lha拷贝到/usr/bin目录（其他由$PATH环境变量指定的目录也可以）：<br>　　[root@www2 tmp]# cp lha /usr/bin/<br>　　———————————————<br>　　.rpm<br>　　解包：rpm2cpio FileName.rpm | cpio -div<br>　　———————————————<br>　　.deb<br>　　解包：ar p FileName.deb data.tar.gz | tar zxf -<br>　　———————————————<br>　　.tar .tgz .tar.gz .tar.Z .tar.bz .tar.bz2 .zip .cpio .rpm .deb .slp .arj .rar .ace .lha .lzh .lzx .lzs .arc .sda .sfx .lnx .zoo .cab .kar .cpt .pit .sit .sea<br>　　解压：sEx x FileName.<em><br>　　压缩：sEx a FileName.</em> FileName<br>　　<br>　　sEx只是调用相关程序，本身并无压缩、解压功能，请注意！<br>　　sEx请到： <a href=\"http://sourceforge.net/projects/sex下载！\">http://sourceforge.net/projects/sex下载！</a><br>　　解压后请将sEx拷贝到/usr/bin目录（其他由$PATH环境变量指定的目录也可以）：<br>　　[root@www2 tmp]# cp sEx /usr/bin/　　</p>\n<h4 id=\"Linux下常见文件解压方法及命令\"><a href=\"#Linux下常见文件解压方法及命令\" class=\"headerlink\" title=\"Linux下常见文件解压方法及命令\"></a>Linux下常见文件解压方法及命令</h4><p>　　系统·System<br>　　<br>　　1.以.a为扩展名的文件:<br>　　#tar xv file.a<br>　　2.以.z为扩展名的文件:<br>　　#uncompress file.Z<br>　　3.以.gz为扩展名的文件:<br>　　#gunzip file.gz<br>　　4.以.bz2为扩展名的文件:<br>　　#bunzip2 file.bz2<br>　　5.以.tar.Z为扩展名的文件:<br>　　#tar xvZf file.tar.Z<br>　　或 #compress -dc file.tar.Z | tar xvf<br>　　6.以.tar.gz/.tgz为扩展名的文件:<br>　　#tar xvzf file.tar.gz<br>　　或 gzip -dc file.tar.gz | tar xvf -<br>　　7.以.tar.bz2为扩展名的文件:<br>　　#tar xvIf file.tar.bz2<br>　　或 bzip2 -dc file.tar.bz2 | xvf -<br>　　8.以.cpio.gz/.cgz为扩展名的文件:<br>　　#gzip -dc file.cgz | cpio -div<br>　　9. 以.cpio/cpio为扩展名的文件:<br>　　#cpio -div file.cpio<br>　　或cpio -divc file.cpio<br>　　10.以.rpm为扩展名的文件安装:<br>　　#rpm -i file.rpm<br>　　11.以.rpm为扩展名的文件解压缩：<br>　　 #rpm2cpio file.rpm | cpio -div<br>　　12.以.deb为扩展名的文件安装：<br>　　#dpkg -i file.deb<br>　　13.以.deb为扩展名的文件解压缩:<br>　　#dpkg-deb -fsys-tarfile file.deb | tar xvf - ar p<br>　　file.deb data.tar.gz | tar xvzf -<br>　　14.以.zip为扩展名的文件:<br>　　#unzip file.zip<br>　　在linux下解压Winzip格式的文件<br>　　要是装了jdk的话，可以用 jar命令；还可以使用unzip命令。<br>　　直接解压.tar.gz文件<br>　　xxxx.tar.gz文件使用tar带zxvf参数，可以一次解压开。XXXX为文件名。 例如：<br>　　$tar zxvf xxxx.tar.gz </p>\n<h4 id=\"各种压缩文件的解压（安装方法）\"><a href=\"#各种压缩文件的解压（安装方法）\" class=\"headerlink\" title=\"各种压缩文件的解压（安装方法）\"></a>各种压缩文件的解压（安装方法）</h4><p>　　<br>　　文件扩展名 解压（安装方法）<br>　　　<br>　　.a ar xv file.a<br>　　.Z uncompress file.Z<br>　　.gz gunzip file.gz<br>　　.bz2 bunzip2 file.bz2<br>　　.tar.Z tar xvZf file.tar.Z<br>　　compress -dc file.tar.Z | tar xvf -<br>　　.tar.gz/.tgz tar xvzf file.tar.gz<br>　　gzip -dc file.tar.gz | tar xvf -<br>　　.tar.bz2 tar xvIf file.tar.bz2<br>　　bzip2 -dc file.tar.bz2 | xvf -<br>　　.cpio.gz/.cgz gzip -dc file.cgz | cpio -div<br>　　.cpio/cpio cpio -div file.cpio<br>　　cpio -divc file.cpio<br>　　.rpm/install rpm -i file.rpm<br>　　.rpm/extract rpm2cpio file.rpm | cpio -div<br>　　.deb/install dpkg -i file.deb<br>　　.deb/exrtact dpkg-deb -fsys-tarfile file.deb | tar xvf -<br>　　ar p file.deb data.tar.gz | tar xvzf -<br>　　.zip unzip file.zip<br>　　<br>　　<br>　　bzip2 -d myfile.tar.bz2 | tar xvf<br>　　<br>　　<br>　　tar xvfz myfile.tar.bz2<br>　　<br>　　<br>　　x 是解压<br>　　v 是复杂输出<br>　　f 是指定文件<br>　　z gz格式<br>　　<br>　　<br>　　gzip<br>　　gzip[选项]要压缩（或解压缩）的文件名<br>　　-c将输出写到标准输出上，并保留原有文件。<br>　　-d将压缩文件压缩。<br>　　-l对每个压缩文件，显示下列字段：压缩文件的大小，未压缩文件的大小、压缩比、未压缩文件的名字<br>　　-r递归式地查找指定目录并压缩或压缩其中的所有文件。<br>　　-t测试压缩文件是正完整。<br>　　-v对每一个压缩和解压缩的文件，显示其文件名和压缩比。<br>　　-num-用指定的数字调整压缩的速度。<br>　　举例：<br>　　把/usr目录并包括它的子目录在内的全部文件做一备份，备份文件名为usr.tar<br>　　tar cvf usr.tar /home<br>　　把/usr 目录并包括它的子目录在内的全部文件做一备份并进行压缩，备份文件名是usr.tar.gz<br>　　tar czvf usr.tar.gz /usr<br>　　压缩一组文件，文件的后缀为tar.gz<br>　　#tar cvf back.tar /back/<br>　　#gzip -q back.tar<br>　　or<br>　　#tar cvfz back.tar.gz /back/<br>　　释放一个后缀为tar.gz 的文件。<br>　　#tar zxvf back.tar.gz<br>　　#gzip back.tar.gz<br>　　#tar xvf back.tar</p>"},{"title":"centos 6.3 python 2.6版本升级到2.7","date":"2017-08-13T16:00:00.000Z","_content":"\ncentos 操作系统6.3 python版本由2.6升级到2.7\n\n <!-- more -->\n\n## 操作流程\n\n1. **查看当前python版本**\npython  -V\n\n2. **下载Python-2.7.3**\nwget http://python.org/ftp/python/2.7.3/Python-2.7.3.tar.bz2\n（备注：如果不能下载，可直接在浏览器输入上面地址，下载好以后，上传到机器即可）\n\n3. **更改工作目录**\ncd Python-2.7.3\n\n4. **安装**\n./configure\nmake all\nmake install\n\n5. **查看安装后的版本信息**\n/usr/local/bin/python2.7 -V\n\n6. **建立软连接，使系统默认的 python指向 python2.7**\nmv /usr/bin/python /usr/bin/python2.6.6 #移除原有的2.6\nln -s /usr/local/bin/python2.7 /usr/bin/python\n\n7. **重新检验Python 版本**\npython -V\n\n8. **解决系统 Python 软链接指向 Python2.7 版本后，因为yum是不兼容 Python 2.7的，所以yum不能正常工作，我们需要指定 yum 的Python版本**\nvi /usr/bin/yum\n将文件头部的 #!/usr/bin/python 改为 #!/usr/bin/python2.6.6","source":"_posts/linux/python_install.md","raw":"---\ntitle: centos 6.3 python 2.6版本升级到2.7\ndate: 2017-08-14 00:00:00\ncategories: python,linux\ntags:\n - linux\n - python\n---\n\ncentos 操作系统6.3 python版本由2.6升级到2.7\n\n <!-- more -->\n\n## 操作流程\n\n1. **查看当前python版本**\npython  -V\n\n2. **下载Python-2.7.3**\nwget http://python.org/ftp/python/2.7.3/Python-2.7.3.tar.bz2\n（备注：如果不能下载，可直接在浏览器输入上面地址，下载好以后，上传到机器即可）\n\n3. **更改工作目录**\ncd Python-2.7.3\n\n4. **安装**\n./configure\nmake all\nmake install\n\n5. **查看安装后的版本信息**\n/usr/local/bin/python2.7 -V\n\n6. **建立软连接，使系统默认的 python指向 python2.7**\nmv /usr/bin/python /usr/bin/python2.6.6 #移除原有的2.6\nln -s /usr/local/bin/python2.7 /usr/bin/python\n\n7. **重新检验Python 版本**\npython -V\n\n8. **解决系统 Python 软链接指向 Python2.7 版本后，因为yum是不兼容 Python 2.7的，所以yum不能正常工作，我们需要指定 yum 的Python版本**\nvi /usr/bin/yum\n将文件头部的 #!/usr/bin/python 改为 #!/usr/bin/python2.6.6","slug":"linux/python_install","published":1,"updated":"2021-01-26T10:03:56.637Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkdu2ma9000xy74t41bn1ikh","content":"<p>centos 操作系统6.3 python版本由2.6升级到2.7</p>\n <a id=\"more\"></a>\n<h2 id=\"操作流程\"><a href=\"#操作流程\" class=\"headerlink\" title=\"操作流程\"></a>操作流程</h2><ol>\n<li><p><strong>查看当前python版本</strong><br>python  -V</p>\n</li>\n<li><p><strong>下载Python-2.7.3</strong><br>wget <a href=\"http://python.org/ftp/python/2.7.3/Python-2.7.3.tar.bz2\" target=\"_blank\" rel=\"external\">http://python.org/ftp/python/2.7.3/Python-2.7.3.tar.bz2</a><br>（备注：如果不能下载，可直接在浏览器输入上面地址，下载好以后，上传到机器即可）</p>\n</li>\n<li><p><strong>更改工作目录</strong><br>cd Python-2.7.3</p>\n</li>\n<li><p><strong>安装</strong><br>./configure<br>make all<br>make install</p>\n</li>\n<li><p><strong>查看安装后的版本信息</strong><br>/usr/local/bin/python2.7 -V</p>\n</li>\n<li><p><strong>建立软连接，使系统默认的 python指向 python2.7</strong><br>mv /usr/bin/python /usr/bin/python2.6.6 #移除原有的2.6<br>ln -s /usr/local/bin/python2.7 /usr/bin/python</p>\n</li>\n<li><p><strong>重新检验Python 版本</strong><br>python -V</p>\n</li>\n<li><p><strong>解决系统 Python 软链接指向 Python2.7 版本后，因为yum是不兼容 Python 2.7的，所以yum不能正常工作，我们需要指定 yum 的Python版本</strong><br>vi /usr/bin/yum<br>将文件头部的 #!/usr/bin/python 改为 #!/usr/bin/python2.6.6</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>centos 操作系统6.3 python版本由2.6升级到2.7</p>","more":"<h2 id=\"操作流程\"><a href=\"#操作流程\" class=\"headerlink\" title=\"操作流程\"></a>操作流程</h2><ol>\n<li><p><strong>查看当前python版本</strong><br>python  -V</p>\n</li>\n<li><p><strong>下载Python-2.7.3</strong><br>wget <a href=\"http://python.org/ftp/python/2.7.3/Python-2.7.3.tar.bz2\">http://python.org/ftp/python/2.7.3/Python-2.7.3.tar.bz2</a><br>（备注：如果不能下载，可直接在浏览器输入上面地址，下载好以后，上传到机器即可）</p>\n</li>\n<li><p><strong>更改工作目录</strong><br>cd Python-2.7.3</p>\n</li>\n<li><p><strong>安装</strong><br>./configure<br>make all<br>make install</p>\n</li>\n<li><p><strong>查看安装后的版本信息</strong><br>/usr/local/bin/python2.7 -V</p>\n</li>\n<li><p><strong>建立软连接，使系统默认的 python指向 python2.7</strong><br>mv /usr/bin/python /usr/bin/python2.6.6 #移除原有的2.6<br>ln -s /usr/local/bin/python2.7 /usr/bin/python</p>\n</li>\n<li><p><strong>重新检验Python 版本</strong><br>python -V</p>\n</li>\n<li><p><strong>解决系统 Python 软链接指向 Python2.7 版本后，因为yum是不兼容 Python 2.7的，所以yum不能正常工作，我们需要指定 yum 的Python版本</strong><br>vi /usr/bin/yum<br>将文件头部的 #!/usr/bin/python 改为 #!/usr/bin/python2.6.6</p>\n</li>\n</ol>"},{"title":"ps学习","date":"2017-05-03T16:00:00.000Z","_content":"\nPhotoshop学习笔记\n \n <!--more-->\n\n### 基础操作\n\n1. 文件打开\n ```\n文件打开的‘图像序列’ 选定时，会自动弹出‘帧’,图层右下角会有‘胶片的图标’，不勾选，就没有这个标志。有这个标志，说明是属于图层里的视频图层\n打开视频文件：安装quicktimeinstaller\npsd文件为photoshop文件\n在bridge中浏览：bridge为桥，\n ``` \n新建画布：\n图片分辨率，网页展示，70，印刷要300\n\n \n \n \n \n \n \n \n \n ","source":"_posts/ps/ps.md","raw":"---\ntitle: ps学习\ndate: 2017-05-04 00:00:00\ncategories: Photoshop\ntags:\n - Photoshop\n---\n\nPhotoshop学习笔记\n \n <!--more-->\n\n### 基础操作\n\n1. 文件打开\n ```\n文件打开的‘图像序列’ 选定时，会自动弹出‘帧’,图层右下角会有‘胶片的图标’，不勾选，就没有这个标志。有这个标志，说明是属于图层里的视频图层\n打开视频文件：安装quicktimeinstaller\npsd文件为photoshop文件\n在bridge中浏览：bridge为桥，\n ``` \n新建画布：\n图片分辨率，网页展示，70，印刷要300\n\n \n \n \n \n \n \n \n \n ","slug":"ps/ps","published":1,"updated":"2021-01-26T10:03:56.639Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkdu2mab0010y74t6d59jij1","content":"<p>Photoshop学习笔记</p>\n <a id=\"more\"></a>\n<h3 id=\"基础操作\"><a href=\"#基础操作\" class=\"headerlink\" title=\"基础操作\"></a>基础操作</h3><ol>\n<li>文件打开<pre><code>文件打开的‘图像序列’ 选定时，会自动弹出‘帧’,图层右下角会有‘胶片的图标’，不勾选，就没有这个标志。有这个标志，说明是属于图层里的视频图层\n打开视频文件：安装quicktimeinstaller\npsd文件为photoshop文件\n在bridge中浏览：bridge为桥，\n</code></pre>新建画布：<br>图片分辨率，网页展示，70，印刷要300</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>Photoshop学习笔记</p>","more":"<h3 id=\"基础操作\"><a href=\"#基础操作\" class=\"headerlink\" title=\"基础操作\"></a>基础操作</h3><ol>\n<li>文件打开<pre><code>文件打开的‘图像序列’ 选定时，会自动弹出‘帧’,图层右下角会有‘胶片的图标’，不勾选，就没有这个标志。有这个标志，说明是属于图层里的视频图层\n打开视频文件：安装quicktimeinstaller\npsd文件为photoshop文件\n在bridge中浏览：bridge为桥，\n</code></pre>新建画布：<br>图片分辨率，网页展示，70，印刷要300</li>\n</ol>"},{"title":"MVC，MVP 和 MVVM 的图示","_content":"![GitHub Logo](/img/vue/20170925123312.jpg)\n复杂的软件必须有清晰合理的架构，否则无法开发和维护。MVC（Model-View-Controller）是最常见的软件架构之一，业界有着广泛应用\n\n+ <!-- more -->\n\n## MVC\n\nMVC模式的意思是，软件可以分成三个部分。\n![GitHub Logo](/img/vue/bg2015020104.png)\n```\n视图（View）：用户界面。\n控制器（Controller）：业务逻辑\n模型（Model）：数据保存\n```\n![GitHub Logo](/img/vue/bg2015020105.png)\n\n```\nView 传送指令到 Controller\nController 完成业务逻辑后，要求 Model 改变状态\nModel 将新的数据发送到 View，用户得到反馈\n```\n\n所有通信都是单向的。\n\n## 互动模式\n\n接受用户指令时，MVC 可以分成两种方式。一种是通过 View 接受指令，传递给 Controller。\n\n![GitHub Logo](/img/vue/bg2015020106.png)\n\n另一种是直接通过controller接受指令。\n![GitHub Logo](/img/vue/bg2015020107.png)\n\n\n## 实例：Backbone\n![GitHub Logo](/img/vue/bg2015020108.png)\n\n```\n用户可以向 View 发送指令（DOM 事件），再由 View 直接要求 Model 改变状态。\n用户也可以直接向 Controller 发送指令（改变 URL 触发 hashChange 事件），再由 Controller 发送给 View。\nController 非常薄，只起到路由的作用，而 View 非常厚，业务逻辑都部署在 View。所以，Backbone 索性取消了Controller，只保留一个 Router（路由器） 。\n```\n\n## MVP\n\nMVP 模式将 Controller 改名为 Presenter，同时改变了通信方向。\n\n![GitHub Logo](/img/vue/bg2015020109.png)\n```\n各部分之间的通信，都是双向的。\nView 与 Model 不发生联系，都通过 Presenter 传递。\nView 非常薄，不部署任何业务逻辑，称为\"被动视图\"（Passive View），即没有任何主动性，而Presenter非常厚，所有逻辑都部署在那里。\n```\n\n\n## MVVM\n\nMVVM 模式将 Presenter 改名为 ViewModel，基本上与 MVP 模式完全一致。\n\n![GitHub Logo](/img/vue/bg2015020110.png)\n\n唯一的区别是，它采用双向绑定（data-binding）：View的变动，自动反映在 ViewModel，反之亦然。Angular 和Ember 都采用这种模式。\n\n\n","source":"_posts/vue/mvc.md","raw":"---\ntitle: MVC，MVP 和 MVVM 的图示\n---\n![GitHub Logo](/img/vue/20170925123312.jpg)\n复杂的软件必须有清晰合理的架构，否则无法开发和维护。MVC（Model-View-Controller）是最常见的软件架构之一，业界有着广泛应用\n\n+ <!-- more -->\n\n## MVC\n\nMVC模式的意思是，软件可以分成三个部分。\n![GitHub Logo](/img/vue/bg2015020104.png)\n```\n视图（View）：用户界面。\n控制器（Controller）：业务逻辑\n模型（Model）：数据保存\n```\n![GitHub Logo](/img/vue/bg2015020105.png)\n\n```\nView 传送指令到 Controller\nController 完成业务逻辑后，要求 Model 改变状态\nModel 将新的数据发送到 View，用户得到反馈\n```\n\n所有通信都是单向的。\n\n## 互动模式\n\n接受用户指令时，MVC 可以分成两种方式。一种是通过 View 接受指令，传递给 Controller。\n\n![GitHub Logo](/img/vue/bg2015020106.png)\n\n另一种是直接通过controller接受指令。\n![GitHub Logo](/img/vue/bg2015020107.png)\n\n\n## 实例：Backbone\n![GitHub Logo](/img/vue/bg2015020108.png)\n\n```\n用户可以向 View 发送指令（DOM 事件），再由 View 直接要求 Model 改变状态。\n用户也可以直接向 Controller 发送指令（改变 URL 触发 hashChange 事件），再由 Controller 发送给 View。\nController 非常薄，只起到路由的作用，而 View 非常厚，业务逻辑都部署在 View。所以，Backbone 索性取消了Controller，只保留一个 Router（路由器） 。\n```\n\n## MVP\n\nMVP 模式将 Controller 改名为 Presenter，同时改变了通信方向。\n\n![GitHub Logo](/img/vue/bg2015020109.png)\n```\n各部分之间的通信，都是双向的。\nView 与 Model 不发生联系，都通过 Presenter 传递。\nView 非常薄，不部署任何业务逻辑，称为\"被动视图\"（Passive View），即没有任何主动性，而Presenter非常厚，所有逻辑都部署在那里。\n```\n\n\n## MVVM\n\nMVVM 模式将 Presenter 改名为 ViewModel，基本上与 MVP 模式完全一致。\n\n![GitHub Logo](/img/vue/bg2015020110.png)\n\n唯一的区别是，它采用双向绑定（data-binding）：View的变动，自动反映在 ViewModel，反之亦然。Angular 和Ember 都采用这种模式。\n\n\n","slug":"vue/mvc","published":1,"date":"2021-01-26T10:03:56.639Z","updated":"2021-01-26T10:03:56.639Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkdu2mad0013y74ths4rut2o","content":"<p><img src=\"/img/vue/20170925123312.jpg\" alt=\"GitHub Logo\"><br>复杂的软件必须有清晰合理的架构，否则无法开发和维护。MVC（Model-View-Controller）是最常见的软件架构之一，业界有着广泛应用</p>\n<ul>\n<li><a id=\"more\"></a>\n</li>\n</ul>\n<h2 id=\"MVC\"><a href=\"#MVC\" class=\"headerlink\" title=\"MVC\"></a>MVC</h2><p>MVC模式的意思是，软件可以分成三个部分。<br><img src=\"/img/vue/bg2015020104.png\" alt=\"GitHub Logo\"><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">视图（View）：用户界面。</div><div class=\"line\">控制器（Controller）：业务逻辑</div><div class=\"line\">模型（Model）：数据保存</div></pre></td></tr></table></figure></p>\n<p><img src=\"/img/vue/bg2015020105.png\" alt=\"GitHub Logo\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">View 传送指令到 Controller</div><div class=\"line\">Controller 完成业务逻辑后，要求 Model 改变状态</div><div class=\"line\">Model 将新的数据发送到 View，用户得到反馈</div></pre></td></tr></table></figure>\n<p>所有通信都是单向的。</p>\n<h2 id=\"互动模式\"><a href=\"#互动模式\" class=\"headerlink\" title=\"互动模式\"></a>互动模式</h2><p>接受用户指令时，MVC 可以分成两种方式。一种是通过 View 接受指令，传递给 Controller。</p>\n<p><img src=\"/img/vue/bg2015020106.png\" alt=\"GitHub Logo\"></p>\n<p>另一种是直接通过controller接受指令。<br><img src=\"/img/vue/bg2015020107.png\" alt=\"GitHub Logo\"></p>\n<h2 id=\"实例：Backbone\"><a href=\"#实例：Backbone\" class=\"headerlink\" title=\"实例：Backbone\"></a>实例：Backbone</h2><p><img src=\"/img/vue/bg2015020108.png\" alt=\"GitHub Logo\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">用户可以向 View 发送指令（DOM 事件），再由 View 直接要求 Model 改变状态。</div><div class=\"line\">用户也可以直接向 Controller 发送指令（改变 URL 触发 hashChange 事件），再由 Controller 发送给 View。</div><div class=\"line\">Controller 非常薄，只起到路由的作用，而 View 非常厚，业务逻辑都部署在 View。所以，Backbone 索性取消了Controller，只保留一个 Router（路由器） 。</div></pre></td></tr></table></figure>\n<h2 id=\"MVP\"><a href=\"#MVP\" class=\"headerlink\" title=\"MVP\"></a>MVP</h2><p>MVP 模式将 Controller 改名为 Presenter，同时改变了通信方向。</p>\n<p><img src=\"/img/vue/bg2015020109.png\" alt=\"GitHub Logo\"><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">各部分之间的通信，都是双向的。</div><div class=\"line\">View 与 Model 不发生联系，都通过 Presenter 传递。</div><div class=\"line\">View 非常薄，不部署任何业务逻辑，称为&quot;被动视图&quot;（Passive View），即没有任何主动性，而Presenter非常厚，所有逻辑都部署在那里。</div></pre></td></tr></table></figure></p>\n<h2 id=\"MVVM\"><a href=\"#MVVM\" class=\"headerlink\" title=\"MVVM\"></a>MVVM</h2><p>MVVM 模式将 Presenter 改名为 ViewModel，基本上与 MVP 模式完全一致。</p>\n<p><img src=\"/img/vue/bg2015020110.png\" alt=\"GitHub Logo\"></p>\n<p>唯一的区别是，它采用双向绑定（data-binding）：View的变动，自动反映在 ViewModel，反之亦然。Angular 和Ember 都采用这种模式。</p>\n","site":{"data":{}},"excerpt":"<p><img src=\"/img/vue/20170925123312.jpg\" alt=\"GitHub Logo\"><br>复杂的软件必须有清晰合理的架构，否则无法开发和维护。MVC（Model-View-Controller）是最常见的软件架构之一，业界有着广泛应用</p>\n<ul>\n<li>","more":"</li>\n</ul>\n<h2 id=\"MVC\"><a href=\"#MVC\" class=\"headerlink\" title=\"MVC\"></a>MVC</h2><p>MVC模式的意思是，软件可以分成三个部分。<br><img src=\"/img/vue/bg2015020104.png\" alt=\"GitHub Logo\"><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">视图（View）：用户界面。</div><div class=\"line\">控制器（Controller）：业务逻辑</div><div class=\"line\">模型（Model）：数据保存</div></pre></td></tr></table></figure></p>\n<p><img src=\"/img/vue/bg2015020105.png\" alt=\"GitHub Logo\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">View 传送指令到 Controller</div><div class=\"line\">Controller 完成业务逻辑后，要求 Model 改变状态</div><div class=\"line\">Model 将新的数据发送到 View，用户得到反馈</div></pre></td></tr></table></figure>\n<p>所有通信都是单向的。</p>\n<h2 id=\"互动模式\"><a href=\"#互动模式\" class=\"headerlink\" title=\"互动模式\"></a>互动模式</h2><p>接受用户指令时，MVC 可以分成两种方式。一种是通过 View 接受指令，传递给 Controller。</p>\n<p><img src=\"/img/vue/bg2015020106.png\" alt=\"GitHub Logo\"></p>\n<p>另一种是直接通过controller接受指令。<br><img src=\"/img/vue/bg2015020107.png\" alt=\"GitHub Logo\"></p>\n<h2 id=\"实例：Backbone\"><a href=\"#实例：Backbone\" class=\"headerlink\" title=\"实例：Backbone\"></a>实例：Backbone</h2><p><img src=\"/img/vue/bg2015020108.png\" alt=\"GitHub Logo\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">用户可以向 View 发送指令（DOM 事件），再由 View 直接要求 Model 改变状态。</div><div class=\"line\">用户也可以直接向 Controller 发送指令（改变 URL 触发 hashChange 事件），再由 Controller 发送给 View。</div><div class=\"line\">Controller 非常薄，只起到路由的作用，而 View 非常厚，业务逻辑都部署在 View。所以，Backbone 索性取消了Controller，只保留一个 Router（路由器） 。</div></pre></td></tr></table></figure>\n<h2 id=\"MVP\"><a href=\"#MVP\" class=\"headerlink\" title=\"MVP\"></a>MVP</h2><p>MVP 模式将 Controller 改名为 Presenter，同时改变了通信方向。</p>\n<p><img src=\"/img/vue/bg2015020109.png\" alt=\"GitHub Logo\"><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">各部分之间的通信，都是双向的。</div><div class=\"line\">View 与 Model 不发生联系，都通过 Presenter 传递。</div><div class=\"line\">View 非常薄，不部署任何业务逻辑，称为&quot;被动视图&quot;（Passive View），即没有任何主动性，而Presenter非常厚，所有逻辑都部署在那里。</div></pre></td></tr></table></figure></p>\n<h2 id=\"MVVM\"><a href=\"#MVVM\" class=\"headerlink\" title=\"MVVM\"></a>MVVM</h2><p>MVVM 模式将 Presenter 改名为 ViewModel，基本上与 MVP 模式完全一致。</p>\n<p><img src=\"/img/vue/bg2015020110.png\" alt=\"GitHub Logo\"></p>\n<p>唯一的区别是，它采用双向绑定（data-binding）：View的变动，自动反映在 ViewModel，反之亦然。Angular 和Ember 都采用这种模式。</p>"},{"title":"windows10安装vue.js","_content":"<div align=left>\n    <img src=\"/img/vue/238555602663002408.jpg\" width=\"600\" height=\"400\" alt=\"\"/>\n</div>\n想写下前端的自动定制报表UI，觉得vue不错，就想玩一下，谁知道在win上安装那么麻烦，问题不断，最后终于解决了（网上资料鱼龙混杂，还是要带脑子解决问题才行）。详细安装步骤如下：\n\n+ <!-- more -->\n\n## 总括\n避免我写的比较啰嗦，这里是所有的安装步骤，想看详细的，可以跳过这里。\n```\n到https://nodejs.org/zh-cn/ 下载安装nodejs\nnpm install -g cnpm --registry=http://registry.npm.taobao.org\ncnpm install vue\ncnpm install --global vue-cli\n```\n\n\n## 详细步骤\n\n### 1.安装nodejs\n\nwindows的在官网上下载，地址\n```\nhttps://nodejs.org/zh-cn/\n```\n\n\n我安装的是下图中的版本:\n![GitHub Logo](/img/vue/20170927103933.png)\n\n下载以后，双击安装，npm也会同时安装好的。\n\n### 2.安装cnpm\n\n使用npm就行vue的安装，总是会出现各种问题，干脆放弃，直接用cnpm\n安装方法，在cmd中执行下面的命令\n```\nnpm install -g cnpm --registry=http://registry.npm.taobao.org\n```\n\n等待。。。。。\n\n出现下图，表示安装ok\n![GitHub Logo](/img/vue/20170927104442.png)\n\n\n### 3.安装vue\n执行命令\n```\ncnpm install vue\n```\n安装好以后，如下图：\n![GitHub Logo](/img/vue/20170927105040.png)\n\n有个问题，这个安装好以后，执行vue会出现下图：\n![GitHub Logo](/img/vue/20170927105152.png)\n\n这个我直接忽略了，继续安装vue-cli\n\n### 4.安装vue-cli\n执行命令：\n```\ncnpm install --global vue-cli\n```\n安装成功的图：\n![GitHub Logo](/img/vue/20170927105347.png)\n\n好了，到这里，就可以愉快地使用了，心好累。。。。。\n\n记得上面那个问题吗？？解决了，安装个client，就解决了，好无语，等待大神告诉为什么- _ -\n\n\n## 创建基于webpack的vue project\n```\nvue init webpack vue_test\ncd vue_test\ncnpm install\n```\n![GitHub Logo](/img/vue/20170927144838.png)\n\n\n## 运行vue project\n```\ncnpm run dev\n```\n![GitHub Logo](/img/vue/20170927145044.png)\n![GitHub Logo](/img/vue/20170927144950.png)\n\n\n## 发布\n```\ncnpm run build\n```\n发布以后会生成一个dist文件夹，可以直接拿这个文件是发布项目\n\n\n\n\n","source":"_posts/vue/vue_install.md","raw":"---\ntitle: windows10安装vue.js\n---\n<div align=left>\n    <img src=\"/img/vue/238555602663002408.jpg\" width=\"600\" height=\"400\" alt=\"\"/>\n</div>\n想写下前端的自动定制报表UI，觉得vue不错，就想玩一下，谁知道在win上安装那么麻烦，问题不断，最后终于解决了（网上资料鱼龙混杂，还是要带脑子解决问题才行）。详细安装步骤如下：\n\n+ <!-- more -->\n\n## 总括\n避免我写的比较啰嗦，这里是所有的安装步骤，想看详细的，可以跳过这里。\n```\n到https://nodejs.org/zh-cn/ 下载安装nodejs\nnpm install -g cnpm --registry=http://registry.npm.taobao.org\ncnpm install vue\ncnpm install --global vue-cli\n```\n\n\n## 详细步骤\n\n### 1.安装nodejs\n\nwindows的在官网上下载，地址\n```\nhttps://nodejs.org/zh-cn/\n```\n\n\n我安装的是下图中的版本:\n![GitHub Logo](/img/vue/20170927103933.png)\n\n下载以后，双击安装，npm也会同时安装好的。\n\n### 2.安装cnpm\n\n使用npm就行vue的安装，总是会出现各种问题，干脆放弃，直接用cnpm\n安装方法，在cmd中执行下面的命令\n```\nnpm install -g cnpm --registry=http://registry.npm.taobao.org\n```\n\n等待。。。。。\n\n出现下图，表示安装ok\n![GitHub Logo](/img/vue/20170927104442.png)\n\n\n### 3.安装vue\n执行命令\n```\ncnpm install vue\n```\n安装好以后，如下图：\n![GitHub Logo](/img/vue/20170927105040.png)\n\n有个问题，这个安装好以后，执行vue会出现下图：\n![GitHub Logo](/img/vue/20170927105152.png)\n\n这个我直接忽略了，继续安装vue-cli\n\n### 4.安装vue-cli\n执行命令：\n```\ncnpm install --global vue-cli\n```\n安装成功的图：\n![GitHub Logo](/img/vue/20170927105347.png)\n\n好了，到这里，就可以愉快地使用了，心好累。。。。。\n\n记得上面那个问题吗？？解决了，安装个client，就解决了，好无语，等待大神告诉为什么- _ -\n\n\n## 创建基于webpack的vue project\n```\nvue init webpack vue_test\ncd vue_test\ncnpm install\n```\n![GitHub Logo](/img/vue/20170927144838.png)\n\n\n## 运行vue project\n```\ncnpm run dev\n```\n![GitHub Logo](/img/vue/20170927145044.png)\n![GitHub Logo](/img/vue/20170927144950.png)\n\n\n## 发布\n```\ncnpm run build\n```\n发布以后会生成一个dist文件夹，可以直接拿这个文件是发布项目\n\n\n\n\n","slug":"vue/vue_install","published":1,"date":"2021-01-26T10:03:56.639Z","updated":"2021-01-26T10:03:56.639Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkdu2mag0017y74ttlrhechh","content":"<p><div align=\"left\"><br>    <img src=\"/img/vue/238555602663002408.jpg\" width=\"600\" height=\"400\" alt=\"\"><br></div><br>想写下前端的自动定制报表UI，觉得vue不错，就想玩一下，谁知道在win上安装那么麻烦，问题不断，最后终于解决了（网上资料鱼龙混杂，还是要带脑子解决问题才行）。详细安装步骤如下：</p>\n<ul>\n<li><a id=\"more\"></a>\n</li>\n</ul>\n<h2 id=\"总括\"><a href=\"#总括\" class=\"headerlink\" title=\"总括\"></a>总括</h2><p>避免我写的比较啰嗦，这里是所有的安装步骤，想看详细的，可以跳过这里。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">到https://nodejs.org/zh-cn/ 下载安装nodejs</div><div class=\"line\">npm install -g cnpm --registry=http://registry.npm.taobao.org</div><div class=\"line\">cnpm install vue</div><div class=\"line\">cnpm install --global vue-cli</div></pre></td></tr></table></figure></p>\n<h2 id=\"详细步骤\"><a href=\"#详细步骤\" class=\"headerlink\" title=\"详细步骤\"></a>详细步骤</h2><h3 id=\"1-安装nodejs\"><a href=\"#1-安装nodejs\" class=\"headerlink\" title=\"1.安装nodejs\"></a>1.安装nodejs</h3><p>windows的在官网上下载，地址<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">https://nodejs.org/zh-cn/</div></pre></td></tr></table></figure></p>\n<p>我安装的是下图中的版本:<br><img src=\"/img/vue/20170927103933.png\" alt=\"GitHub Logo\"></p>\n<p>下载以后，双击安装，npm也会同时安装好的。</p>\n<h3 id=\"2-安装cnpm\"><a href=\"#2-安装cnpm\" class=\"headerlink\" title=\"2.安装cnpm\"></a>2.安装cnpm</h3><p>使用npm就行vue的安装，总是会出现各种问题，干脆放弃，直接用cnpm<br>安装方法，在cmd中执行下面的命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install -g cnpm --registry=http://registry.npm.taobao.org</div></pre></td></tr></table></figure></p>\n<p>等待。。。。。</p>\n<p>出现下图，表示安装ok<br><img src=\"/img/vue/20170927104442.png\" alt=\"GitHub Logo\"></p>\n<h3 id=\"3-安装vue\"><a href=\"#3-安装vue\" class=\"headerlink\" title=\"3.安装vue\"></a>3.安装vue</h3><p>执行命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cnpm install vue</div></pre></td></tr></table></figure></p>\n<p>安装好以后，如下图：<br><img src=\"/img/vue/20170927105040.png\" alt=\"GitHub Logo\"></p>\n<p>有个问题，这个安装好以后，执行vue会出现下图：<br><img src=\"/img/vue/20170927105152.png\" alt=\"GitHub Logo\"></p>\n<p>这个我直接忽略了，继续安装vue-cli</p>\n<h3 id=\"4-安装vue-cli\"><a href=\"#4-安装vue-cli\" class=\"headerlink\" title=\"4.安装vue-cli\"></a>4.安装vue-cli</h3><p>执行命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cnpm install --global vue-cli</div></pre></td></tr></table></figure></p>\n<p>安装成功的图：<br><img src=\"/img/vue/20170927105347.png\" alt=\"GitHub Logo\"></p>\n<p>好了，到这里，就可以愉快地使用了，心好累。。。。。</p>\n<p>记得上面那个问题吗？？解决了，安装个client，就解决了，好无语，等待大神告诉为什么- _ -</p>\n<h2 id=\"创建基于webpack的vue-project\"><a href=\"#创建基于webpack的vue-project\" class=\"headerlink\" title=\"创建基于webpack的vue project\"></a>创建基于webpack的vue project</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">vue init webpack vue_test</div><div class=\"line\">cd vue_test</div><div class=\"line\">cnpm install</div></pre></td></tr></table></figure>\n<p><img src=\"/img/vue/20170927144838.png\" alt=\"GitHub Logo\"></p>\n<h2 id=\"运行vue-project\"><a href=\"#运行vue-project\" class=\"headerlink\" title=\"运行vue project\"></a>运行vue project</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cnpm run dev</div></pre></td></tr></table></figure>\n<p><img src=\"/img/vue/20170927145044.png\" alt=\"GitHub Logo\"><br><img src=\"/img/vue/20170927144950.png\" alt=\"GitHub Logo\"></p>\n<h2 id=\"发布\"><a href=\"#发布\" class=\"headerlink\" title=\"发布\"></a>发布</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cnpm run build</div></pre></td></tr></table></figure>\n<p>发布以后会生成一个dist文件夹，可以直接拿这个文件是发布项目</p>\n","site":{"data":{}},"excerpt":"<p><div align=left><br>    <img src=\"/img/vue/238555602663002408.jpg\" width=\"600\" height=\"400\" alt=\"\"/><br></div><br>想写下前端的自动定制报表UI，觉得vue不错，就想玩一下，谁知道在win上安装那么麻烦，问题不断，最后终于解决了（网上资料鱼龙混杂，还是要带脑子解决问题才行）。详细安装步骤如下：</p>\n<ul>\n<li>","more":"</li>\n</ul>\n<h2 id=\"总括\"><a href=\"#总括\" class=\"headerlink\" title=\"总括\"></a>总括</h2><p>避免我写的比较啰嗦，这里是所有的安装步骤，想看详细的，可以跳过这里。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">到https://nodejs.org/zh-cn/ 下载安装nodejs</div><div class=\"line\">npm install -g cnpm --registry=http://registry.npm.taobao.org</div><div class=\"line\">cnpm install vue</div><div class=\"line\">cnpm install --global vue-cli</div></pre></td></tr></table></figure></p>\n<h2 id=\"详细步骤\"><a href=\"#详细步骤\" class=\"headerlink\" title=\"详细步骤\"></a>详细步骤</h2><h3 id=\"1-安装nodejs\"><a href=\"#1-安装nodejs\" class=\"headerlink\" title=\"1.安装nodejs\"></a>1.安装nodejs</h3><p>windows的在官网上下载，地址<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">https://nodejs.org/zh-cn/</div></pre></td></tr></table></figure></p>\n<p>我安装的是下图中的版本:<br><img src=\"/img/vue/20170927103933.png\" alt=\"GitHub Logo\"></p>\n<p>下载以后，双击安装，npm也会同时安装好的。</p>\n<h3 id=\"2-安装cnpm\"><a href=\"#2-安装cnpm\" class=\"headerlink\" title=\"2.安装cnpm\"></a>2.安装cnpm</h3><p>使用npm就行vue的安装，总是会出现各种问题，干脆放弃，直接用cnpm<br>安装方法，在cmd中执行下面的命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install -g cnpm --registry=http://registry.npm.taobao.org</div></pre></td></tr></table></figure></p>\n<p>等待。。。。。</p>\n<p>出现下图，表示安装ok<br><img src=\"/img/vue/20170927104442.png\" alt=\"GitHub Logo\"></p>\n<h3 id=\"3-安装vue\"><a href=\"#3-安装vue\" class=\"headerlink\" title=\"3.安装vue\"></a>3.安装vue</h3><p>执行命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cnpm install vue</div></pre></td></tr></table></figure></p>\n<p>安装好以后，如下图：<br><img src=\"/img/vue/20170927105040.png\" alt=\"GitHub Logo\"></p>\n<p>有个问题，这个安装好以后，执行vue会出现下图：<br><img src=\"/img/vue/20170927105152.png\" alt=\"GitHub Logo\"></p>\n<p>这个我直接忽略了，继续安装vue-cli</p>\n<h3 id=\"4-安装vue-cli\"><a href=\"#4-安装vue-cli\" class=\"headerlink\" title=\"4.安装vue-cli\"></a>4.安装vue-cli</h3><p>执行命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cnpm install --global vue-cli</div></pre></td></tr></table></figure></p>\n<p>安装成功的图：<br><img src=\"/img/vue/20170927105347.png\" alt=\"GitHub Logo\"></p>\n<p>好了，到这里，就可以愉快地使用了，心好累。。。。。</p>\n<p>记得上面那个问题吗？？解决了，安装个client，就解决了，好无语，等待大神告诉为什么- _ -</p>\n<h2 id=\"创建基于webpack的vue-project\"><a href=\"#创建基于webpack的vue-project\" class=\"headerlink\" title=\"创建基于webpack的vue project\"></a>创建基于webpack的vue project</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">vue init webpack vue_test</div><div class=\"line\">cd vue_test</div><div class=\"line\">cnpm install</div></pre></td></tr></table></figure>\n<p><img src=\"/img/vue/20170927144838.png\" alt=\"GitHub Logo\"></p>\n<h2 id=\"运行vue-project\"><a href=\"#运行vue-project\" class=\"headerlink\" title=\"运行vue project\"></a>运行vue project</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cnpm run dev</div></pre></td></tr></table></figure>\n<p><img src=\"/img/vue/20170927145044.png\" alt=\"GitHub Logo\"><br><img src=\"/img/vue/20170927144950.png\" alt=\"GitHub Logo\"></p>\n<h2 id=\"发布\"><a href=\"#发布\" class=\"headerlink\" title=\"发布\"></a>发布</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cnpm run build</div></pre></td></tr></table></figure>\n<p>发布以后会生成一个dist文件夹，可以直接拿这个文件是发布项目</p>"},{"title":"vue webpack project 介绍","_content":"<div align=left>\n    <img src=\"/img/vue/20170927151927.jpg\" width=\"\" height=\"\" alt=\"\"/>\n</div>\n这里介绍如何使用vue webpack 进行项目的创建。\n\n+ <!-- more -->\n\n\n## 使用webpack simple\n\n### 创建simple 项目\n```\nvue init webpack-simple vue-simple\n```\n\n### 目录结构\n\n```\n├─.babelrc\t\t// babel配置文件\n├─.gitignore\t\n├─index.html\t\t// 主页\n├─package.json\t\t// 项目配置文件\n├─README.md  \n├─webpack.config.js\t// webpack配置文件\n├─dist\t\t\t// 发布目录\n│   ├─.gitkeep       \n├─src\t\t\t// 开发目录\t\n│   ├─App.vue\t\t// App.vue组件\n│   ├─main.js\t\t// 预编译入口\n```\n\n### webpack.config.js\n```\nvar path = require('path')\nvar webpack = require('webpack')\n\nmodule.exports = {\n  entry: './src/main.js',\n  output: {\n    path: path.resolve(__dirname, './dist'),\n    publicPath: '/dist/',\n    filename: 'build.js'\n  },\n  resolveLoader: {\n    root: path.join(__dirname, 'node_modules'),\n  },\n  module: {\n    loaders: [\n      {\n        test: /\\.vue$/,\n        loader: 'vue'\n      },\n      {\n        test: /\\.js$/,\n        loader: 'babel',\n        exclude: /node_modules/\n      },\n      {\n        test: /\\.json$/,\n        loader: 'json'\n      },\n      {\n        test: /\\.html$/,\n        loader: 'vue-html'\n      },\n      {\n        test: /\\.(png|jpg|gif|svg)$/,\n        loader: 'url',\n        query: {\n          limit: 10000,\n          name: '[name].[ext]?[hash]'\n        }\n      }\n    ]\n  },\n  devServer: {\n    historyApiFallback: true,\n    noInfo: true\n  },\n  devtool: '#eval-source-map'\n}\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports.devtool = '#source-map'\n  // http://vue-loader.vuejs.org/en/workflow/production.html\n  module.exports.plugins = (module.exports.plugins || []).concat([\n    new webpack.DefinePlugin({\n      'process.env': {\n        NODE_ENV: '\"production\"'\n      }\n    }),\n    new webpack.optimize.UglifyJsPlugin({\n      compress: {\n        warnings: false\n      }\n    }),\n    new webpack.optimize.OccurenceOrderPlugin()\n  ])\n}\n```\nwebpack.config.js内容还是比较好理解的，它采用了CommonJS的写法，entry节点配置了编译入口，output节点配置了输出。\n这段entry和output配置的含义是：编译src/main.js文件，然后输出到dist/build.js文件\n\n### 安装依赖\n```\ncd my-webpack-simple-demo\nnpm install\n```\n安装完成后，目录下会产生一个node_modules文件夹。\n\n### 运行\n```\nnpm run dev\n```\n执行npm run dev命令后并不会在dist目录下生成build.js文件，开发环境下build.js是在运行内存中的\n\n### 发布\n```\nnpm run build\n```\n执行该命令会生成发布时的build.js，并且是经过压缩的\n\n\n## 使用vue-webpack模板\n### 创建项目\n```\nvue init webpack vue-webpack-demo\n```\n\n### vue webpack project 目录结构\n\n```\n├── build/                      # webpack config files\n│   └── ...\n├── config/                     \n│   ├── index.js                # main project config\n│   └── ...\n├── src/\n│   ├── main.js                 # app entry file\n│   ├── App.vue                 # main app component\n│   ├── components/             # ui components\n│   │   └── ...\n│   └── assets/                 # module assets (processed by webpack)\n│       └── ...\n├── static/                     # pure static assets (directly copied)\n├── test/\n│   └── unit/                   # unit tests\n│   │   ├── specs/              # test spec files\n│   │   ├── index.js            # test build entry file\n│   │   └── karma.conf.js       # test runner config file\n│   └── e2e/                    # e2e tests\n│   │   ├── specs/              # test spec files\n│   │   ├── custom-assertions/  # custom assertions for e2e tests\n│   │   ├── runner.js           # test runner script\n│   │   └── nightwatch.conf.js  # test runner config file\n├── .babelrc                    # babel config\n├── .editorconfig.js            # editor config\n├── .eslintrc.js                # eslint config\n├── index.html                  # index.html template\n└── package.json                # build scripts and dependencies\n```\n\n### 安装依赖\n```\ncd my-webpack-demo\nnpm install\n```\n\n### 运行\n```\nnpm run dev\n\n```\n\n### 发布\n```\nnpm run build\n\n```\n和vue-simple-webpack模板不同的是，所有的静态资源，包括index.html都生成到dist目录下了。这意味着你可以直接拿着dist目录去发布应用，例如在IIS下将dist目录发布为一个网站。\n\n\n\n\n\n","source":"_posts/vue/vue_webpack.md","raw":"---\ntitle: vue webpack project 介绍\n---\n<div align=left>\n    <img src=\"/img/vue/20170927151927.jpg\" width=\"\" height=\"\" alt=\"\"/>\n</div>\n这里介绍如何使用vue webpack 进行项目的创建。\n\n+ <!-- more -->\n\n\n## 使用webpack simple\n\n### 创建simple 项目\n```\nvue init webpack-simple vue-simple\n```\n\n### 目录结构\n\n```\n├─.babelrc\t\t// babel配置文件\n├─.gitignore\t\n├─index.html\t\t// 主页\n├─package.json\t\t// 项目配置文件\n├─README.md  \n├─webpack.config.js\t// webpack配置文件\n├─dist\t\t\t// 发布目录\n│   ├─.gitkeep       \n├─src\t\t\t// 开发目录\t\n│   ├─App.vue\t\t// App.vue组件\n│   ├─main.js\t\t// 预编译入口\n```\n\n### webpack.config.js\n```\nvar path = require('path')\nvar webpack = require('webpack')\n\nmodule.exports = {\n  entry: './src/main.js',\n  output: {\n    path: path.resolve(__dirname, './dist'),\n    publicPath: '/dist/',\n    filename: 'build.js'\n  },\n  resolveLoader: {\n    root: path.join(__dirname, 'node_modules'),\n  },\n  module: {\n    loaders: [\n      {\n        test: /\\.vue$/,\n        loader: 'vue'\n      },\n      {\n        test: /\\.js$/,\n        loader: 'babel',\n        exclude: /node_modules/\n      },\n      {\n        test: /\\.json$/,\n        loader: 'json'\n      },\n      {\n        test: /\\.html$/,\n        loader: 'vue-html'\n      },\n      {\n        test: /\\.(png|jpg|gif|svg)$/,\n        loader: 'url',\n        query: {\n          limit: 10000,\n          name: '[name].[ext]?[hash]'\n        }\n      }\n    ]\n  },\n  devServer: {\n    historyApiFallback: true,\n    noInfo: true\n  },\n  devtool: '#eval-source-map'\n}\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports.devtool = '#source-map'\n  // http://vue-loader.vuejs.org/en/workflow/production.html\n  module.exports.plugins = (module.exports.plugins || []).concat([\n    new webpack.DefinePlugin({\n      'process.env': {\n        NODE_ENV: '\"production\"'\n      }\n    }),\n    new webpack.optimize.UglifyJsPlugin({\n      compress: {\n        warnings: false\n      }\n    }),\n    new webpack.optimize.OccurenceOrderPlugin()\n  ])\n}\n```\nwebpack.config.js内容还是比较好理解的，它采用了CommonJS的写法，entry节点配置了编译入口，output节点配置了输出。\n这段entry和output配置的含义是：编译src/main.js文件，然后输出到dist/build.js文件\n\n### 安装依赖\n```\ncd my-webpack-simple-demo\nnpm install\n```\n安装完成后，目录下会产生一个node_modules文件夹。\n\n### 运行\n```\nnpm run dev\n```\n执行npm run dev命令后并不会在dist目录下生成build.js文件，开发环境下build.js是在运行内存中的\n\n### 发布\n```\nnpm run build\n```\n执行该命令会生成发布时的build.js，并且是经过压缩的\n\n\n## 使用vue-webpack模板\n### 创建项目\n```\nvue init webpack vue-webpack-demo\n```\n\n### vue webpack project 目录结构\n\n```\n├── build/                      # webpack config files\n│   └── ...\n├── config/                     \n│   ├── index.js                # main project config\n│   └── ...\n├── src/\n│   ├── main.js                 # app entry file\n│   ├── App.vue                 # main app component\n│   ├── components/             # ui components\n│   │   └── ...\n│   └── assets/                 # module assets (processed by webpack)\n│       └── ...\n├── static/                     # pure static assets (directly copied)\n├── test/\n│   └── unit/                   # unit tests\n│   │   ├── specs/              # test spec files\n│   │   ├── index.js            # test build entry file\n│   │   └── karma.conf.js       # test runner config file\n│   └── e2e/                    # e2e tests\n│   │   ├── specs/              # test spec files\n│   │   ├── custom-assertions/  # custom assertions for e2e tests\n│   │   ├── runner.js           # test runner script\n│   │   └── nightwatch.conf.js  # test runner config file\n├── .babelrc                    # babel config\n├── .editorconfig.js            # editor config\n├── .eslintrc.js                # eslint config\n├── index.html                  # index.html template\n└── package.json                # build scripts and dependencies\n```\n\n### 安装依赖\n```\ncd my-webpack-demo\nnpm install\n```\n\n### 运行\n```\nnpm run dev\n\n```\n\n### 发布\n```\nnpm run build\n\n```\n和vue-simple-webpack模板不同的是，所有的静态资源，包括index.html都生成到dist目录下了。这意味着你可以直接拿着dist目录去发布应用，例如在IIS下将dist目录发布为一个网站。\n\n\n\n\n\n","slug":"vue/vue_webpack","published":1,"date":"2021-01-26T10:03:56.639Z","updated":"2021-01-26T10:03:56.639Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkdu2mah0019y74tgz31toc2","content":"<p><div align=\"left\"><br>    <img src=\"/img/vue/20170927151927.jpg\" width=\"\" height=\"\" alt=\"\"><br></div><br>这里介绍如何使用vue webpack 进行项目的创建。</p>\n<ul>\n<li><a id=\"more\"></a>\n</li>\n</ul>\n<h2 id=\"使用webpack-simple\"><a href=\"#使用webpack-simple\" class=\"headerlink\" title=\"使用webpack simple\"></a>使用webpack simple</h2><h3 id=\"创建simple-项目\"><a href=\"#创建simple-项目\" class=\"headerlink\" title=\"创建simple 项目\"></a>创建simple 项目</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vue init webpack-simple vue-simple</div></pre></td></tr></table></figure>\n<h3 id=\"目录结构\"><a href=\"#目录结构\" class=\"headerlink\" title=\"目录结构\"></a>目录结构</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">├─.babelrc\t\t// babel配置文件</div><div class=\"line\">├─.gitignore\t</div><div class=\"line\">├─index.html\t\t// 主页</div><div class=\"line\">├─package.json\t\t// 项目配置文件</div><div class=\"line\">├─README.md  </div><div class=\"line\">├─webpack.config.js\t// webpack配置文件</div><div class=\"line\">├─dist\t\t\t// 发布目录</div><div class=\"line\">│   ├─.gitkeep       </div><div class=\"line\">├─src\t\t\t// 开发目录\t</div><div class=\"line\">│   ├─App.vue\t\t// App.vue组件</div><div class=\"line\">│   ├─main.js\t\t// 预编译入口</div></pre></td></tr></table></figure>\n<h3 id=\"webpack-config-js\"><a href=\"#webpack-config-js\" class=\"headerlink\" title=\"webpack.config.js\"></a>webpack.config.js</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div></pre></td><td class=\"code\"><pre><div class=\"line\">var path = require(&apos;path&apos;)</div><div class=\"line\">var webpack = require(&apos;webpack&apos;)</div><div class=\"line\"></div><div class=\"line\">module.exports = &#123;</div><div class=\"line\">  entry: &apos;./src/main.js&apos;,</div><div class=\"line\">  output: &#123;</div><div class=\"line\">    path: path.resolve(__dirname, &apos;./dist&apos;),</div><div class=\"line\">    publicPath: &apos;/dist/&apos;,</div><div class=\"line\">    filename: &apos;build.js&apos;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  resolveLoader: &#123;</div><div class=\"line\">    root: path.join(__dirname, &apos;node_modules&apos;),</div><div class=\"line\">  &#125;,</div><div class=\"line\">  module: &#123;</div><div class=\"line\">    loaders: [</div><div class=\"line\">      &#123;</div><div class=\"line\">        test: /\\.vue$/,</div><div class=\"line\">        loader: &apos;vue&apos;</div><div class=\"line\">      &#125;,</div><div class=\"line\">      &#123;</div><div class=\"line\">        test: /\\.js$/,</div><div class=\"line\">        loader: &apos;babel&apos;,</div><div class=\"line\">        exclude: /node_modules/</div><div class=\"line\">      &#125;,</div><div class=\"line\">      &#123;</div><div class=\"line\">        test: /\\.json$/,</div><div class=\"line\">        loader: &apos;json&apos;</div><div class=\"line\">      &#125;,</div><div class=\"line\">      &#123;</div><div class=\"line\">        test: /\\.html$/,</div><div class=\"line\">        loader: &apos;vue-html&apos;</div><div class=\"line\">      &#125;,</div><div class=\"line\">      &#123;</div><div class=\"line\">        test: /\\.(png|jpg|gif|svg)$/,</div><div class=\"line\">        loader: &apos;url&apos;,</div><div class=\"line\">        query: &#123;</div><div class=\"line\">          limit: 10000,</div><div class=\"line\">          name: &apos;[name].[ext]?[hash]&apos;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    ]</div><div class=\"line\">  &#125;,</div><div class=\"line\">  devServer: &#123;</div><div class=\"line\">    historyApiFallback: true,</div><div class=\"line\">    noInfo: true</div><div class=\"line\">  &#125;,</div><div class=\"line\">  devtool: &apos;#eval-source-map&apos;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">if (process.env.NODE_ENV === &apos;production&apos;) &#123;</div><div class=\"line\">  module.exports.devtool = &apos;#source-map&apos;</div><div class=\"line\">  // http://vue-loader.vuejs.org/en/workflow/production.html</div><div class=\"line\">  module.exports.plugins = (module.exports.plugins || []).concat([</div><div class=\"line\">    new webpack.DefinePlugin(&#123;</div><div class=\"line\">      &apos;process.env&apos;: &#123;</div><div class=\"line\">        NODE_ENV: &apos;&quot;production&quot;&apos;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;),</div><div class=\"line\">    new webpack.optimize.UglifyJsPlugin(&#123;</div><div class=\"line\">      compress: &#123;</div><div class=\"line\">        warnings: false</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;),</div><div class=\"line\">    new webpack.optimize.OccurenceOrderPlugin()</div><div class=\"line\">  ])</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>webpack.config.js内容还是比较好理解的，它采用了CommonJS的写法，entry节点配置了编译入口，output节点配置了输出。<br>这段entry和output配置的含义是：编译src/main.js文件，然后输出到dist/build.js文件</p>\n<h3 id=\"安装依赖\"><a href=\"#安装依赖\" class=\"headerlink\" title=\"安装依赖\"></a>安装依赖</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd my-webpack-simple-demo</div><div class=\"line\">npm install</div></pre></td></tr></table></figure>\n<p>安装完成后，目录下会产生一个node_modules文件夹。</p>\n<h3 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm run dev</div></pre></td></tr></table></figure>\n<p>执行npm run dev命令后并不会在dist目录下生成build.js文件，开发环境下build.js是在运行内存中的</p>\n<h3 id=\"发布\"><a href=\"#发布\" class=\"headerlink\" title=\"发布\"></a>发布</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm run build</div></pre></td></tr></table></figure>\n<p>执行该命令会生成发布时的build.js，并且是经过压缩的</p>\n<h2 id=\"使用vue-webpack模板\"><a href=\"#使用vue-webpack模板\" class=\"headerlink\" title=\"使用vue-webpack模板\"></a>使用vue-webpack模板</h2><h3 id=\"创建项目\"><a href=\"#创建项目\" class=\"headerlink\" title=\"创建项目\"></a>创建项目</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vue init webpack vue-webpack-demo</div></pre></td></tr></table></figure>\n<h3 id=\"vue-webpack-project-目录结构\"><a href=\"#vue-webpack-project-目录结构\" class=\"headerlink\" title=\"vue webpack project 目录结构\"></a>vue webpack project 目录结构</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">├── build/                      # webpack config files</div><div class=\"line\">│   └── ...</div><div class=\"line\">├── config/                     </div><div class=\"line\">│   ├── index.js                # main project config</div><div class=\"line\">│   └── ...</div><div class=\"line\">├── src/</div><div class=\"line\">│   ├── main.js                 # app entry file</div><div class=\"line\">│   ├── App.vue                 # main app component</div><div class=\"line\">│   ├── components/             # ui components</div><div class=\"line\">│   │   └── ...</div><div class=\"line\">│   └── assets/                 # module assets (processed by webpack)</div><div class=\"line\">│       └── ...</div><div class=\"line\">├── static/                     # pure static assets (directly copied)</div><div class=\"line\">├── test/</div><div class=\"line\">│   └── unit/                   # unit tests</div><div class=\"line\">│   │   ├── specs/              # test spec files</div><div class=\"line\">│   │   ├── index.js            # test build entry file</div><div class=\"line\">│   │   └── karma.conf.js       # test runner config file</div><div class=\"line\">│   └── e2e/                    # e2e tests</div><div class=\"line\">│   │   ├── specs/              # test spec files</div><div class=\"line\">│   │   ├── custom-assertions/  # custom assertions for e2e tests</div><div class=\"line\">│   │   ├── runner.js           # test runner script</div><div class=\"line\">│   │   └── nightwatch.conf.js  # test runner config file</div><div class=\"line\">├── .babelrc                    # babel config</div><div class=\"line\">├── .editorconfig.js            # editor config</div><div class=\"line\">├── .eslintrc.js                # eslint config</div><div class=\"line\">├── index.html                  # index.html template</div><div class=\"line\">└── package.json                # build scripts and dependencies</div></pre></td></tr></table></figure>\n<h3 id=\"安装依赖-1\"><a href=\"#安装依赖-1\" class=\"headerlink\" title=\"安装依赖\"></a>安装依赖</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd my-webpack-demo</div><div class=\"line\">npm install</div></pre></td></tr></table></figure>\n<h3 id=\"运行-1\"><a href=\"#运行-1\" class=\"headerlink\" title=\"运行\"></a>运行</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm run dev</div></pre></td></tr></table></figure>\n<h3 id=\"发布-1\"><a href=\"#发布-1\" class=\"headerlink\" title=\"发布\"></a>发布</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm run build</div></pre></td></tr></table></figure>\n<p>和vue-simple-webpack模板不同的是，所有的静态资源，包括index.html都生成到dist目录下了。这意味着你可以直接拿着dist目录去发布应用，例如在IIS下将dist目录发布为一个网站。</p>\n","site":{"data":{}},"excerpt":"<p><div align=left><br>    <img src=\"/img/vue/20170927151927.jpg\" width=\"\" height=\"\" alt=\"\"/><br></div><br>这里介绍如何使用vue webpack 进行项目的创建。</p>\n<ul>\n<li>","more":"</li>\n</ul>\n<h2 id=\"使用webpack-simple\"><a href=\"#使用webpack-simple\" class=\"headerlink\" title=\"使用webpack simple\"></a>使用webpack simple</h2><h3 id=\"创建simple-项目\"><a href=\"#创建simple-项目\" class=\"headerlink\" title=\"创建simple 项目\"></a>创建simple 项目</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vue init webpack-simple vue-simple</div></pre></td></tr></table></figure>\n<h3 id=\"目录结构\"><a href=\"#目录结构\" class=\"headerlink\" title=\"目录结构\"></a>目录结构</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">├─.babelrc\t\t// babel配置文件</div><div class=\"line\">├─.gitignore\t</div><div class=\"line\">├─index.html\t\t// 主页</div><div class=\"line\">├─package.json\t\t// 项目配置文件</div><div class=\"line\">├─README.md  </div><div class=\"line\">├─webpack.config.js\t// webpack配置文件</div><div class=\"line\">├─dist\t\t\t// 发布目录</div><div class=\"line\">│   ├─.gitkeep       </div><div class=\"line\">├─src\t\t\t// 开发目录\t</div><div class=\"line\">│   ├─App.vue\t\t// App.vue组件</div><div class=\"line\">│   ├─main.js\t\t// 预编译入口</div></pre></td></tr></table></figure>\n<h3 id=\"webpack-config-js\"><a href=\"#webpack-config-js\" class=\"headerlink\" title=\"webpack.config.js\"></a>webpack.config.js</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div></pre></td><td class=\"code\"><pre><div class=\"line\">var path = require(&apos;path&apos;)</div><div class=\"line\">var webpack = require(&apos;webpack&apos;)</div><div class=\"line\"></div><div class=\"line\">module.exports = &#123;</div><div class=\"line\">  entry: &apos;./src/main.js&apos;,</div><div class=\"line\">  output: &#123;</div><div class=\"line\">    path: path.resolve(__dirname, &apos;./dist&apos;),</div><div class=\"line\">    publicPath: &apos;/dist/&apos;,</div><div class=\"line\">    filename: &apos;build.js&apos;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  resolveLoader: &#123;</div><div class=\"line\">    root: path.join(__dirname, &apos;node_modules&apos;),</div><div class=\"line\">  &#125;,</div><div class=\"line\">  module: &#123;</div><div class=\"line\">    loaders: [</div><div class=\"line\">      &#123;</div><div class=\"line\">        test: /\\.vue$/,</div><div class=\"line\">        loader: &apos;vue&apos;</div><div class=\"line\">      &#125;,</div><div class=\"line\">      &#123;</div><div class=\"line\">        test: /\\.js$/,</div><div class=\"line\">        loader: &apos;babel&apos;,</div><div class=\"line\">        exclude: /node_modules/</div><div class=\"line\">      &#125;,</div><div class=\"line\">      &#123;</div><div class=\"line\">        test: /\\.json$/,</div><div class=\"line\">        loader: &apos;json&apos;</div><div class=\"line\">      &#125;,</div><div class=\"line\">      &#123;</div><div class=\"line\">        test: /\\.html$/,</div><div class=\"line\">        loader: &apos;vue-html&apos;</div><div class=\"line\">      &#125;,</div><div class=\"line\">      &#123;</div><div class=\"line\">        test: /\\.(png|jpg|gif|svg)$/,</div><div class=\"line\">        loader: &apos;url&apos;,</div><div class=\"line\">        query: &#123;</div><div class=\"line\">          limit: 10000,</div><div class=\"line\">          name: &apos;[name].[ext]?[hash]&apos;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    ]</div><div class=\"line\">  &#125;,</div><div class=\"line\">  devServer: &#123;</div><div class=\"line\">    historyApiFallback: true,</div><div class=\"line\">    noInfo: true</div><div class=\"line\">  &#125;,</div><div class=\"line\">  devtool: &apos;#eval-source-map&apos;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">if (process.env.NODE_ENV === &apos;production&apos;) &#123;</div><div class=\"line\">  module.exports.devtool = &apos;#source-map&apos;</div><div class=\"line\">  // http://vue-loader.vuejs.org/en/workflow/production.html</div><div class=\"line\">  module.exports.plugins = (module.exports.plugins || []).concat([</div><div class=\"line\">    new webpack.DefinePlugin(&#123;</div><div class=\"line\">      &apos;process.env&apos;: &#123;</div><div class=\"line\">        NODE_ENV: &apos;&quot;production&quot;&apos;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;),</div><div class=\"line\">    new webpack.optimize.UglifyJsPlugin(&#123;</div><div class=\"line\">      compress: &#123;</div><div class=\"line\">        warnings: false</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;),</div><div class=\"line\">    new webpack.optimize.OccurenceOrderPlugin()</div><div class=\"line\">  ])</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>webpack.config.js内容还是比较好理解的，它采用了CommonJS的写法，entry节点配置了编译入口，output节点配置了输出。<br>这段entry和output配置的含义是：编译src/main.js文件，然后输出到dist/build.js文件</p>\n<h3 id=\"安装依赖\"><a href=\"#安装依赖\" class=\"headerlink\" title=\"安装依赖\"></a>安装依赖</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd my-webpack-simple-demo</div><div class=\"line\">npm install</div></pre></td></tr></table></figure>\n<p>安装完成后，目录下会产生一个node_modules文件夹。</p>\n<h3 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm run dev</div></pre></td></tr></table></figure>\n<p>执行npm run dev命令后并不会在dist目录下生成build.js文件，开发环境下build.js是在运行内存中的</p>\n<h3 id=\"发布\"><a href=\"#发布\" class=\"headerlink\" title=\"发布\"></a>发布</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm run build</div></pre></td></tr></table></figure>\n<p>执行该命令会生成发布时的build.js，并且是经过压缩的</p>\n<h2 id=\"使用vue-webpack模板\"><a href=\"#使用vue-webpack模板\" class=\"headerlink\" title=\"使用vue-webpack模板\"></a>使用vue-webpack模板</h2><h3 id=\"创建项目\"><a href=\"#创建项目\" class=\"headerlink\" title=\"创建项目\"></a>创建项目</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vue init webpack vue-webpack-demo</div></pre></td></tr></table></figure>\n<h3 id=\"vue-webpack-project-目录结构\"><a href=\"#vue-webpack-project-目录结构\" class=\"headerlink\" title=\"vue webpack project 目录结构\"></a>vue webpack project 目录结构</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">├── build/                      # webpack config files</div><div class=\"line\">│   └── ...</div><div class=\"line\">├── config/                     </div><div class=\"line\">│   ├── index.js                # main project config</div><div class=\"line\">│   └── ...</div><div class=\"line\">├── src/</div><div class=\"line\">│   ├── main.js                 # app entry file</div><div class=\"line\">│   ├── App.vue                 # main app component</div><div class=\"line\">│   ├── components/             # ui components</div><div class=\"line\">│   │   └── ...</div><div class=\"line\">│   └── assets/                 # module assets (processed by webpack)</div><div class=\"line\">│       └── ...</div><div class=\"line\">├── static/                     # pure static assets (directly copied)</div><div class=\"line\">├── test/</div><div class=\"line\">│   └── unit/                   # unit tests</div><div class=\"line\">│   │   ├── specs/              # test spec files</div><div class=\"line\">│   │   ├── index.js            # test build entry file</div><div class=\"line\">│   │   └── karma.conf.js       # test runner config file</div><div class=\"line\">│   └── e2e/                    # e2e tests</div><div class=\"line\">│   │   ├── specs/              # test spec files</div><div class=\"line\">│   │   ├── custom-assertions/  # custom assertions for e2e tests</div><div class=\"line\">│   │   ├── runner.js           # test runner script</div><div class=\"line\">│   │   └── nightwatch.conf.js  # test runner config file</div><div class=\"line\">├── .babelrc                    # babel config</div><div class=\"line\">├── .editorconfig.js            # editor config</div><div class=\"line\">├── .eslintrc.js                # eslint config</div><div class=\"line\">├── index.html                  # index.html template</div><div class=\"line\">└── package.json                # build scripts and dependencies</div></pre></td></tr></table></figure>\n<h3 id=\"安装依赖-1\"><a href=\"#安装依赖-1\" class=\"headerlink\" title=\"安装依赖\"></a>安装依赖</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd my-webpack-demo</div><div class=\"line\">npm install</div></pre></td></tr></table></figure>\n<h3 id=\"运行-1\"><a href=\"#运行-1\" class=\"headerlink\" title=\"运行\"></a>运行</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm run dev</div></pre></td></tr></table></figure>\n<h3 id=\"发布-1\"><a href=\"#发布-1\" class=\"headerlink\" title=\"发布\"></a>发布</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm run build</div></pre></td></tr></table></figure>\n<p>和vue-simple-webpack模板不同的是，所有的静态资源，包括index.html都生成到dist目录下了。这意味着你可以直接拿着dist目录去发布应用，例如在IIS下将dist目录发布为一个网站。</p>"}],"PostAsset":[],"PostCategory":[{"post_id":"ckkdu2m6h0007y74ty8ty6i8w","category_id":"ckkdu2m6l000ay74t4py7r9b1","_id":"ckkdu2m6q000gy74tavtg2xga"},{"post_id":"ckkdu2m9x000ly74tl8famcsm","category_id":"ckkdu2ma0000oy74trt4zsnj6","_id":"ckkdu2ma9000wy74twzexwx5i"},{"post_id":"ckkdu2m9z000ny74tq28kxxph","category_id":"ckkdu2ma5000ty74t9olsgdss","_id":"ckkdu2mae0014y74tlq1hhn6j"},{"post_id":"ckkdu2ma1000py74tiy9hegwj","category_id":"ckkdu2mab000zy74tevj07ujk","_id":"ckkdu2mai001ay74t933da0ze"},{"post_id":"ckkdu2ma6000uy74t2q0rpew1","category_id":"ckkdu2maf0016y74t0ajzbjxz","_id":"ckkdu2mak001dy74tje4crh8g"},{"post_id":"ckkdu2ma9000xy74t41bn1ikh","category_id":"ckkdu2maj001by74t03ydhmm4","_id":"ckkdu2mam001gy74t79u2jyvg"},{"post_id":"ckkdu2mab0010y74t6d59jij1","category_id":"ckkdu2mal001ey74t4dzn2bfy","_id":"ckkdu2man001ky74t3ldwcaex"}],"PostTag":[{"post_id":"ckkdu2m5x0001y74tblb6imq9","tag_id":"ckkdu2m6c0005y74tnz3hkr4f","_id":"ckkdu2m6o000dy74tu3x7veqh"},{"post_id":"ckkdu2m5x0001y74tblb6imq9","tag_id":"ckkdu2m6k0009y74th62rdohe","_id":"ckkdu2m6p000ey74tf1sfrcrr"},{"post_id":"ckkdu2m670003y74tzgt5qt6e","tag_id":"ckkdu2m6o000cy74t4nmk4rbh","_id":"ckkdu2m6s000hy74tg14hy457"},{"post_id":"ckkdu2m6h0007y74ty8ty6i8w","tag_id":"ckkdu2m6c0005y74tnz3hkr4f","_id":"ckkdu2m6t000iy74tgmsjr10y"},{"post_id":"ckkdu2m6h0007y74ty8ty6i8w","tag_id":"ckkdu2m6q000fy74tjbuxst2m","_id":"ckkdu2m6u000jy74tdowd46fi"},{"post_id":"ckkdu2m9v000ky74tlefajg39","tag_id":"ckkdu2m9z000my74t3dgd1evj","_id":"ckkdu2maa000yy74t29ilti12"},{"post_id":"ckkdu2m9v000ky74tlefajg39","tag_id":"ckkdu2ma3000ry74tj56bro08","_id":"ckkdu2mac0011y74t71ehetlk"},{"post_id":"ckkdu2m9x000ly74tl8famcsm","tag_id":"ckkdu2ma7000vy74txx0mwe58","_id":"ckkdu2maf0015y74t4eojne4a"},{"post_id":"ckkdu2m9z000ny74tq28kxxph","tag_id":"ckkdu2mad0012y74td4hvpvlf","_id":"ckkdu2mam001hy74t2mpz6s3e"},{"post_id":"ckkdu2m9z000ny74tq28kxxph","tag_id":"ckkdu2mah0018y74td8at7y5h","_id":"ckkdu2man001iy74t4ryqm22z"},{"post_id":"ckkdu2m9z000ny74tq28kxxph","tag_id":"ckkdu2mak001cy74tx4vauc6x","_id":"ckkdu2man001ly74tnih742r8"},{"post_id":"ckkdu2ma1000py74tiy9hegwj","tag_id":"ckkdu2mal001fy74tknmfce7h","_id":"ckkdu2mas001py74t2653mk2t"},{"post_id":"ckkdu2ma1000py74tiy9hegwj","tag_id":"ckkdu2man001jy74ts2x8vup3","_id":"ckkdu2mat001qy74thizij0g2"},{"post_id":"ckkdu2ma1000py74tiy9hegwj","tag_id":"ckkdu2mao001my74twotdp9ho","_id":"ckkdu2mat001sy74twf52ksr3"},{"post_id":"ckkdu2ma1000py74tiy9hegwj","tag_id":"ckkdu2map001ny74tarveaw78","_id":"ckkdu2mau001ty74t5sl5rzn3"},{"post_id":"ckkdu2ma6000uy74t2q0rpew1","tag_id":"ckkdu2mad0012y74td4hvpvlf","_id":"ckkdu2mav001vy74tck476ukh"},{"post_id":"ckkdu2ma6000uy74t2q0rpew1","tag_id":"ckkdu2mat001ry74t6cvscnkx","_id":"ckkdu2maw001wy74tkt8e4rdn"},{"post_id":"ckkdu2ma9000xy74t41bn1ikh","tag_id":"ckkdu2mad0012y74td4hvpvlf","_id":"ckkdu2may001zy74t5uk85p3w"},{"post_id":"ckkdu2ma9000xy74t41bn1ikh","tag_id":"ckkdu2maw001xy74ts36tq72r","_id":"ckkdu2may0020y74t7lu5cicd"},{"post_id":"ckkdu2mab0010y74t6d59jij1","tag_id":"ckkdu2max001yy74t4m7ehsre","_id":"ckkdu2may0021y74t6k4h3vyi"}],"Tag":[{"name":"hexo","_id":"ckkdu2m6c0005y74tnz3hkr4f"},{"name":"github pages","_id":"ckkdu2m6k0009y74th62rdohe"},{"name":"druid.io","_id":"ckkdu2m6o000cy74t4nmk4rbh"},{"name":"yelee","_id":"ckkdu2m6q000fy74tjbuxst2m"},{"name":"maven","_id":"ckkdu2m9z000my74t3dgd1evj"},{"name":"pom","_id":"ckkdu2ma3000ry74tj56bro08"},{"name":"dashboard","_id":"ckkdu2ma7000vy74txx0mwe58"},{"name":"linux","_id":"ckkdu2mad0012y74td4hvpvlf"},{"name":"grep","_id":"ckkdu2mah0018y74td8at7y5h"},{"name":"awk","_id":"ckkdu2mak001cy74tx4vauc6x"},{"name":"druid","_id":"ckkdu2mal001fy74tknmfce7h"},{"name":"tranquility","_id":"ckkdu2man001jy74ts2x8vup3"},{"name":"OLAP","_id":"ckkdu2mao001my74twotdp9ho"},{"name":"share nothing","_id":"ckkdu2map001ny74tarveaw78"},{"name":"tar","_id":"ckkdu2mat001ry74t6cvscnkx"},{"name":"python","_id":"ckkdu2maw001xy74ts36tq72r"},{"name":"Photoshop","_id":"ckkdu2max001yy74t4m7ehsre"}]}}