{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/yelee/source/apple-touch-icon.png","path":"apple-touch-icon.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/favicon.png","path":"favicon.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/background/bg-1.jpg","path":"background/bg-1.jpg","modified":1,"renderable":1},{"_id":"themes/yelee/source/background/bg-2.jpg","path":"background/bg-2.jpg","modified":1,"renderable":1},{"_id":"themes/yelee/source/background/bg-3.jpg","path":"background/bg-3.jpg","modified":1,"renderable":1},{"_id":"themes/yelee/source/background/bg-4.jpg","path":"background/bg-4.jpg","modified":1,"renderable":1},{"_id":"themes/yelee/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/AcFun.png","path":"img/AcFun.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/CSDN.png","path":"img/CSDN.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/Coding.png","path":"img/Coding.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/LOFTER.png","path":"img/LOFTER.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/Plunker.png","path":"img/Plunker.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/Quora.png","path":"img/Quora.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/SegmentFault.png","path":"img/SegmentFault.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/TiddlyWiki.png","path":"img/TiddlyWiki.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/V2EX.png","path":"img/V2EX.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/bak_avatar.png","path":"img/bak_avatar.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/bilibili.png","path":"img/bilibili.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/niconico.png","path":"img/niconico.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/博客园.png","path":"img/博客园.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/新浪微博.png","path":"img/新浪微博.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/知乎.png","path":"img/知乎.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/网易云音乐.png","path":"img/网易云音乐.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/简书.png","path":"img/简书.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/虾米音乐.png","path":"img/虾米音乐.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/豆瓣.png","path":"img/豆瓣.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/js/GithubRepoWidget.js","path":"js/GithubRepoWidget.js","modified":1,"renderable":1},{"_id":"themes/yelee/source/js/instagram.js","path":"js/instagram.js","modified":1,"renderable":1},{"_id":"themes/yelee/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/yelee/source/js/mobile.js","path":"js/mobile.js","modified":1,"renderable":1},{"_id":"themes/yelee/source/js/pc.js","path":"js/pc.js","modified":1,"renderable":1},{"_id":"themes/yelee/source/js/search.js","path":"js/search.js","modified":1,"renderable":1},{"_id":"themes/yelee/source/js/toc.js","path":"js/toc.js","modified":1,"renderable":1},{"_id":"themes/yelee/source/background/bg-5.jpg","path":"background/bg-5.jpg","modified":1,"renderable":1},{"_id":"themes/yelee/source/background/bg-6.jpg","path":"background/bg-6.jpg","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/avatar.png","path":"img/avatar.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/background/backup/bg-1.jpg","path":"background/backup/bg-1.jpg","modified":1,"renderable":1},{"_id":"themes/yelee/source/background/backup/bg-2.jpg","path":"background/backup/bg-2.jpg","modified":1,"renderable":1},{"_id":"themes/yelee/source/background/backup/bg-3.jpg","path":"background/backup/bg-3.jpg","modified":1,"renderable":1},{"_id":"themes/yelee/source/background/backup/bg-4.jpg","path":"background/backup/bg-4.jpg","modified":1,"renderable":1}],"Cache":[{"_id":"source/test.html","hash":"816343929ea0294ca95e3581a818db756a5d4e8a","modified":1493209992175},{"_id":"themes/yelee/README.md","hash":"12bc9cdb68f51df81bcc36a5263e0a6c5860f646","modified":1493179818392},{"_id":"themes/yelee/_config.yml","hash":"870fbbeccab893533ca2bd9f1da1e0354e6db5e1","modified":1493692759062},{"_id":"themes/yelee/package.json","hash":"0199dfb3d44cf520b67464817d13c44a7766b8d6","modified":1493179818427},{"_id":"source/_posts/blog_create.md","hash":"b25b3c28fda6de34c7b2269d539d54463720760a","modified":1493193659904},{"_id":"source/_posts/druid_single_machine.md","hash":"aae5fbb882f0ad11c04ddbce48b55f4a5c5dafa3","modified":1493199812660},{"_id":"source/_posts/druid_tranquility_overview.md","hash":"cc493b4e01e626a87485605a0db9386895fe9920","modified":1493368062033},{"_id":"source/tags/index.md","hash":"6d2945c914d751a11d4740e879d415a00e94bde0","modified":1493188024123},{"_id":"source/_posts/hello-world.md","hash":"08bdca99d63bb13578a4e5a486e59ce176f01835","modified":1493194306035},{"_id":"source/about/index.md","hash":"aa4b322d5271f3a831d512cdb1fc29b98ea75c3c","modified":1493184508480},{"_id":"themes/yelee/languages/default.yml","hash":"80cc17267333753accc0b1c85a73678fedcbce76","modified":1493179818394},{"_id":"themes/yelee/languages/en.yml","hash":"2c096d06c0af4ddf9c128fc8f77fb276b59a47fb","modified":1493179818395},{"_id":"themes/yelee/languages/zh-Hans.yml","hash":"b5b2d20cde04db3773962284a002d025b09134b0","modified":1493179818396},{"_id":"themes/yelee/languages/zh-Hant-HK.yml","hash":"c38a95f5076ad951839aaf7748295d7eea277c61","modified":1493179818397},{"_id":"themes/yelee/languages/zh-Hant-TW.yml","hash":"f372cc0d758a7d8bbb885aa9756d607bec26469a","modified":1493179818398},{"_id":"themes/yelee/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1493179818423},{"_id":"themes/yelee/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1493179818423},{"_id":"themes/yelee/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1493179818424},{"_id":"themes/yelee/layout/layout.ejs","hash":"3a4350f23a1286345f76c949466c97a7200dae8e","modified":1493179818424},{"_id":"themes/yelee/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1493179818425},{"_id":"themes/yelee/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1493179818425},{"_id":"themes/yelee/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1493179818426},{"_id":"themes/yelee/source/apple-touch-icon.png","hash":"c0fda117fa166d63b9eb690cc5e4fb2caaf493b3","modified":1493179818428},{"_id":"themes/yelee/source/favicon.png","hash":"e4bca3d60087cd6e775d8e2aa2bf0d35e3859592","modified":1493179818479},{"_id":"themes/yelee/layout/_partial/after-footer.ejs","hash":"748391b89b661fa1ed7da0b15ed6870981ec4dc3","modified":1493179818400},{"_id":"themes/yelee/layout/_partial/archive-post.ejs","hash":"0ecc2ad07b4abad80f564ac1858c50bcbdff34f8","modified":1493179818400},{"_id":"themes/yelee/layout/_partial/archive.ejs","hash":"a4eacc2bc1278095a0ef99f904b0634c78f980eb","modified":1493179818401},{"_id":"themes/yelee/layout/_partial/article.ejs","hash":"afd85b362d732fa9b439af7dc44b657d0d1aae3d","modified":1493179818402},{"_id":"themes/yelee/layout/_partial/background.ejs","hash":"aeef39abef66ee0bd6c9efe856eaeb1b81416d41","modified":1493179818403},{"_id":"themes/yelee/layout/_partial/footer.ejs","hash":"82653e3bbdc605b51e1b0a36e30f3ac1180c838e","modified":1493179818412},{"_id":"themes/yelee/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1493179818413},{"_id":"themes/yelee/layout/_partial/head.ejs","hash":"55e90c3d5de6d7ffcfe26c4dc22189a7a27b6651","modified":1493179818415},{"_id":"themes/yelee/layout/_partial/header.ejs","hash":"b69855e07b65117769adc515cb64b803932068c9","modified":1493179818415},{"_id":"themes/yelee/layout/_partial/ie-updater.ejs","hash":"3e5f2e41bbb1a5b93a8a7a6cb9ccd191ced54408","modified":1493179818416},{"_id":"themes/yelee/layout/_partial/left-col.ejs","hash":"90fd7c763faf8d64d58612f592cbacbefdaea161","modified":1493179818416},{"_id":"themes/yelee/layout/_partial/mathjax.ejs","hash":"ce868f8b2b5b377cadc270e3a5bb5826f8bf0dee","modified":1493179818417},{"_id":"themes/yelee/layout/_partial/mobile-nav.ejs","hash":"306be982577b0ef968f855d0dfeaab6b180b8a50","modified":1493179818417},{"_id":"themes/yelee/layout/_partial/open-in-new-tab.ejs","hash":"a6046bc322ce9194faa9559c70e1618a7e1e4cbc","modified":1493179818417},{"_id":"themes/yelee/layout/_partial/page.ejs","hash":"cfce60062cdb60893baeda7fa0266ae4086c2bc8","modified":1493179818418},{"_id":"themes/yelee/layout/_partial/post-nav-button.ejs","hash":"0a98bffdd14f6677721841c0ac4487a86c77266c","modified":1493179818418},{"_id":"themes/yelee/layout/_partial/scrolling-button.ejs","hash":"c5e1c3a8e1e6b0d927ac25a7fb8720ee7ac83ad8","modified":1493179818421},{"_id":"themes/yelee/layout/_partial/tab-title-change.ejs","hash":"1bebab6eb7a849319cd48fe051f3c71b9349a723","modified":1493179818422},{"_id":"themes/yelee/layout/_partial/tag-cloud-page.ejs","hash":"432ded02bcc1f0d52cd833e8eeac688ee886169a","modified":1493179818422},{"_id":"themes/yelee/layout/_partial/toc.ejs","hash":"7ee88b1a98eea5cbd44c0f9a11b86b46aa2d6752","modified":1493179818423},{"_id":"themes/yelee/source/background/bg-1.jpg","hash":"9a5241de4c880f13a278f6980bf11d4dfb214d82","modified":1493179818441},{"_id":"themes/yelee/source/background/bg-2.jpg","hash":"d1e0b92e8fa822e44d185b5e1bf94ab47bc98a0a","modified":1493179818444},{"_id":"themes/yelee/source/background/bg-3.jpg","hash":"d476909f06fe8267c676952e3582bf9e9ff73585","modified":1493179818448},{"_id":"themes/yelee/source/background/bg-4.jpg","hash":"8e80d0b7786c3bf7b9648c0190719e78001e9eeb","modified":1493179818450},{"_id":"themes/yelee/source/css/_extend.styl","hash":"8ab1ad313bd6707d248c5ca1ee9a5eab8d815e42","modified":1493179818457},{"_id":"themes/yelee/source/css/_variables.styl","hash":"f429eb9bc9f0a270ec68c4f4c63903250746a01c","modified":1493179818472},{"_id":"themes/yelee/source/css/style.styl","hash":"b285f9a75abd09c7d06fe89e70f9e1819eac27dd","modified":1493179818472},{"_id":"themes/yelee/source/img/AcFun.png","hash":"df6b0fa39ced4dc988359fc7b7cd1e5403de08a6","modified":1493179818473},{"_id":"themes/yelee/source/img/CSDN.png","hash":"59f7d89eda8a7310a0ee1607e153c0829af7eb6e","modified":1493179818474},{"_id":"themes/yelee/source/img/Coding.png","hash":"afb4bce19bebf61e3c486fd5199369d6eb191b78","modified":1493179818474},{"_id":"themes/yelee/source/img/LOFTER.png","hash":"88670eaea8612839e9d6a40a3636e4231ab56c0f","modified":1493179818474},{"_id":"themes/yelee/source/img/Plunker.png","hash":"14a0054b9b4a0e459987f34b9ab48ab22dbe5cf9","modified":1493179818475},{"_id":"themes/yelee/source/img/Quora.png","hash":"1a624ade0d07f2482b21bef1e2a5ddd0110ba352","modified":1493179818475},{"_id":"themes/yelee/source/img/SegmentFault.png","hash":"1afbc7e575e2e9ed9404be84a3f92f7ca8345a9c","modified":1493179818476},{"_id":"themes/yelee/source/img/TiddlyWiki.png","hash":"b7f68f8f9c45561a9455aee0bfb80e35cae6f8df","modified":1493179818478},{"_id":"themes/yelee/source/img/V2EX.png","hash":"d0768de8555f9be0ee8ce956198cef454d4e4d7c","modified":1493179818478},{"_id":"themes/yelee/source/img/bak_avatar.png","hash":"e4bca3d60087cd6e775d8e2aa2bf0d35e3859592","modified":1493179818479},{"_id":"themes/yelee/source/img/bilibili.png","hash":"be37b7e9a091c8547b8ee8b9d29583af8ded61c0","modified":1493179818479},{"_id":"themes/yelee/source/img/niconico.png","hash":"fabc7ca45e9ee5698db33a25de8b1f8a7c7d6723","modified":1493179818480},{"_id":"themes/yelee/source/img/scrollbar_arrow.png","hash":"af987032f2171867bb58b165d2180eb5dcbea637","modified":1493179818480},{"_id":"themes/yelee/source/img/博客园.png","hash":"5ff6f4c9f1fc1695217a57436d58b246d9d2f197","modified":1493179818480},{"_id":"themes/yelee/source/img/新浪微博.png","hash":"7a145ed1daee0c172cda77098f4254fc21f9eeee","modified":1493179818481},{"_id":"themes/yelee/source/img/知乎.png","hash":"ed6d3c304789e112d09f40784fa6add1f1a38bd6","modified":1493179818481},{"_id":"themes/yelee/source/img/网易云音乐.png","hash":"4fd1275fd988584811cf710207eb077f2306f271","modified":1493179818482},{"_id":"themes/yelee/source/img/简书.png","hash":"5c91ee83cab4abe160240e09de345b6935c8cb37","modified":1493179818482},{"_id":"themes/yelee/source/img/虾米音乐.png","hash":"a0039b049779b1f37c0b0b91760943b7bf25c8f1","modified":1493179818482},{"_id":"themes/yelee/source/img/豆瓣.png","hash":"f1fc97f98612bcdf4a681542e5388483b40a5300","modified":1493179818483},{"_id":"themes/yelee/source/js/GithubRepoWidget.js","hash":"624e81a3b0e57495b0c0e0b3e056296c6e8ae5df","modified":1493179818483},{"_id":"themes/yelee/source/js/instagram.js","hash":"81e13cacf4947118ed1920e59b04ccf6beef6b86","modified":1493179818484},{"_id":"themes/yelee/source/js/main.js","hash":"369774a7ff45a2e5117a796330a04aeb50a61fdf","modified":1493179818484},{"_id":"themes/yelee/source/js/mobile.js","hash":"8abc32d18f16db56f51caad607cffb6ca756eca9","modified":1493179818485},{"_id":"themes/yelee/source/js/pc.js","hash":"bc289c5dc610e2a34d308daeb9adea96d01f7788","modified":1493179818485},{"_id":"themes/yelee/source/js/search.js","hash":"b456aaab98bbc3b0906f8a16d1e6e4f74dfcffda","modified":1493179818486},{"_id":"themes/yelee/source/js/toc.js","hash":"72ba1228fc1a44df45b8f4b562eba78594f13016","modified":1493179818487},{"_id":"themes/yelee/source/background/bg-5.jpg","hash":"e4a3631b6b0f94ebce30a6f01ecb2b6ed7cfdb0b","modified":1493179818453},{"_id":"themes/yelee/source/background/bg-6.jpg","hash":"51b427f07ffc6f2ad97651f23cc16e8f19ed02f9","modified":1493179818456},{"_id":"themes/yelee/source/img/avatar.png","hash":"907e7c2cf0b40d3ebc9d54f8693f885fa5e53226","modified":1493361235549},{"_id":"themes/yelee/layout/_partial/comments/click2show.ejs","hash":"678f3aec2980d378ea44be60eec3eb504c8ba668","modified":1493179818404},{"_id":"themes/yelee/layout/_partial/comments/count-comment.ejs","hash":"d3c1b0b31db9d80e857f3054d010ea49c0f88134","modified":1493179818405},{"_id":"themes/yelee/layout/_partial/comments/disqus.ejs","hash":"df7ee469b648b12b5ee3104ef513d54cbb7418af","modified":1493179818407},{"_id":"themes/yelee/layout/_partial/comments/duoshuo.ejs","hash":"e7f12f1246a67a5b556c2d5b37dc78733f1cf15a","modified":1493179818409},{"_id":"themes/yelee/layout/_partial/comments/youyan.ejs","hash":"bcf2070587645afd20a4eb046b9c8bb9c44d1cf5","modified":1493179818410},{"_id":"themes/yelee/layout/_partial/post/category.ejs","hash":"08c8d98bc6a73d3f72a3b0b30521ff28e1b657a7","modified":1493179818419},{"_id":"themes/yelee/layout/_partial/post/date.ejs","hash":"329ed372296a86bce73ff8936af5601723fdd70a","modified":1493179818419},{"_id":"themes/yelee/layout/_partial/post/nav.ejs","hash":"6f531dbc9cc7ae42d2486d6707f826cfe7d9d8bc","modified":1493179818420},{"_id":"themes/yelee/layout/_partial/post/share.ejs","hash":"58c2db54a9867aaafe68a7f052b04701c7c3df0f","modified":1493179818420},{"_id":"themes/yelee/layout/_partial/post/tag.ejs","hash":"7d2693a1162bf26e4b1ae9b789e0b2a2637ddbd5","modified":1493179818421},{"_id":"themes/yelee/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1493179818421},{"_id":"themes/yelee/source/background/backup/bg-1.jpg","hash":"31d7bb15211000c05656899302f8ec9ee3de0e9f","modified":1493179818430},{"_id":"themes/yelee/source/background/backup/bg-2.jpg","hash":"7ae358f3ab8b41558444053400e796c41b3ba0e2","modified":1493179818434},{"_id":"themes/yelee/source/background/backup/bg-3.jpg","hash":"1a06d3a660bfb99b62d760e4e1e09de168a4c74c","modified":1493179818436},{"_id":"themes/yelee/source/background/backup/bg-4.jpg","hash":"6df1383d0f6134016d844df9abb740a6e0c0b2c5","modified":1493179818438},{"_id":"themes/yelee/source/css/_partial/archive.styl","hash":"102c23dbb6cde3cbfca3b151c742e0d77911186e","modified":1493179818458},{"_id":"themes/yelee/source/css/_partial/article.styl","hash":"190828c822096bb3098a7d14c3340eb004057aa0","modified":1493179818458},{"_id":"themes/yelee/source/css/_partial/footer.styl","hash":"a419108f1b820c59fcc56d218bfaaa4ffc4f1d4d","modified":1493179818464},{"_id":"themes/yelee/source/css/_partial/header.styl","hash":"67e59feb18eee6026717cb440d86ab9551782628","modified":1493179818465},{"_id":"themes/yelee/source/css/_partial/instagram.styl","hash":"a093443add2f529396d6b6bdef1675bc3acf3958","modified":1493179818466},{"_id":"themes/yelee/source/css/_partial/highlight.styl","hash":"4e34bf9340ce9b15d2d59fc4ea761d1d110927cf","modified":1493179818465},{"_id":"themes/yelee/source/css/_partial/main.styl","hash":"405db411896f3c7de9e7dd27e58c920fb90b9834","modified":1493179818466},{"_id":"themes/yelee/source/css/_partial/mobile-slider.styl","hash":"39db458d4e9f6973afc1390b4d3fc0291fff4c40","modified":1493179818467},{"_id":"themes/yelee/source/css/_partial/mobile.styl","hash":"dfb20f2515a26d75e42fe09741e91cc889426b11","modified":1493179818467},{"_id":"themes/yelee/source/css/_partial/page.styl","hash":"ca3f871adf8fdb296e4394070605dded53d93cb2","modified":1493179818468},{"_id":"themes/yelee/source/css/_partial/scroll.styl","hash":"f32deb9192568a2ea789d77a23a08d07f4e57d59","modified":1493179818468},{"_id":"themes/yelee/source/css/_partial/search.styl","hash":"fcaa5deaa654aaec69e267e23b49df07f84f633a","modified":1493179818469},{"_id":"themes/yelee/source/css/_partial/share.styl","hash":"88c1277397b71eb1f3473a94d9542314f983cd09","modified":1493179818469},{"_id":"themes/yelee/source/css/_partial/tagcloud.styl","hash":"b38b275728bfe11809defe1077b03cb423c3c92f","modified":1493179818470},{"_id":"themes/yelee/source/css/_partial/toc.styl","hash":"eb19bbd37fc2c1abd238e2ed96b22cb1aae41ab7","modified":1493179818470},{"_id":"themes/yelee/source/css/_partial/wheelmenu.styl","hash":"9e57421eab562ea13d0ed2b2e1415eee79fa23d0","modified":1493179818470},{"_id":"themes/yelee/source/css/_util/grid.styl","hash":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1493179818471},{"_id":"themes/yelee/source/css/_util/mixin.styl","hash":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1493179818472},{"_id":"themes/yelee/source/css/_partial/customise/blockquote.styl","hash":"5e6edb9ad49288743ed550a2bd8c9a3c8e208455","modified":1493179818459},{"_id":"themes/yelee/source/css/_partial/customise/code-block.styl","hash":"4db1a992a06fd92b779f0afc9bb8bb3667bdb101","modified":1493179818460},{"_id":"themes/yelee/source/css/_partial/customise/color-scheme.styl","hash":"b58262a9f8903e75df431291745e19ccd8ff243a","modified":1493179818461},{"_id":"themes/yelee/source/css/_partial/customise/heading.styl","hash":"f309241c1daa9b6c04aa04063307537c219fdd59","modified":1493179818462},{"_id":"themes/yelee/source/css/_partial/customise/list.styl","hash":"b1e564ed76d6e892556b61b4278270fc9eeea961","modified":1493179818463},{"_id":"themes/yelee/source/css/_partial/customise/inline-code.styl","hash":"a15292b2b3541ea022c0fb7441875192dee5ad9d","modified":1493179818462},{"_id":"themes/yelee/source/css/_partial/customise/social-icon.styl","hash":"bfa5c863d474266f32a570e34a0effda964f7f40","modified":1493179818464}],"Category":[{"name":"hexo","_id":"cj26ydlyf00089cuk1nbo4z9m"}],"Data":[],"Page":[{"_content":"<!DOCTYPE html>\n<html lang=\"zh-CN\">\n<head>\n\n    <!--[if lt IE 9]>\n        <style>body {display: none; background: none !important} </style>\n        <meta http-equiv=\"Refresh\" Content=\"0; url=//outdatedbrowser.com/\" />\n    <![endif]-->\n\n<meta charset=\"utf-8\">\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge, chrome=1\" />\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no\">\n<meta name=\"format-detection\" content=\"telephone=no\" />\n\n<title>MiaoMiao</title>\n\n\n\n</head>\n<body>\n\n  <h1>ni shuo sha</h1>\n  \n  \n</body>\n</html>","source":"test.html","raw":"<!DOCTYPE html>\n<html lang=\"zh-CN\">\n<head>\n\n    <!--[if lt IE 9]>\n        <style>body {display: none; background: none !important} </style>\n        <meta http-equiv=\"Refresh\" Content=\"0; url=//outdatedbrowser.com/\" />\n    <![endif]-->\n\n<meta charset=\"utf-8\">\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge, chrome=1\" />\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no\">\n<meta name=\"format-detection\" content=\"telephone=no\" />\n\n<title>MiaoMiao</title>\n\n\n\n</head>\n<body>\n\n  <h1>ni shuo sha</h1>\n  \n  \n</body>\n</html>","date":"2017-04-26T12:33:12.175Z","updated":"2017-04-26T12:33:12.175Z","path":"test.html","title":"","comments":1,"layout":"page","_id":"cj26ydlw400009cukhf5v1wn4","content":"<!DOCTYPE html>\n<html lang=\"zh-CN\">\n<head>\n\n    <!--[if lt IE 9]>\n        <style>body {display: none; background: none !important} </style>\n        <meta http-equiv=\"Refresh\" Content=\"0; url=//outdatedbrowser.com/\" />\n    <![endif]-->\n\n<meta charset=\"utf-8\">\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge, chrome=1\">\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no\">\n<meta name=\"format-detection\" content=\"telephone=no\">\n\n<title>MiaoMiao</title>\n\n\n\n</head>\n<body>\n\n  <h1>ni shuo sha</h1>\n  \n  \n</body>\n</html>","site":{"data":{}},"excerpt":"","more":"<!DOCTYPE html>\n<html lang=\"zh-CN\">\n<head>\n\n    <!--[if lt IE 9]>\n        <style>body {display: none; background: none !important} </style>\n        <meta http-equiv=\"Refresh\" Content=\"0; url=//outdatedbrowser.com/\" />\n    <![endif]-->\n\n<meta charset=\"utf-8\">\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge, chrome=1\" />\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no\">\n<meta name=\"format-detection\" content=\"telephone=no\" />\n\n<title>MiaoMiao</title>\n\n\n\n</head>\n<body>\n\n  <h1>ni shuo sha</h1>\n  \n  \n</body>\n</html>"},{"title":"tags","date":"2017-04-26T04:13:46.000Z","type":"tags","comment":false,"_content":"\n","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2017-04-26 12:13:46\ntype: \"tags\"\ncomment: false\n---\n\n","updated":"2017-04-26T06:27:04.123Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cj26ydlxz00029cukr7ihxmo5","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"about","date":"2017-04-26T04:13:29.000Z","_content":"人称李先生，本人才疏学浅，已存于世近30载，一直无所建树，想着趁余生，能尽自己所能学点东西，也算不枉世上走一遭。\n\n近几日，更是对人生充满了迷茫，不知道应该做一个怎样的人，人到底该怎样做，我是好人还是坏人，我在别人眼中是什么样的，很希望能有高人，为鄙人解惑，感谢。\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2017-04-26 12:13:29\n---\n人称李先生，本人才疏学浅，已存于世近30载，一直无所建树，想着趁余生，能尽自己所能学点东西，也算不枉世上走一遭。\n\n近几日，更是对人生充满了迷茫，不知道应该做一个怎样的人，人到底该怎样做，我是好人还是坏人，我在别人眼中是什么样的，很希望能有高人，为鄙人解惑，感谢。\n","updated":"2017-04-26T05:28:28.480Z","path":"about/index.html","comments":1,"layout":"page","_id":"cj26ydlxz00049cukacb3cttm","content":"<p>人称李先生，本人才疏学浅，已存于世近30载，一直无所建树，想着趁余生，能尽自己所能学点东西，也算不枉世上走一遭。</p>\n<p>近几日，更是对人生充满了迷茫，不知道应该做一个怎样的人，人到底该怎样做，我是好人还是坏人，我在别人眼中是什么样的，很希望能有高人，为鄙人解惑，感谢。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>人称李先生，本人才疏学浅，已存于世近30载，一直无所建树，想着趁余生，能尽自己所能学点东西，也算不枉世上走一遭。</p>\n<p>近几日，更是对人生充满了迷茫，不知道应该做一个怎样的人，人到底该怎样做，我是好人还是坏人，我在别人眼中是什么样的，很希望能有高人，为鄙人解惑，感谢。</p>\n"}],"Post":[{"title":"hexo+github搭建博客步骤","_content":"\n一时兴起，想搭建一个自己的博客，就动手搭建了一个，这里做一个记录，记录下自己踩得坑，以免自己以后忘记\n\n## 整个搭建流程总览\n\n``` \n创建自己的github账号\n创建username.github.io的项目\n创建本地hexo项目\n将本地hexo项目发布到github\n```\n+ <!-- more -->\n## 具体操作流程\n\n\n### 创建github账号\n\n``` bash\n到https://github.com/注册自己的github账号\n```\n### 在github中，创建一个仓库，命名为username.github.io (例：miaomiao.github.io)\n\n``` bash\n特别说明：如果出现本地hexo服务正常，但是github上的博客项目不能访问，我这里遇到的情况是username没有使用自己github的账号，对项目重命名，就可以了。\n```\n\n### 本地hexo项目创建\n\n``` bash\nnpm install -g hexo-cli (安装hexo)\nnpm install \nhexo init (初始化hexo 项目)\nhexo generate (or hexo g) （生成静态文件）\nhexo deploy (or hexo d) (发布本地项目到github)\n```\n\n更多细节，不再赘述，可以参考: http://crazymilk.github.io/2015/12/28/GitHub-Pages-Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/#more\n\n\n\n","source":"_posts/blog_create.md","raw":"---\ntitle: hexo+github搭建博客步骤\ntags:\n- hexo\n- github pages\n---\n\n一时兴起，想搭建一个自己的博客，就动手搭建了一个，这里做一个记录，记录下自己踩得坑，以免自己以后忘记\n\n## 整个搭建流程总览\n\n``` \n创建自己的github账号\n创建username.github.io的项目\n创建本地hexo项目\n将本地hexo项目发布到github\n```\n+ <!-- more -->\n## 具体操作流程\n\n\n### 创建github账号\n\n``` bash\n到https://github.com/注册自己的github账号\n```\n### 在github中，创建一个仓库，命名为username.github.io (例：miaomiao.github.io)\n\n``` bash\n特别说明：如果出现本地hexo服务正常，但是github上的博客项目不能访问，我这里遇到的情况是username没有使用自己github的账号，对项目重命名，就可以了。\n```\n\n### 本地hexo项目创建\n\n``` bash\nnpm install -g hexo-cli (安装hexo)\nnpm install \nhexo init (初始化hexo 项目)\nhexo generate (or hexo g) （生成静态文件）\nhexo deploy (or hexo d) (发布本地项目到github)\n```\n\n更多细节，不再赘述，可以参考: http://crazymilk.github.io/2015/12/28/GitHub-Pages-Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/#more\n\n\n\n","slug":"blog_create","published":1,"date":"2017-04-26T06:39:12.567Z","updated":"2017-04-26T08:00:59.904Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj26ydlxk00019cuk26m2lmbb","content":"<p>一时兴起，想搭建一个自己的博客，就动手搭建了一个，这里做一个记录，记录下自己踩得坑，以免自己以后忘记</p>\n<h2 id=\"整个搭建流程总览\"><a href=\"#整个搭建流程总览\" class=\"headerlink\" title=\"整个搭建流程总览\"></a>整个搭建流程总览</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">创建自己的github账号</div><div class=\"line\">创建username.github.io的项目</div><div class=\"line\">创建本地hexo项目</div><div class=\"line\">将本地hexo项目发布到github</div></pre></td></tr></table></figure>\n<ul>\n<li><a id=\"more\"></a>\n<h2 id=\"具体操作流程\"><a href=\"#具体操作流程\" class=\"headerlink\" title=\"具体操作流程\"></a>具体操作流程</h2></li>\n</ul>\n<h3 id=\"创建github账号\"><a href=\"#创建github账号\" class=\"headerlink\" title=\"创建github账号\"></a>创建github账号</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">到https://github.com/注册自己的github账号</div></pre></td></tr></table></figure>\n<h3 id=\"在github中，创建一个仓库，命名为username-github-io-例：miaomiao-github-io\"><a href=\"#在github中，创建一个仓库，命名为username-github-io-例：miaomiao-github-io\" class=\"headerlink\" title=\"在github中，创建一个仓库，命名为username.github.io (例：miaomiao.github.io)\"></a>在github中，创建一个仓库，命名为username.github.io (例：miaomiao.github.io)</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">特别说明：如果出现本地hexo服务正常，但是github上的博客项目不能访问，我这里遇到的情况是username没有使用自己github的账号，对项目重命名，就可以了。</div></pre></td></tr></table></figure>\n<h3 id=\"本地hexo项目创建\"><a href=\"#本地hexo项目创建\" class=\"headerlink\" title=\"本地hexo项目创建\"></a>本地hexo项目创建</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install -g hexo-cli (安装hexo)</div><div class=\"line\">npm install </div><div class=\"line\">hexo init (初始化hexo 项目)</div><div class=\"line\">hexo generate (or hexo g) （生成静态文件）</div><div class=\"line\">hexo deploy (or hexo d) (发布本地项目到github)</div></pre></td></tr></table></figure>\n<p>更多细节，不再赘述，可以参考: <a href=\"http://crazymilk.github.io/2015/12/28/GitHub-Pages-Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/#more\" target=\"_blank\" rel=\"external\">http://crazymilk.github.io/2015/12/28/GitHub-Pages-Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/#more</a></p>\n","site":{"data":{}},"excerpt":"<p>一时兴起，想搭建一个自己的博客，就动手搭建了一个，这里做一个记录，记录下自己踩得坑，以免自己以后忘记</p>\n<h2 id=\"整个搭建流程总览\"><a href=\"#整个搭建流程总览\" class=\"headerlink\" title=\"整个搭建流程总览\"></a>整个搭建流程总览</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">创建自己的github账号</div><div class=\"line\">创建username.github.io的项目</div><div class=\"line\">创建本地hexo项目</div><div class=\"line\">将本地hexo项目发布到github</div></pre></td></tr></table></figure>\n<ul>\n<li>","more":"<h2 id=\"具体操作流程\"><a href=\"#具体操作流程\" class=\"headerlink\" title=\"具体操作流程\"></a>具体操作流程</h2></li>\n</ul>\n<h3 id=\"创建github账号\"><a href=\"#创建github账号\" class=\"headerlink\" title=\"创建github账号\"></a>创建github账号</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">到https://github.com/注册自己的github账号</div></pre></td></tr></table></figure>\n<h3 id=\"在github中，创建一个仓库，命名为username-github-io-例：miaomiao-github-io\"><a href=\"#在github中，创建一个仓库，命名为username-github-io-例：miaomiao-github-io\" class=\"headerlink\" title=\"在github中，创建一个仓库，命名为username.github.io (例：miaomiao.github.io)\"></a>在github中，创建一个仓库，命名为username.github.io (例：miaomiao.github.io)</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">特别说明：如果出现本地hexo服务正常，但是github上的博客项目不能访问，我这里遇到的情况是username没有使用自己github的账号，对项目重命名，就可以了。</div></pre></td></tr></table></figure>\n<h3 id=\"本地hexo项目创建\"><a href=\"#本地hexo项目创建\" class=\"headerlink\" title=\"本地hexo项目创建\"></a>本地hexo项目创建</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install -g hexo-cli (安装hexo)</div><div class=\"line\">npm install </div><div class=\"line\">hexo init (初始化hexo 项目)</div><div class=\"line\">hexo generate (or hexo g) （生成静态文件）</div><div class=\"line\">hexo deploy (or hexo d) (发布本地项目到github)</div></pre></td></tr></table></figure>\n<p>更多细节，不再赘述，可以参考: <a href=\"http://crazymilk.github.io/2015/12/28/GitHub-Pages-Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/#more\">http://crazymilk.github.io/2015/12/28/GitHub-Pages-Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/#more</a></p>"},{"title":"druid.io历史最详细单机搭建流程","_content":"\n  druid使用也有一年了，踩过的坑无数，现在虽然线上服务已经稳定，但是还是使用的小白，觉得还是有必要把搭建的流程记录下。\n  单机版的搭建流程十分简单，适合机器资源不是很充足，或者对druid使用方法测试阶段。其实步骤跟官网上介绍的流程一样的，实时加载使用druid+tranquility，离线数据加载使用druid的batch加载方式。用的很简单，有不足的地方，望指教。\n\n+ <!-- more -->\n  \n## 准备工作 \n\n``` bash\ndruid\ntranquility\nzookeeper\n```\n\n\n## druid集群启动\n\n### 准备机器（一台）\n\n```bash\nJava 8 或者更高版本\nLinux, Mac OS X, 或者其他 Unix-like OS (Windows不支持，可以使用虚拟机)\n8G内存\n2核cpu\n```\n\n### 下载druid\n```bash\ncurl -O http://static.druid.io/artifacts/releases/druid-0.10.0-bin.tar.gz\ntar -xzf druid-0.10.0-bin.tar.gz\ncd druid-0.10.0\n```\n\n### 启动zk（根据自己的习惯，将zk放在合适的地方）\n```\ncurl http://www.gtlib.gatech.edu/pub/apache/zookeeper/zookeeper-3.4.6/zookeeper-3.4.6.tar.gz -o zookeeper-3.4.6.tar.gz\ntar -xzf zookeeper-3.4.6.tar.gz\ncd zookeeper-3.4.6\ncp conf/zoo_sample.cfg conf/zoo.cfg\n./bin/zkServer.sh start\n```\n\n### 初始化一些文件夹（druid运行过程中，需要生成的文件存放的地方）\n```\n在druid文件的根目录下执行：bin/init\n```\n\n### druid单机版集群启动命令\n```\njava `cat conf-quickstart/druid/historical/jvm.config | xargs` -cp \"conf-quickstart/druid/_common:conf-quickstart/druid/historical:lib/*\" io.druid.cli.Main server historical\njava `cat conf-quickstart/druid/broker/jvm.config | xargs` -cp \"conf-quickstart/druid/_common:conf-quickstart/druid/broker:lib/*\" io.druid.cli.Main server broker\njava `cat conf-quickstart/druid/coordinator/jvm.config | xargs` -cp \"conf-quickstart/druid/_common:conf-quickstart/druid/coordinator:lib/*\" io.druid.cli.Main server coordinator\njava `cat conf-quickstart/druid/overlord/jvm.config | xargs` -cp \"conf-quickstart/druid/_common:conf-quickstart/druid/overlord:lib/*\" io.druid.cli.Main server overlord\njava `cat conf-quickstart/druid/middleManager/jvm.config | xargs` -cp \"conf-quickstart/druid/_common:conf-quickstart/druid/middleManager:lib/*\" io.druid.cli.Main server middleManager\n```\n\n以上，就是druid单机版的测试版本配置和启动的过程，其中，注意启动用户的权限，如果用户没有创建文件夹的权限，记得提高用户的权限。有了上述的工作，我们就有了一个单机版的druid测试集群，接下来我们要启动tranquility服务，用来接收实时数据流。\n\n\n## tranquility启动\n\n### 下载tranquility\n```\ncurl -O http://static.druid.io/tranquility/releases/tranquility-distribution-0.8.0.tgz\ntar -xzf tranquility-distribution-0.8.0.tgz\ncd tranquility-distribution-0.8.0\n```\n\n### 启动tranquility服务\n/conf-quickstart/tranquility/server.json 是实时流加载配置文件\n```\nbin/tranquility server -configFile <path_to_druid_distro>/conf-quickstart/tranquility/server.json\n```\n\n### 一个测试的实时流数据\n```\nbin/generate-example-metrics | curl -XPOST -H'Content-Type: application/json' --data-binary @- http://localhost:8200/v1/post/metrics\n```\n如果收到{\"result\":{\"received\":25,\"sent\":25}}的结果，证明成功了\n\n\n### 查询\n8082端口是druid集群的broker节点的接口,wikiticker-top-pages.json为查询命令文件。这里是用户以二进制文件的方式提交一个post请求\n```\ncurl -L -H'Content-Type: application/json' -XPOST --data-binary @quickstart/wikiticker-top-pages.json http://localhost:8082/druid/v2/?pretty\n```\n\n结束语：\n  以上，用实时的方式加载数据到druid的单机测试已经完成，这只是一个简单的练手，通过这个测试，我们可以对druid的加载方式有个简单的了解，druid集群，有5个节点，coordinater+overlord属于集群的master，起到控制的作用，middlemanager为task管理，historical为历史节点，也可以进行数据的查询，但是只能查询到已经做了落地的数据，实时数据不能查询到，broker为client的访问接口，通过这个节点，可以访问到实时数据和历史数据。\n\n\n友情链接：http://druid.io\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/druid_single_machine.md","raw":"---\ntitle: druid.io历史最详细单机搭建流程\ntags: druid.io\n---\n\n  druid使用也有一年了，踩过的坑无数，现在虽然线上服务已经稳定，但是还是使用的小白，觉得还是有必要把搭建的流程记录下。\n  单机版的搭建流程十分简单，适合机器资源不是很充足，或者对druid使用方法测试阶段。其实步骤跟官网上介绍的流程一样的，实时加载使用druid+tranquility，离线数据加载使用druid的batch加载方式。用的很简单，有不足的地方，望指教。\n\n+ <!-- more -->\n  \n## 准备工作 \n\n``` bash\ndruid\ntranquility\nzookeeper\n```\n\n\n## druid集群启动\n\n### 准备机器（一台）\n\n```bash\nJava 8 或者更高版本\nLinux, Mac OS X, 或者其他 Unix-like OS (Windows不支持，可以使用虚拟机)\n8G内存\n2核cpu\n```\n\n### 下载druid\n```bash\ncurl -O http://static.druid.io/artifacts/releases/druid-0.10.0-bin.tar.gz\ntar -xzf druid-0.10.0-bin.tar.gz\ncd druid-0.10.0\n```\n\n### 启动zk（根据自己的习惯，将zk放在合适的地方）\n```\ncurl http://www.gtlib.gatech.edu/pub/apache/zookeeper/zookeeper-3.4.6/zookeeper-3.4.6.tar.gz -o zookeeper-3.4.6.tar.gz\ntar -xzf zookeeper-3.4.6.tar.gz\ncd zookeeper-3.4.6\ncp conf/zoo_sample.cfg conf/zoo.cfg\n./bin/zkServer.sh start\n```\n\n### 初始化一些文件夹（druid运行过程中，需要生成的文件存放的地方）\n```\n在druid文件的根目录下执行：bin/init\n```\n\n### druid单机版集群启动命令\n```\njava `cat conf-quickstart/druid/historical/jvm.config | xargs` -cp \"conf-quickstart/druid/_common:conf-quickstart/druid/historical:lib/*\" io.druid.cli.Main server historical\njava `cat conf-quickstart/druid/broker/jvm.config | xargs` -cp \"conf-quickstart/druid/_common:conf-quickstart/druid/broker:lib/*\" io.druid.cli.Main server broker\njava `cat conf-quickstart/druid/coordinator/jvm.config | xargs` -cp \"conf-quickstart/druid/_common:conf-quickstart/druid/coordinator:lib/*\" io.druid.cli.Main server coordinator\njava `cat conf-quickstart/druid/overlord/jvm.config | xargs` -cp \"conf-quickstart/druid/_common:conf-quickstart/druid/overlord:lib/*\" io.druid.cli.Main server overlord\njava `cat conf-quickstart/druid/middleManager/jvm.config | xargs` -cp \"conf-quickstart/druid/_common:conf-quickstart/druid/middleManager:lib/*\" io.druid.cli.Main server middleManager\n```\n\n以上，就是druid单机版的测试版本配置和启动的过程，其中，注意启动用户的权限，如果用户没有创建文件夹的权限，记得提高用户的权限。有了上述的工作，我们就有了一个单机版的druid测试集群，接下来我们要启动tranquility服务，用来接收实时数据流。\n\n\n## tranquility启动\n\n### 下载tranquility\n```\ncurl -O http://static.druid.io/tranquility/releases/tranquility-distribution-0.8.0.tgz\ntar -xzf tranquility-distribution-0.8.0.tgz\ncd tranquility-distribution-0.8.0\n```\n\n### 启动tranquility服务\n/conf-quickstart/tranquility/server.json 是实时流加载配置文件\n```\nbin/tranquility server -configFile <path_to_druid_distro>/conf-quickstart/tranquility/server.json\n```\n\n### 一个测试的实时流数据\n```\nbin/generate-example-metrics | curl -XPOST -H'Content-Type: application/json' --data-binary @- http://localhost:8200/v1/post/metrics\n```\n如果收到{\"result\":{\"received\":25,\"sent\":25}}的结果，证明成功了\n\n\n### 查询\n8082端口是druid集群的broker节点的接口,wikiticker-top-pages.json为查询命令文件。这里是用户以二进制文件的方式提交一个post请求\n```\ncurl -L -H'Content-Type: application/json' -XPOST --data-binary @quickstart/wikiticker-top-pages.json http://localhost:8082/druid/v2/?pretty\n```\n\n结束语：\n  以上，用实时的方式加载数据到druid的单机测试已经完成，这只是一个简单的练手，通过这个测试，我们可以对druid的加载方式有个简单的了解，druid集群，有5个节点，coordinater+overlord属于集群的master，起到控制的作用，middlemanager为task管理，historical为历史节点，也可以进行数据的查询，但是只能查询到已经做了落地的数据，实时数据不能查询到，broker为client的访问接口，通过这个节点，可以访问到实时数据和历史数据。\n\n\n友情链接：http://druid.io\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"druid_single_machine","published":1,"date":"2017-04-26T08:02:18.592Z","updated":"2017-04-26T09:43:32.660Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj26ydlxz00039cuk2yyo312b","content":"<p>  druid使用也有一年了，踩过的坑无数，现在虽然线上服务已经稳定，但是还是使用的小白，觉得还是有必要把搭建的流程记录下。<br>  单机版的搭建流程十分简单，适合机器资源不是很充足，或者对druid使用方法测试阶段。其实步骤跟官网上介绍的流程一样的，实时加载使用druid+tranquility，离线数据加载使用druid的batch加载方式。用的很简单，有不足的地方，望指教。</p>\n<ul>\n<li><a id=\"more\"></a>\n</li>\n</ul>\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">druid</div><div class=\"line\">tranquility</div><div class=\"line\">zookeeper</div></pre></td></tr></table></figure>\n<h2 id=\"druid集群启动\"><a href=\"#druid集群启动\" class=\"headerlink\" title=\"druid集群启动\"></a>druid集群启动</h2><h3 id=\"准备机器（一台）\"><a href=\"#准备机器（一台）\" class=\"headerlink\" title=\"准备机器（一台）\"></a>准备机器（一台）</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Java 8 或者更高版本</div><div class=\"line\">Linux, Mac OS X, 或者其他 Unix-like OS (Windows不支持，可以使用虚拟机)</div><div class=\"line\">8G内存</div><div class=\"line\">2核cpu</div></pre></td></tr></table></figure>\n<h3 id=\"下载druid\"><a href=\"#下载druid\" class=\"headerlink\" title=\"下载druid\"></a>下载druid</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">curl -O http://static.druid.io/artifacts/releases/druid-0.10.0-bin.tar.gz</div><div class=\"line\">tar -xzf druid-0.10.0-bin.tar.gz</div><div class=\"line\"><span class=\"built_in\">cd</span> druid-0.10.0</div></pre></td></tr></table></figure>\n<h3 id=\"启动zk（根据自己的习惯，将zk放在合适的地方）\"><a href=\"#启动zk（根据自己的习惯，将zk放在合适的地方）\" class=\"headerlink\" title=\"启动zk（根据自己的习惯，将zk放在合适的地方）\"></a>启动zk（根据自己的习惯，将zk放在合适的地方）</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">curl http://www.gtlib.gatech.edu/pub/apache/zookeeper/zookeeper-3.4.6/zookeeper-3.4.6.tar.gz -o zookeeper-3.4.6.tar.gz</div><div class=\"line\">tar -xzf zookeeper-3.4.6.tar.gz</div><div class=\"line\">cd zookeeper-3.4.6</div><div class=\"line\">cp conf/zoo_sample.cfg conf/zoo.cfg</div><div class=\"line\">./bin/zkServer.sh start</div></pre></td></tr></table></figure>\n<h3 id=\"初始化一些文件夹（druid运行过程中，需要生成的文件存放的地方）\"><a href=\"#初始化一些文件夹（druid运行过程中，需要生成的文件存放的地方）\" class=\"headerlink\" title=\"初始化一些文件夹（druid运行过程中，需要生成的文件存放的地方）\"></a>初始化一些文件夹（druid运行过程中，需要生成的文件存放的地方）</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">在druid文件的根目录下执行：bin/init</div></pre></td></tr></table></figure>\n<h3 id=\"druid单机版集群启动命令\"><a href=\"#druid单机版集群启动命令\" class=\"headerlink\" title=\"druid单机版集群启动命令\"></a>druid单机版集群启动命令</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">java `cat conf-quickstart/druid/historical/jvm.config | xargs` -cp &quot;conf-quickstart/druid/_common:conf-quickstart/druid/historical:lib/*&quot; io.druid.cli.Main server historical</div><div class=\"line\">java `cat conf-quickstart/druid/broker/jvm.config | xargs` -cp &quot;conf-quickstart/druid/_common:conf-quickstart/druid/broker:lib/*&quot; io.druid.cli.Main server broker</div><div class=\"line\">java `cat conf-quickstart/druid/coordinator/jvm.config | xargs` -cp &quot;conf-quickstart/druid/_common:conf-quickstart/druid/coordinator:lib/*&quot; io.druid.cli.Main server coordinator</div><div class=\"line\">java `cat conf-quickstart/druid/overlord/jvm.config | xargs` -cp &quot;conf-quickstart/druid/_common:conf-quickstart/druid/overlord:lib/*&quot; io.druid.cli.Main server overlord</div><div class=\"line\">java `cat conf-quickstart/druid/middleManager/jvm.config | xargs` -cp &quot;conf-quickstart/druid/_common:conf-quickstart/druid/middleManager:lib/*&quot; io.druid.cli.Main server middleManager</div></pre></td></tr></table></figure>\n<p>以上，就是druid单机版的测试版本配置和启动的过程，其中，注意启动用户的权限，如果用户没有创建文件夹的权限，记得提高用户的权限。有了上述的工作，我们就有了一个单机版的druid测试集群，接下来我们要启动tranquility服务，用来接收实时数据流。</p>\n<h2 id=\"tranquility启动\"><a href=\"#tranquility启动\" class=\"headerlink\" title=\"tranquility启动\"></a>tranquility启动</h2><h3 id=\"下载tranquility\"><a href=\"#下载tranquility\" class=\"headerlink\" title=\"下载tranquility\"></a>下载tranquility</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">curl -O http://static.druid.io/tranquility/releases/tranquility-distribution-0.8.0.tgz</div><div class=\"line\">tar -xzf tranquility-distribution-0.8.0.tgz</div><div class=\"line\">cd tranquility-distribution-0.8.0</div></pre></td></tr></table></figure>\n<h3 id=\"启动tranquility服务\"><a href=\"#启动tranquility服务\" class=\"headerlink\" title=\"启动tranquility服务\"></a>启动tranquility服务</h3><p>/conf-quickstart/tranquility/server.json 是实时流加载配置文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">bin/tranquility server -configFile &lt;path_to_druid_distro&gt;/conf-quickstart/tranquility/server.json</div></pre></td></tr></table></figure></p>\n<h3 id=\"一个测试的实时流数据\"><a href=\"#一个测试的实时流数据\" class=\"headerlink\" title=\"一个测试的实时流数据\"></a>一个测试的实时流数据</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">bin/generate-example-metrics | curl -XPOST -H&apos;Content-Type: application/json&apos; --data-binary @- http://localhost:8200/v1/post/metrics</div></pre></td></tr></table></figure>\n<p>如果收到{“result”:{“received”:25,”sent”:25}}的结果，证明成功了</p>\n<h3 id=\"查询\"><a href=\"#查询\" class=\"headerlink\" title=\"查询\"></a>查询</h3><p>8082端口是druid集群的broker节点的接口,wikiticker-top-pages.json为查询命令文件。这里是用户以二进制文件的方式提交一个post请求<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">curl -L -H&apos;Content-Type: application/json&apos; -XPOST --data-binary @quickstart/wikiticker-top-pages.json http://localhost:8082/druid/v2/?pretty</div></pre></td></tr></table></figure></p>\n<p>结束语：<br>  以上，用实时的方式加载数据到druid的单机测试已经完成，这只是一个简单的练手，通过这个测试，我们可以对druid的加载方式有个简单的了解，druid集群，有5个节点，coordinater+overlord属于集群的master，起到控制的作用，middlemanager为task管理，historical为历史节点，也可以进行数据的查询，但是只能查询到已经做了落地的数据，实时数据不能查询到，broker为client的访问接口，通过这个节点，可以访问到实时数据和历史数据。</p>\n<p>友情链接：<a href=\"http://druid.io\" target=\"_blank\" rel=\"external\">http://druid.io</a></p>\n","site":{"data":{}},"excerpt":"<p>  druid使用也有一年了，踩过的坑无数，现在虽然线上服务已经稳定，但是还是使用的小白，觉得还是有必要把搭建的流程记录下。<br>  单机版的搭建流程十分简单，适合机器资源不是很充足，或者对druid使用方法测试阶段。其实步骤跟官网上介绍的流程一样的，实时加载使用druid+tranquility，离线数据加载使用druid的batch加载方式。用的很简单，有不足的地方，望指教。</p>\n<ul>\n<li>","more":"</li>\n</ul>\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">druid</div><div class=\"line\">tranquility</div><div class=\"line\">zookeeper</div></pre></td></tr></table></figure>\n<h2 id=\"druid集群启动\"><a href=\"#druid集群启动\" class=\"headerlink\" title=\"druid集群启动\"></a>druid集群启动</h2><h3 id=\"准备机器（一台）\"><a href=\"#准备机器（一台）\" class=\"headerlink\" title=\"准备机器（一台）\"></a>准备机器（一台）</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Java 8 或者更高版本</div><div class=\"line\">Linux, Mac OS X, 或者其他 Unix-like OS (Windows不支持，可以使用虚拟机)</div><div class=\"line\">8G内存</div><div class=\"line\">2核cpu</div></pre></td></tr></table></figure>\n<h3 id=\"下载druid\"><a href=\"#下载druid\" class=\"headerlink\" title=\"下载druid\"></a>下载druid</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">curl -O http://static.druid.io/artifacts/releases/druid-0.10.0-bin.tar.gz</div><div class=\"line\">tar -xzf druid-0.10.0-bin.tar.gz</div><div class=\"line\"><span class=\"built_in\">cd</span> druid-0.10.0</div></pre></td></tr></table></figure>\n<h3 id=\"启动zk（根据自己的习惯，将zk放在合适的地方）\"><a href=\"#启动zk（根据自己的习惯，将zk放在合适的地方）\" class=\"headerlink\" title=\"启动zk（根据自己的习惯，将zk放在合适的地方）\"></a>启动zk（根据自己的习惯，将zk放在合适的地方）</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">curl http://www.gtlib.gatech.edu/pub/apache/zookeeper/zookeeper-3.4.6/zookeeper-3.4.6.tar.gz -o zookeeper-3.4.6.tar.gz</div><div class=\"line\">tar -xzf zookeeper-3.4.6.tar.gz</div><div class=\"line\">cd zookeeper-3.4.6</div><div class=\"line\">cp conf/zoo_sample.cfg conf/zoo.cfg</div><div class=\"line\">./bin/zkServer.sh start</div></pre></td></tr></table></figure>\n<h3 id=\"初始化一些文件夹（druid运行过程中，需要生成的文件存放的地方）\"><a href=\"#初始化一些文件夹（druid运行过程中，需要生成的文件存放的地方）\" class=\"headerlink\" title=\"初始化一些文件夹（druid运行过程中，需要生成的文件存放的地方）\"></a>初始化一些文件夹（druid运行过程中，需要生成的文件存放的地方）</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">在druid文件的根目录下执行：bin/init</div></pre></td></tr></table></figure>\n<h3 id=\"druid单机版集群启动命令\"><a href=\"#druid单机版集群启动命令\" class=\"headerlink\" title=\"druid单机版集群启动命令\"></a>druid单机版集群启动命令</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">java `cat conf-quickstart/druid/historical/jvm.config | xargs` -cp &quot;conf-quickstart/druid/_common:conf-quickstart/druid/historical:lib/*&quot; io.druid.cli.Main server historical</div><div class=\"line\">java `cat conf-quickstart/druid/broker/jvm.config | xargs` -cp &quot;conf-quickstart/druid/_common:conf-quickstart/druid/broker:lib/*&quot; io.druid.cli.Main server broker</div><div class=\"line\">java `cat conf-quickstart/druid/coordinator/jvm.config | xargs` -cp &quot;conf-quickstart/druid/_common:conf-quickstart/druid/coordinator:lib/*&quot; io.druid.cli.Main server coordinator</div><div class=\"line\">java `cat conf-quickstart/druid/overlord/jvm.config | xargs` -cp &quot;conf-quickstart/druid/_common:conf-quickstart/druid/overlord:lib/*&quot; io.druid.cli.Main server overlord</div><div class=\"line\">java `cat conf-quickstart/druid/middleManager/jvm.config | xargs` -cp &quot;conf-quickstart/druid/_common:conf-quickstart/druid/middleManager:lib/*&quot; io.druid.cli.Main server middleManager</div></pre></td></tr></table></figure>\n<p>以上，就是druid单机版的测试版本配置和启动的过程，其中，注意启动用户的权限，如果用户没有创建文件夹的权限，记得提高用户的权限。有了上述的工作，我们就有了一个单机版的druid测试集群，接下来我们要启动tranquility服务，用来接收实时数据流。</p>\n<h2 id=\"tranquility启动\"><a href=\"#tranquility启动\" class=\"headerlink\" title=\"tranquility启动\"></a>tranquility启动</h2><h3 id=\"下载tranquility\"><a href=\"#下载tranquility\" class=\"headerlink\" title=\"下载tranquility\"></a>下载tranquility</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">curl -O http://static.druid.io/tranquility/releases/tranquility-distribution-0.8.0.tgz</div><div class=\"line\">tar -xzf tranquility-distribution-0.8.0.tgz</div><div class=\"line\">cd tranquility-distribution-0.8.0</div></pre></td></tr></table></figure>\n<h3 id=\"启动tranquility服务\"><a href=\"#启动tranquility服务\" class=\"headerlink\" title=\"启动tranquility服务\"></a>启动tranquility服务</h3><p>/conf-quickstart/tranquility/server.json 是实时流加载配置文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">bin/tranquility server -configFile &lt;path_to_druid_distro&gt;/conf-quickstart/tranquility/server.json</div></pre></td></tr></table></figure></p>\n<h3 id=\"一个测试的实时流数据\"><a href=\"#一个测试的实时流数据\" class=\"headerlink\" title=\"一个测试的实时流数据\"></a>一个测试的实时流数据</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">bin/generate-example-metrics | curl -XPOST -H&apos;Content-Type: application/json&apos; --data-binary @- http://localhost:8200/v1/post/metrics</div></pre></td></tr></table></figure>\n<p>如果收到{“result”:{“received”:25,”sent”:25}}的结果，证明成功了</p>\n<h3 id=\"查询\"><a href=\"#查询\" class=\"headerlink\" title=\"查询\"></a>查询</h3><p>8082端口是druid集群的broker节点的接口,wikiticker-top-pages.json为查询命令文件。这里是用户以二进制文件的方式提交一个post请求<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">curl -L -H&apos;Content-Type: application/json&apos; -XPOST --data-binary @quickstart/wikiticker-top-pages.json http://localhost:8082/druid/v2/?pretty</div></pre></td></tr></table></figure></p>\n<p>结束语：<br>  以上，用实时的方式加载数据到druid的单机测试已经完成，这只是一个简单的练手，通过这个测试，我们可以对druid的加载方式有个简单的了解，druid集群，有5个节点，coordinater+overlord属于集群的master，起到控制的作用，middlemanager为task管理，historical为历史节点，也可以进行数据的查询，但是只能查询到已经做了落地的数据，实时数据不能查询到，broker为client的访问接口，通过这个节点，可以访问到实时数据和历史数据。</p>\n<p>友情链接：<a href=\"http://druid.io\">http://druid.io</a></p>"},{"title":"Hexo-Yelee 使用语法总结及注意","date":"2017-04-27T16:00:00.000Z","+description":"不开心","_content":"\n#### hexo支持的是Github Flavored Markdown语法\n\n先来个more，详情页你不会看到我的啦~~~~\n\n <!--more-->\n\n 1. 我是table\n\nhe | he\n---|---\n1 | 1\n\n\n 2. 我是引用\n > \nTranquility is a Scala library that coordinates streaming ingestion through the Druid indexing service. It exists because the Druid indexing service API is fairly low level. In the indexing service, callers create \"tasks\" that run on a single machine using a fixed bundle of resources. Indexing tasks start up with a particular configuration and generally this configuration cannot be changed once the task is running.\nTranquility manages creation of Druid indexing tasks, handling partitioning, replication, service discovery, and schema rollover for you, seamlessly and without downtime. You never have to write code to deal with individual tasks directly.\n\n 3. 我是另一个引用\n > \nTranquility 是一个通过druid indexing service协调实时注入的scala库。它之所以存在是因为druid indexing service的api水平相当地低。对于indexing service,调用者生成tasks，这个tasks运行在一个使用固定的资源包的机器上。Indexing tasks 用一个特定的配置启动，通常tasks一旦启动，这个配置就不能更改了。\n\n 4. 我是注意事项\n ```bash\n注意：\n行与行之间，不能有多个换行，至多一个\n每个命令后面需要跟一个空格，不然命令会不生效\n列中穿插别的符号，就会重新开始索引的\n```\n\n 5. 我是各种标题\n <pre>\n # 标题1\n ## 标题2\n ### 标题3\n #### 标题4\n ###### 标题5\n ###### 标题6\n \n 6. 我是代码段\n ```\n woshi daima\n woshi daima\n woshi daima\n ```\n \n 7. 我是加粗字体\n **加粗**\n\n `你猜我是啥`\n \n 8. `下面的是多行代码呀`\n <pre>\n fsdfgrg \n ewrgrgregregre\n frgr \n <code>\n \n 9. \n * 1\n * 2\n * 3\n \n 10. 下面的我疯啦，你猜他们都是啥\n__lalal__\n_alalal_\n_You **can** combine them_\n\n* Item 1\n* Item 2\n  * Item 2a\n  * Item 2b\n  \n  \n1. Item 1\n1. Item 2\n1. Item 3\n   1. Item 3a\n   1. Item 3b\n   \n\nI think you should use an\n`<addr>` element here instead.\n   \n   \n![GitHub Logo](/img/avatar.png)\n \n \n \n \n \n \n \n \n \n \n \n \n ","source":"_posts/druid_tranquility_overview.md","raw":"---\ntitle: Hexo-Yelee 使用语法总结及注意\ndate: 2017-04-28 00:00:00\ncategories: hexo\ntags:\n - hexo\n - yelee\n+description: \"不开心\"\n---\n\n#### hexo支持的是Github Flavored Markdown语法\n\n先来个more，详情页你不会看到我的啦~~~~\n\n <!--more-->\n\n 1. 我是table\n\nhe | he\n---|---\n1 | 1\n\n\n 2. 我是引用\n > \nTranquility is a Scala library that coordinates streaming ingestion through the Druid indexing service. It exists because the Druid indexing service API is fairly low level. In the indexing service, callers create \"tasks\" that run on a single machine using a fixed bundle of resources. Indexing tasks start up with a particular configuration and generally this configuration cannot be changed once the task is running.\nTranquility manages creation of Druid indexing tasks, handling partitioning, replication, service discovery, and schema rollover for you, seamlessly and without downtime. You never have to write code to deal with individual tasks directly.\n\n 3. 我是另一个引用\n > \nTranquility 是一个通过druid indexing service协调实时注入的scala库。它之所以存在是因为druid indexing service的api水平相当地低。对于indexing service,调用者生成tasks，这个tasks运行在一个使用固定的资源包的机器上。Indexing tasks 用一个特定的配置启动，通常tasks一旦启动，这个配置就不能更改了。\n\n 4. 我是注意事项\n ```bash\n注意：\n行与行之间，不能有多个换行，至多一个\n每个命令后面需要跟一个空格，不然命令会不生效\n列中穿插别的符号，就会重新开始索引的\n```\n\n 5. 我是各种标题\n <pre>\n # 标题1\n ## 标题2\n ### 标题3\n #### 标题4\n ###### 标题5\n ###### 标题6\n \n 6. 我是代码段\n ```\n woshi daima\n woshi daima\n woshi daima\n ```\n \n 7. 我是加粗字体\n **加粗**\n\n `你猜我是啥`\n \n 8. `下面的是多行代码呀`\n <pre>\n fsdfgrg \n ewrgrgregregre\n frgr \n <code>\n \n 9. \n * 1\n * 2\n * 3\n \n 10. 下面的我疯啦，你猜他们都是啥\n__lalal__\n_alalal_\n_You **can** combine them_\n\n* Item 1\n* Item 2\n  * Item 2a\n  * Item 2b\n  \n  \n1. Item 1\n1. Item 2\n1. Item 3\n   1. Item 3a\n   1. Item 3b\n   \n\nI think you should use an\n`<addr>` element here instead.\n   \n   \n![GitHub Logo](/img/avatar.png)\n \n \n \n \n \n \n \n \n \n \n \n \n ","slug":"druid_tranquility_overview","published":1,"updated":"2017-04-28T08:27:42.033Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj26ydlxz00069cuk2z7sjqle","content":"<h4 id=\"hexo支持的是Github-Flavored-Markdown语法\"><a href=\"#hexo支持的是Github-Flavored-Markdown语法\" class=\"headerlink\" title=\"hexo支持的是Github Flavored Markdown语法\"></a>hexo支持的是Github Flavored Markdown语法</h4><p>先来个more，详情页你不会看到我的啦~~~~</p>\n <a id=\"more\"></a>\n<ol>\n<li>我是table</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>he</th>\n<th>he</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>1</td>\n</tr>\n</tbody>\n</table>\n<ol>\n<li><p>我是引用</p>\n<blockquote>\n<p>Tranquility is a Scala library that coordinates streaming ingestion through the Druid indexing service. It exists because the Druid indexing service API is fairly low level. In the indexing service, callers create “tasks” that run on a single machine using a fixed bundle of resources. Indexing tasks start up with a particular configuration and generally this configuration cannot be changed once the task is running.<br>Tranquility manages creation of Druid indexing tasks, handling partitioning, replication, service discovery, and schema rollover for you, seamlessly and without downtime. You never have to write code to deal with individual tasks directly.</p>\n</blockquote>\n</li>\n<li><p>我是另一个引用</p>\n<blockquote>\n<p>Tranquility 是一个通过druid indexing service协调实时注入的scala库。它之所以存在是因为druid indexing service的api水平相当地低。对于indexing service,调用者生成tasks，这个tasks运行在一个使用固定的资源包的机器上。Indexing tasks 用一个特定的配置启动，通常tasks一旦启动，这个配置就不能更改了。</p>\n</blockquote>\n</li>\n<li><p>我是注意事项</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">注意：</div><div class=\"line\">行与行之间，不能有多个换行，至多一个</div><div class=\"line\">每个命令后面需要跟一个空格，不然命令会不生效</div><div class=\"line\">列中穿插别的符号，就会重新开始索引的</div></pre></td></tr></table></figure>\n</li>\n<li><p>我是各种标题<br><pre></pre></p>\n<h1 id=\"标题1\"><a href=\"#标题1\" class=\"headerlink\" title=\"标题1\"></a>标题1</h1><h2 id=\"标题2\"><a href=\"#标题2\" class=\"headerlink\" title=\"标题2\"></a>标题2</h2><h3 id=\"标题3\"><a href=\"#标题3\" class=\"headerlink\" title=\"标题3\"></a>标题3</h3><h4 id=\"标题4\"><a href=\"#标题4\" class=\"headerlink\" title=\"标题4\"></a>标题4</h4><h6 id=\"标题5\"><a href=\"#标题5\" class=\"headerlink\" title=\"标题5\"></a>标题5</h6><h6 id=\"标题6\"><a href=\"#标题6\" class=\"headerlink\" title=\"标题6\"></a>标题6</h6></li>\n<li><p>我是代码段</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">woshi daima</div><div class=\"line\">woshi daima</div><div class=\"line\">woshi daima</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<ol>\n<li><p>我是加粗字体<br><strong>加粗</strong></p>\n<p><code>你猜我是啥</code></p>\n</li>\n<li><p><code>下面的是多行代码呀</code><br><pre><br>fsdfgrg<br>ewrgrgregregre<br>frgr<br><code></code></pre></p>\n</li>\n<li></li>\n</ol>\n<ul>\n<li>1</li>\n<li>2</li>\n<li>3</li>\n</ul>\n<ol>\n<li>下面的我疯啦，你猜他们都是啥<br><strong>lalal</strong><br><em>alalal</em><br><em>You <strong>can</strong> combine them</em></li>\n</ol>\n<ul>\n<li>Item 1</li>\n<li>Item 2<ul>\n<li>Item 2a</li>\n<li>Item 2b</li>\n</ul>\n</li>\n</ul>\n<ol>\n<li>Item 1</li>\n<li>Item 2</li>\n<li>Item 3<ol>\n<li>Item 3a</li>\n<li>Item 3b</li>\n</ol>\n</li>\n</ol>\n<p>I think you should use an<br><code>&lt;addr&gt;</code> element here instead.</p>\n<p><img src=\"/img/avatar.png\" alt=\"GitHub Logo\"></p>\n","site":{"data":{}},"excerpt":"<h4 id=\"hexo支持的是Github-Flavored-Markdown语法\"><a href=\"#hexo支持的是Github-Flavored-Markdown语法\" class=\"headerlink\" title=\"hexo支持的是Github Flavored Markdown语法\"></a>hexo支持的是Github Flavored Markdown语法</h4><p>先来个more，详情页你不会看到我的啦~~~~</p>","more":"<ol>\n<li>我是table</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>he</th>\n<th>he</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>1</td>\n</tr>\n</tbody>\n</table>\n<ol>\n<li><p>我是引用</p>\n<blockquote>\n<p>Tranquility is a Scala library that coordinates streaming ingestion through the Druid indexing service. It exists because the Druid indexing service API is fairly low level. In the indexing service, callers create “tasks” that run on a single machine using a fixed bundle of resources. Indexing tasks start up with a particular configuration and generally this configuration cannot be changed once the task is running.<br>Tranquility manages creation of Druid indexing tasks, handling partitioning, replication, service discovery, and schema rollover for you, seamlessly and without downtime. You never have to write code to deal with individual tasks directly.</p>\n</blockquote>\n</li>\n<li><p>我是另一个引用</p>\n<blockquote>\n<p>Tranquility 是一个通过druid indexing service协调实时注入的scala库。它之所以存在是因为druid indexing service的api水平相当地低。对于indexing service,调用者生成tasks，这个tasks运行在一个使用固定的资源包的机器上。Indexing tasks 用一个特定的配置启动，通常tasks一旦启动，这个配置就不能更改了。</p>\n</blockquote>\n</li>\n<li><p>我是注意事项</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">注意：</div><div class=\"line\">行与行之间，不能有多个换行，至多一个</div><div class=\"line\">每个命令后面需要跟一个空格，不然命令会不生效</div><div class=\"line\">列中穿插别的符号，就会重新开始索引的</div></pre></td></tr></table></figure>\n</li>\n<li><p>我是各种标题<br><pre></p>\n<h1 id=\"标题1\"><a href=\"#标题1\" class=\"headerlink\" title=\"标题1\"></a>标题1</h1><h2 id=\"标题2\"><a href=\"#标题2\" class=\"headerlink\" title=\"标题2\"></a>标题2</h2><h3 id=\"标题3\"><a href=\"#标题3\" class=\"headerlink\" title=\"标题3\"></a>标题3</h3><h4 id=\"标题4\"><a href=\"#标题4\" class=\"headerlink\" title=\"标题4\"></a>标题4</h4><h6 id=\"标题5\"><a href=\"#标题5\" class=\"headerlink\" title=\"标题5\"></a>标题5</h6><h6 id=\"标题6\"><a href=\"#标题6\" class=\"headerlink\" title=\"标题6\"></a>标题6</h6></li>\n<li><p>我是代码段</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">woshi daima</div><div class=\"line\">woshi daima</div><div class=\"line\">woshi daima</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<ol>\n<li><p>我是加粗字体<br><strong>加粗</strong></p>\n<p><code>你猜我是啥</code></p>\n</li>\n<li><p><code>下面的是多行代码呀</code><br><pre><br>fsdfgrg<br>ewrgrgregregre<br>frgr<br><code></p>\n</li>\n<li></li>\n</ol>\n<ul>\n<li>1</li>\n<li>2</li>\n<li>3</li>\n</ul>\n<ol>\n<li>下面的我疯啦，你猜他们都是啥<br><strong>lalal</strong><br><em>alalal</em><br><em>You <strong>can</strong> combine them</em></li>\n</ol>\n<ul>\n<li>Item 1</li>\n<li>Item 2<ul>\n<li>Item 2a</li>\n<li>Item 2b</li>\n</ul>\n</li>\n</ul>\n<ol>\n<li>Item 1</li>\n<li>Item 2</li>\n<li>Item 3<ol>\n<li>Item 3a</li>\n<li>Item 3b</li>\n</ol>\n</li>\n</ol>\n<p>I think you should use an<br><code>&lt;addr&gt;</code> element here instead.</p>\n<p><img src=\"/img/avatar.png\" alt=\"GitHub Logo\"></p>"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n+ <!-- more -->\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n+ <!-- more -->\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2017-04-26T04:09:09.295Z","updated":"2017-04-26T08:11:46.035Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj26ydlxz00079cukrj6h8kq1","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<ul>\n<li><a id=\"more\"></a>\n</li>\n</ul>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<ul>\n<li>","more":"</li>\n</ul>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a></p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cj26ydlxz00069cuk2z7sjqle","category_id":"cj26ydlyf00089cuk1nbo4z9m","_id":"cj26ydlyf000c9cukydfn5gl7"}],"PostTag":[{"post_id":"cj26ydlxk00019cuk26m2lmbb","tag_id":"cj26ydlxz00059cukv1etixcy","_id":"cj26ydlyf000b9cuk7d965wwj"},{"post_id":"cj26ydlxk00019cuk26m2lmbb","tag_id":"cj26ydlyf00099cukxsq63j6c","_id":"cj26ydlyf000d9cuk6uwnv4i3"},{"post_id":"cj26ydlxz00039cuk2yyo312b","tag_id":"cj26ydlyf000a9cukj1ov4fb6","_id":"cj26ydlyf000f9cuk98xarcz6"},{"post_id":"cj26ydlxz00069cuk2z7sjqle","tag_id":"cj26ydlxz00059cukv1etixcy","_id":"cj26ydlyv000h9cuk1oagsqdf"},{"post_id":"cj26ydlxz00069cuk2z7sjqle","tag_id":"cj26ydlyf000g9cuk1okyw0j7","_id":"cj26ydlyv000i9cuk887nwmuw"}],"Tag":[{"name":"hexo","_id":"cj26ydlxz00059cukv1etixcy"},{"name":"github pages","_id":"cj26ydlyf00099cukxsq63j6c"},{"name":"druid.io","_id":"cj26ydlyf000a9cukj1ov4fb6"},{"name":"yelee","_id":"cj26ydlyf000g9cuk1okyw0j7"}]}}